<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE Function SYSTEM "../DTD/Function.dtd">
<Function>
	<KnowledgeBase>
        <Title>defun</Title>
		<FunctionName>defun</FunctionName>
		<FunctionType>Macro</FunctionType>
        <ArgumentTypes> Lambda  Symbol</ArgumentTypes>
        <DataType> Lambda</DataType>
	    <RelatedFunctions>defriend defmethod defmacro deforphan defchild</RelatedFunctions>
        <RelatedVMInstructions>   </RelatedVMInstructions>
		<HumanKeywords>function global variable </HumanKeywords>
	</KnowledgeBase>
         <Description><![CDATA[
             <p> The <b>defun</b> macro creates a new Lambda object and assigns it to the specified global variable {name} </p>
          ]]></Description>
	<Brief>
	   <Overview><![CDATA[
	    <p> The <b>defun </b> macro creates a new Lambda object and assigns it to the specified 
             global variable <b>{name}</b>.</p>
        ]]></Overview>
       <Usage><![CDATA[
        <p>Use this macro when an Lambda must be defined in Lisp.</p>
        ]]></Usage>
    </Brief>
	<Syntax>
	    <Expression><![CDATA[<p><b>    (defun  name(arg...)  faces:(var...) vars:(var...)  pvars:(var...) 
                   cvars:(var...) regs:(var...) exp...)</b></p>
        ]]></Expression>   
		<Argument> 
		  <Name>name</Name>
		  <Note><![CDATA[
		  <p> The name that the Lambda will be associated with. </p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Argument>
		  <Name>(arg...)</Name>
		  <Note><![CDATA[
		  <p> Optional Argument. Argument list for the Lambda. </p>
          ]]></Note>
		  <AISTypes>---</AISTypes>
		</Argument>
		<Argument>
		  <Name>faces:(var...)</Name>
		  <Note><![CDATA[
		  <p> Optional Argument. If present, must be followed by a interfaces feature list. </p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Argument>
		  <Name>vars:(var...)</Name>
		  <Note><![CDATA[
		  <p> Optional Argument. If present, must be followed by a local variable list.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Argument>
		  <Name>pvars:(var...)</Name>
		  <Note><![CDATA[
		  <p> Optional Argument. If present, must be followed by a persistent variable list.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Argument>
		  <Name>cvars:(var...)</Name>
		  <Note><![CDATA[
		  <p> Optional Argument. If present, must be followed by a persistent class variable list.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Argument>
		  <Name>regs:(var...)</Name>
		  <Note><![CDATA[
		  <p> Optional Argument. If present, must be followed by a register variable list 


              (up to fifty register variables are allowed).</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Argument>
		  <Name>exp...</Name>
		  <Note><![CDATA[
		  <p> The Lisp statements that forms the Lambdas</p>
          ]]></Note>
		  <AISTypes>---</AISTypes>
		</Argument>
		<Return><![CDATA[
	    <p>An Lambda that will be assigned the name {name}.</p>
	    ]]></Return>
	</Syntax>
</Function>
