<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE Function SYSTEM "../DTD/Function.dtd">
<Function>
	<KnowledgeBase>
        <Title>bitToIntegerVector</Title>
		<FunctionName>bitToIntegerVector</FunctionName>
		<FunctionType>Builtin</FunctionType>
        <ArgumentTypes>  IntVector BitVector</ArgumentTypes>
        <DataType> IntVector BitVector</DataType>
	    <RelatedFunctions>bitToNumberVector</RelatedFunctions>
        <RelatedVMInstructions> vmsetnumvector vmsetintvector vmsetvector </RelatedVMInstructions>
		<HumanKeywords>bitvector intvector numvector convert sign magnitude bits</HumanKeywords>
	</KnowledgeBase>
         <Description><![CDATA[
             <p> The <b>bitToIntegerVector</b>  Function converts a Bit Vector into an Integer Vector.</p>
          ]]></Description>
	<Brief>
	   <Overview><![CDATA[
		<p>The  <b>bitToIntegerVector</b> function converts a Bit Vector into an Integer Vector. 
           The Bit vector is treated as a series of 32-bit groups. Each 32-bit group is converted 
           into an Integer as follows: (a) the first bit becomes the sign, and (b) the trailing 
           31 bits become the magnitude. </p>
        <p>Only Bit Vectors, which are an exact multiple of 32 bits in length, can be converted. 
           If a Bit Vector, which is not an even multiple of 32 bits in length is inputted, an 
           error message is returned; otherwise the Bit Vector is converted into an Integer 
           Vector containing one number for every 32 bits in the input Bit vector. 
           For instance, passing a Bit Vector of length 96 will return an Integer Vector of 
           length 3; while, passing a Bit Vector of length 100 will return an error message. </p>
        ]]></Overview>
       <Usage><![CDATA[
        <p>When a Bit Vector has been evolved, using a genetic algorithm, as a genome, 
           the <b>bitToIntegerVector</b> function is an efficient way to convert the Bit 
           Vector genome into an Integer Vector for direct use in solving the target problem
		</p>
        ]]></Usage>
    </Brief>
	<Syntax>
	    <Expression><![CDATA[<p>     (bitToIntegerVector  bitVector) </p>
                    <p>     (bitToIntegerVector  bitVector intVector) </p>]]></Expression>
		<Argument> 
		  <Name>bitVector</Name>
		  <Note><![CDATA[
		  <p> A Bit Vector to be converted into an Integer Vector</p>
          ]]></Note>
		  <AISTypes>BitVector </AISTypes>
		</Argument>
     	<Argument> 
		  <Name>intVector</Name>
		  <Note><![CDATA[
		  <p>(Optional) an Integer Vector to receive the converted bits from the Bit Vector</p>
          ]]></Note>
		  <AISTypes>IntVector</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an Integer Vector.
        </p>
	    ]]></Return>
	</Syntax>
</Function>
