<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE Essay SYSTEM "../DTD/Essay.dtd">
<Essay>
	<KnowledgeBase>
	    <Title>Document Event Handlers</Title>
		<Topic>XML</Topic>
		<SubTopic>Overview</SubTopic>
		<HumanKeywords>XML Programming Artificial-Intelligence</HumanKeywords>
	</KnowledgeBase>
	<Section>
	    <Heading>Document Events Overview</Heading>
		<Description><![CDATA[
            <div class="h2section" id="Document Events Overview">		
		<P>This section is a reference guide to the standards for creating and using Document Event Handlers with the <B>xml</B> compiler function.  Document Event Handlers allow the user to avoid creating a document tree model in memory; but instead, to have the compiler pass each parse event to a document event handler Lambda.  This allows complete user tailoring of the XML compilation process. All of the basic methods required of document event handlers are contained in this section.</P>
		<P>This is the main interface that most SAX applications implement: if the application needs to be informed of basic parsing events, it implements this interface and passes an instance to the xml. The xml compiler uses the instance to report basic document-related events like the start and end of elements and character data.</P>
		<P>The order of events in this interface is very important, and mirrors the order of information in the document itself. For example, all of an element's content (character data, processing instructions, and/or subelements) will appear, in order, between the startElement event and the corresponding endElement event. For example the following XML input string:</P>
		<p class="code">&lt;?xml version="1.0"?&gt;<br>
		&lt;poem&gt;<br>
		&lt;line&gt;Roses are red,&lt;/line&gt;<br>
		&lt;line&gt;Violets are blue.&lt;/line&gt;<br>
		&lt;line&gt;Sugar is sweet,&lt;/line&gt;<br>
		&lt;line&gt;and I love you.&lt;/line&gt;<br>
		&lt;/poem&gt;</p>
		<P>Initiates the following XML document event chain:</P>
		<p class="code">(eventHandler.startDocument)<br>
		(eventHandler.startElement &quot;xml&quot; #{version: &quot;1.0&quot;})<br>
		(eventHandler.startElement &quot;poem&quot; #void)<br>
		(eventHandler.startElement &quot;line&quot; #void)<br>
		(eventHandler.characters &quot;Roses are red,&quot;)<br>
		(eventHandler.endElement &quot;line&quot;)<br>
		(eventHandler.startElement &quot;line&quot; #void)<br>
		(eventHandler.characters &quot;Violets are blue.&quot;)<br>
		(eventHandler.endElement &quot;line&quot;)<br>
		(eventHandler.startElement &quot;line&quot; #void)<br>
		(eventHandler.characters &quot;Sugar is sweet,&quot;)<br>
		(eventHandler.endElement &quot;line&quot;)<br>
		(eventHandler.startElement &quot;line&quot; #void)<br>
		(eventHandler.characters &quot;and I love you.&quot;)<br>
		(eventHandler.endElement &quot;line&quot;)<br>
		(eventHandler.endElement &quot;poem&quot;)<br>
		(eventHandler.endElement &quot;xml&quot;)<br>
		(eventHandler.endDocument)</p>
		</div>
	    ]]></Description>
	</Section>
	<Section>
	    <Heading>characters</Heading>
		<Description><![CDATA[
           <div class="h2section" id="characters">
			<P>The document event handler receives notification of a stream of content character 
            data. This method is invoked whenever character data is encountered in an element 
            content section.</P>
			<p>Syntax: (eventHandler.characters aString)</p>
			<TABLE CELLSPACING=0 BORDER=0 cellpadding=2 >
			<TR VALIGN="TOP"><TD>
			<B>aString</B></TD>
			<TD>
			<P>A string containing the content character data.</TD>
			</TR>
			<TR VALIGN="TOP"><TD>
			<B>Returns</B></TD>
			<TD>
			<P>True if there were no errors; otherwise, an error.</TD>
			</TR>
			</TABLE>
			<H3>Example1</H3>			
			<p class="code">XML Input: &lt;Name&gt;John&lt;/Name&gt;</p>
			<p><b>Event Chain:</b></p>
			<p class="code"> (eventHandler.startElement &quot;Name&quot; #void)<br>
			(eventHandler.characters &quot;John&quot;)<br>
			(eventHandler.endElement &quot;Name&quot;)</p>
			<P>Note: The character event notifies the document event handler some content character data has been encountered. </P>
			</div>
	    ]]></Description>
	</Section>
	<Section>
	    <Heading>comments</Heading>
		<Description><![CDATA[
			<div class="h2section" id="comments">
			<P>The document event handler receives notification of a stream of comment character data. This method is invoked whenever comment data is encountered in an element content section.</P>
			<p class="syntax">Syntax:  (eventHandler.comments aString)</p>
			<TABLE CELLSPACING=0 BORDER=0 cellpadding=2 >
			<TR VALIGN="TOP"><TD>
			<B>aString</B></TD>
			<TD>
			<P>A string containing the comment character data.</TD>
			</TR>
			<TR VALIGN="TOP"><TD>
			<B>Returns</B></TD>
			<TD>
			<P>True if there were no errors; otherwise, an error.</TD>
			</TR>
			</TABLE>
			<H3>Example1</H3>
			<p class="code">XML Input: &lt;Name&gt;&lt;!--This is a comment--&gt;John&lt;/Name&gt;</p>
			<p><b>Event Chain:</b></p>
			<p class="code">(eventHandler.startElement &quot;Name&quot; #void)<br>
			(eventHandler.characters &quot;John&quot;)<br>
			(eventHandler.comments &quot;This is a comment&quot;)<br>
			(eventHandler.endElement &quot;Name&quot;)</p>
			<P>Note:The character event notifies the document event handler some content character data has been encountered. </P>
			</div>
	    ]]></Description>
	</Section>
	<Section>
	    <Heading>doctype Definition</Heading>
		<Description><![CDATA[
			<div class="h2section" id="doctypeDefinition">
			<P>The document event handler receives notification of a stream of document type definition character data. This method is invoked whenever a document type definition is encountered.</P>
			<p>Syntax: (eventHandler.doctypeDefinition name aString)</p>
			<TABLE CELLSPACING=0 BORDER=0 cellpadding=2 >
			<TR VALIGN="TOP"><TD>
			<B>name</B></TD>
			<TD>
			<P>The tag name of the document type definition: <B>DOCTYPE</B>, <B>ELEMENT</B>, <B>ENTITY</B>, <B>ATTLIST</B>, or <B>NOTATION</B>.</TD>
			</TR>
			<TR VALIGN="TOP"><TD>
			<B>aString</B></TD>
			<TD>
			<P>A string containing the content character data of the document type definition.</TD>
			</TR>
			<TR VALIGN="TOP"><TD>
			<B>Returns</B></TD>
			<TD>
			<P>True if there were no errors; otherwise, an error.</TD>
			</TR>
			</TABLE>
			<H3>Example1</H3>
			<p class="code">XML Input: &lt;!DOCTYPE MyDoc SYSTEM "MYDOC.DTD"&gt;</p>
			<p><b>Event Chain: </b></p>
			<p class="code">(eventHandler.doctypeDefinition "DOCTYPE" { MyDoc SYSTEM "MYDOC.DTD"})</p>
			<P>Note: The doctype definition event notifies the document event handler when a document type has been encountered. </P>
			<H3>Example2</H3>
			<p class="code">XML Input: <br>
			&lt;!DOCTYPE list [ <br>
			&lt;!ELEMENT list (item+)&gt;<br>
			&lt;!ELEMENT item (#PCDATA)&gt;<br>
			&lt;!ATTLIST item topic CDATA #IMPLIED&gt;<br>
			] &gt;</p>
			<p><b>Event Chain:</b></p>
			<p class="code"> (eventHandler.doctypeDefinition "DOCTYPE" "list")<br>
			(eventHandler.doctypeDefinition "ELEMENT" "list (item+)")<br>
			(eventHandler.doctypeDefinition "ELEMENT" "item (#PCDATA)")<br>
			(eventHandler.doctypeDefinition "ATTLIST" "item topic CDATA #IMPLIED")</p>
			<P>Note: The doctype definition event notifies the document event handler when a document type has been encountered. </P>
			</div>
	    ]]></Description>
	</Section>
	<Section>
	    <Heading>errorMessage</Heading>
		<Description><![CDATA[
			<div class="h2section" id="errorMessage">
			<P>The document event handler receives notification of a parse error. This method is invoked whenever the <B>xml</B> compiler encounters a parse error.</p>
			<p>Syntax: (eventHandler.errorMessage aString)</p>
			<TABLE CELLSPACING=0 BORDER=0 cellpadding=2 >
			<TR VALIGN="TOP"><TD>
			<B>aString</B></TD>
			<TD>
			<P>A string containing the error message.</TD>
			</TR>
			<TR VALIGN="TOP"><TD>
			<B>Returns</B></TD>
			<TD>
			<P>True if there were no errors; otherwise, an error.</TD>
			</TR>
			</TABLE>
			<H3>Example1</H3>
			<p class="code"> XML Input:<br>
			&lt;Name&gt;John&lt;/Mike&gt;</p>
			<p><b>Event Chain:</b></p>
			<p class="code"> (eventHandler.startElement &quot;Name&quot; #void)<br>
			(eventHandler.characters &quot;John&quot;)<br>
			(eventHandler.errorMessage &quot;Element end had tag of Mike, expected Name&quot;)<br>
			(eventHandler.endElement &quot;Mike&quot;)</p>
			<P>Note: The errorMessage event notifies the document event handler when a parse error has been encountered. </P>
			</div>
	    ]]></Description>
	</Section>
	<Section>
	    <Heading>endDocument</Heading>
		<Description><![CDATA[
			<div class="h2section" id="endDocument">
			<P>The document event handler receives notification of the end of a document. This method is 
			invoked after all other method of the document event handler.</P>
			<p>Syntax: (eventHandler.endDocument)</p>
			<TABLE CELLSPACING=0 BORDER=0 cellpadding=2 >
			<TR VALIGN="TOP"><TD>
			<B>Returns</B></TD>
			<TD>
			<P>True if there were no errors; otherwise, an error.</TD>
			</TR>
			</TABLE>
			<H3>Example1</H3>
			<p class="code"> XML Input: &lt;?xml?&gt;</p>
			<p><b>Event Chain: </b></p>
			<p class="code"> (eventHandler.startDocument)<br>
			...<br>
			(eventHandler.endDocument)</p>
			<P>Note: The endDocument event notifies the document event handler that the current document parse is ending. </P>
			</div>
	    ]]></Description>
	</Section>     
	<Section>
	    <Heading>endElement</Heading>
		<Description><![CDATA[
            <div class="h2section" id="endElement">
			<P>The document event handler receives notification of the end of an element. This method is 
			invoked at the end of every element, even if the element is empty.</P>
			<p>Syntax: (eventHandler.endElement name)</p>
			<TABLE CELLSPACING=0 BORDER=0 cellpadding=2 >
			<TR VALIGN="TOP"><TD>
			<B>name</B></TD>
			<TD>
			<P>The Tag name of the element.</TD>
			</TR>
			<TR VALIGN="TOP"><TD>
			<B>Returns</B></TD>
			<TD>
			<P>True if there were no errors; otherwise, an error.</TD>
			</TR>
			</TABLE>
			<H3>Example1</H3>
			<p class="code"> XML Input: &lt;Name/&gt;</p>
			<p><b>Event Chain:</b></p>
			<p> (eventHandler.startElement &quot;Name&quot; #void)<br>
			...<br>
			(eventHandler.endElement &quot;Name&quot;)</p>
			<P>Note: The endElement event notifies the document event handler that the current
			 element parse is ending. </P>
			</div>
	    ]]></Description>
	</Section>    
	<Section>
	    <Heading>ignorableWhitespace</Heading>
		<Description><![CDATA[
            <div class="h2section" id="ignorableWhitespace">
			<P>The document event handler receives notification of a stream of content whitespace data. 
			This method is invoked whenever whitespace data is encountered in an element content section.</P>
			<p>Syntax: (eventHandler.ignoreableWhitespace aString)</p>
			<TABLE CELLSPACING=0 BORDER=0 cellpadding=2 >
			<TR VALIGN="TOP"><TD>
			<B>aString</B></TD>
			<TD>
			<P>A string containing the content whitespace data.</TD>
			</TR>
			<TR VALIGN="TOP"><TD>
			<B>Returns</B></TD>
			<TD>
			<P>True if there were no errors; otherwise, an error.</TD>
			</TR>
			</TABLE>
			<H3>Example1</H3>
			<p class="code"> XML Input: <br>
			&lt;Name&gt;&lt;First&gt;John&lt;/First&gt;   <br>
			&lt;Last&gt;Doe&lt;/Last&gt;&lt;/Name&gt;</p>
			<p><b>Event Chain:</b></p>
			<p class="code"> (eventHandler.startElement &quot;Name&quot; #void)<br>
			(eventHandler.startElement &quot;First&quot; #void)<br>
			(eventHandler.characters &quot;John&quot;)<br>
			(eventHandler.endElement &quot;First&quot;)<br>
			(eventHandler.ignorableWhitespace &quot;   &quot;)<br>
			(eventHandler.startElement &quot;Last&quot; #void)<br>
			(eventHandler.characters &quot;Doe&quot;)<br>
			(eventHandler.endElement &quot;Last&quot;)<br>
			(eventHandler.endElement &quot;Name&quot;)</p>
			<P>Note: The ignorable whitespace event notifies the document event handler that some content white space data has been encountered. </P>
			</div>
	    ]]></Description>
	</Section> 
	<Section>
	    <Heading>processingInstruction</Heading>
		<Description><![CDATA[
            <div class="h2section" id="processingInstruction">
		<P>The document event handler receives notification of a stream of processing instruction
		 character data. This method is invoked whenever a process instruction is encountered.</P>
		<p>Syntax: (eventHandler.processingInstruction name aString)</p>
		<TABLE CELLSPACING=0 BORDER=0 cellpadding=2 >
		<TR VALIGN="TOP"><TD>
		<B>name</B></TD>
		<TD>
		<P>The target name of the processing instruction.</TD>
		</TR>
		<TR VALIGN="TOP"><TD>
		<B>aString</B></TD>
		<TD>
		<P>A string containing the content character data for processing.</TD>
		</TR>
		<TR VALIGN="TOP"><TD>
		<B>Returns</B></TD>
		<TD>
		<P>True if there were no errors; otherwise, an error.</TD>
		</TR>
		</TABLE>
		<H3>Example1</H3>
		<p class="code"> XML Input: &lt;"javaScript writeln("Hello world");"&gt;</p>
		<p><b>Event Chain:</b></p>
		<p class="code"> (eventHandler.processingInstruction &quot;javaScript&quot;<br>
		&quot;writeln(:"Hello world");&quot;)</p>
		Note: The processing instruction event notifies the document event handler when a processing instruction has been encountered. </PRE>
		</div>
	    ]]></Description>
	</Section> 
	<Section>
	    <Heading>startDocument</Heading>
		<Description><![CDATA[
		<div class="h2section" id="startDocument"> 
		<P>The document event handler receives notification of the start of a document. This method 
		is invoked before any other method of the document event handler.</P>
		<p>Syntax: (eventHandler.startDocument)</p>
		<TABLE CELLSPACING=0 BORDER=0 cellpadding=2 >
		<TR VALIGN="TOP"><TD>
		<B>Returns</B></TD>
		<TD>
		<P>True if there were no errors; otherwise, an error.</TD>
		</TR>
		</TABLE>
		<H3>Example1</H3>
		<p class="code"> XML Input: &lt;?xml?&gt;</p>
		<p><b>Event Chain: </b></p>
		<p class="code"> (eventHandler.startDocument)<BR>
		...<BR>
		(eventHandler.endDocument)</p>
		<P>Note: The startDocument event notifies the document event handler that a new document is
		 being parsed. </P>
		</div>
	    ]]></Description>
	</Section>    
	<Section>
	    <Heading>startElement</Heading>
		<Description><![CDATA[
           <div class="h2section" id="startElement">
			<P>The document event handler receives notification of the start of an element. This method
			 is invoked at the start of every element, even if the element is empty.</P>
			<p>Syntax: (eventHandler.startElement name attlist)</p>
			<TABLE CELLSPACING=0 BORDER=0 cellpadding=2 >
			<TR VALIGN="TOP"><TD>
			<B>name</B></TD>
			<TD>
			<P>The tag name of the element.</TD>
			</TR>
			<TR VALIGN="TOP"><TD>
			<B>attlist</B></TD>
			<TD>
			<P>The attribute list Structure, or #void if there are no attributes.</TD>
			</TR>
			<TR VALIGN="TOP"><TD>
			<B>Returns</B></TD>
			<TD>
			<P>True if there were no errors; otherwise, an error.</TD>
			</TR>
			</TABLE>
			<H3>Example1</H3>
			<p class="code"> XML Input:<br>
			 &lt;Name/&gt; </p>
			<p><b>Event Chain: </b></p>
			<p class="code"> (eventHandler.startElement &quot;Name&quot; #void)<br>
			(eventHandler.endElement &quot;Name&quot;)</p>
			<P>Note: The endElement event notifies the document event handler that the current 
			element parse is ending. </P>
			<H3>Example2</H3>
			<p class="code"> XML Input: &lt;Name&gt;John&lt;/Name&gt;</p>
			<p><b>Event Chain: </b></p>
			<p class="code"> (eventHandler.startElement &quot;Name&quot; #void)<br>
			(eventHandler.characters &quot;John&quot;)<br>
			(eventHandler.endElement &quot;Name&quot;)</p>
			<P>Note: The startElement event notifies the document event handler that a new element
			 parse is starting. </P>
			<H3>Example3</H3>
			<p class="code"> XML Input: &lt;Name firstonly=&quot;yes&quot;&gt;John&lt;/Name&gt;</p>
			<p><b>Event Chain: </b></p>
			<p class="code"> (eventHandler.startElement &quot;Name&quot; #{firstonly: &quot;yes&quot;})<br>
			(eventHandler.characters &quot;John&quot;)<br>
			(eventHandler.endElement &quot;Name&quot;)</p>
			<P>Note: The startElement event notifies the document event handler that a new element parse is starting. </P>
			</div>
	    ]]></Description>
	</Section>    
</Essay>
