<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE Function SYSTEM "../DTD/Function.dtd">
<Function>
	<KnowledgeBase>
        <Title>exportTab</Title>
		<FunctionName>exportTab </FunctionName>
		<FunctionType>Builtin</FunctionType>
        <ArgumentTypes>ObjectRepository Text Lambda String Vector Structure Dictionary Boolean Integer</ArgumentTypes>        
        <DataType> ObjectRepository Lambda</DataType>
	    <RelatedFunctions>importTab</RelatedFunctions>
        <RelatedVMInstructions> none </RelatedVMInstructions>
		<HumanKeywords>file text export format</HumanKeywords>
	</KnowledgeBase>
         <Description><![CDATA[ 
             <p> The <b>exportTab</b> function exports or converts data into formats for non-Analytic Information Server applications.  </p>
          ]]></Description>
	<Brief>
	   <Overview><![CDATA[
		<p>The <b>exportTab</b> function with its Lambda argument provides powerful programmable export functionality. The 
		Lambda performs any necessary editing, and may be programmed to generate any header or trailer records that may be 
		necessary. The <b>exportTab</b> function natively generates text records to a specified file. Each record is 
		separated by a line terminator <b>eol</b> (end-of line) character that applicable to the operating system. </p>  
		<p> By specifying the <b>recordsOnly:</b> argument, the Lambda of <b>exportTab</b> function supplies the data to 
		be exported as a single record. By specifying the <b>recordVectors:</b> option, the Lambda will pass data to the 
		<b>exportTab</b> function as a collection of records saved in an aggregate container such as a Vector, Structure 
		or Dictionary.  </p>
        ]]></Overview>
        <Usage><![CDATA[
        <p>The <b>exportTab</b> function is typically used to export or convert data into formats for non-Analytic Information 
        Server applications. The native <b>exportTab</b> makes no assumptions of the format of the foreign data (it may 
        have header records or not, it may have trailer records or not, the output fields may be tab-delimited, or comma-delimited, 
        or have no fields at all). The Lambda specified as the anLambda argument is the Lambda handles the formatting and 
        editing details and passes the record to <b>exportTab</b>. The <b>exportTab</b> function receives the pre-formatted 
        text record and simply writes it out to a file. In order for the <b>exportTab</b> function to work properly, the 
        <b>anLambda</b> argument is required to have a child Lambda named <b>refExport(row):</b>. 
		</p>  
		<h2>refExport ChildLambda</h2>   
		<table> 
		<tr> 
		  <td> <b>refExport(row)</b> </td> 
		  <td>  Called by exportTab function to request a record or vector from an Lambda. The refExport method receives a 
		  row argument and must return one of the following containers, String, Vector, Structure or Dictionary. If the 
		  container is a Vector, Structure or Dictionary, exportTab will format each item as tab-delimited text fields 
		  in a record and then write out the record to the file. The refExport method is required to return a Boolean 
		  value of false to indicate that no more records are to be exported.   </td>		
		</tr>
		</table>          
		<p> The result file from the <b>exportTab</b> function is a text file. The optional argument, <b>recordVectors:</b>, 
		is useful when the desired result file consists of records consisting of tab-delimited fields. When <b>recordVectors:</b>
		 is specified, the Lambda will pass an aggregate data container such as a Vector, Structure, or Dictionary to the 
		 <b>exportTab</b> function. The <b>exportTab</b> function will extract each item from the Vector, Structure, or 
		 Dictionary and convert each item into text and enter it in a record, separating each data item with a #\tab 
		 character. The second optional argument, recordsOnly, requires that the Lambda perform the formatting and text 
		 conversion. If <b>recordsOnly</b> is specified, the exportTab function will call the Lambda's refExport and will 
		 expect a single text record and will simply write out the record. </p>		
        ]]></Usage>
    </Brief>
    <Syntax>
	    <Expression><![CDATA[<p>(exportTab fileid anLambda) </p>
	                <p>(exportTab fileid anLambda recordsOnly:) </p>
	                <p> (exportTab fileid anLambda recordVectors:) </p>]]></Expression>
		<Argument> 
		  <Name>fileid</Name>
		  <Note><![CDATA[
		  <p>A file identifier previously obtained from a call to fileopen for an Lambda tab delimited file. </p>
          ]]></Note>
		  <AISTypes>Text</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>anLambda</Name>
		  <Note><![CDATA[
		  <p>Mandatory Lambda. The anLambda Lambda is called by the exportTab function to request a record or vector from 
		  an Lambda. The anLambda Lambda must have a child Lambda named refExport. The refExport method receives a row 
		  argument and must return one of the following containers, String, Vector, Structure or Dictionary. If the 
		  container is a Vector, Structure or Dictionary, exportTab will format each item as tab-delimited text fields 
		  in a record and then write out the record to the file. The refExport method is required to return a Boolean 
		  value of false to indicate that no more records are to be exported.  </p>
          ]]></Note>
		  <AISTypes>Lambda</AISTypes>
		</Argument>                 
		<Argument> 
		  <Name>recordsOnly:</Name>
		  <Note><![CDATA[
		  <p>Optional argument.. If present, the exportTab function sends the Lambda a record that is delimited by the 
		  system end-of-line (eol) character. Note: In the Intel-base platforms, the standard record terminator is 
		  carriage-return, line-feed (CR)(LF). 68000-based platforms (such as the Mac OS) use a single eol character: 
		  (CR).</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>   
		<Argument> 
		  <Name>recordVectors:</Name>
		  <Note><![CDATA[
		  <p>Optional argument. If present, the exportTab function sends the Lambda a Vector or other aggregate container. 
		  The individual elements of the vector are converted to text and each text fields is separated by the #\tab (tab) 
		   character. </p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>    
		<Return><![CDATA[ 
	    <p>The number of rows exported.
        </p>
	    ]]></Return>   
	</Syntax>
</Function>
