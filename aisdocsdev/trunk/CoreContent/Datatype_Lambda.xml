<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE Datatype SYSTEM "../DTD/Datatype.dtd">
<Datatype>
	<KnowledgeBase>
        <Title>Lambda</Title>
		<Type>Object</Type>
		<RelatedTypes> Function</RelatedTypes>
		<HumanKeywords>Lambda </HumanKeywords>
	</KnowledgeBase>
	<Section>                
	    <Heading>Lambda Overview</Heading>
		<Description><![CDATA[
		 <p class=MsoBodyText>Each Lambda is an executable software object which is storable as a fundamental 
		 unit of data in an AIS repository.  The Lambda Object data type can be mobile between copies of Analytic Information Server across the 
		 Internet. </p>   		   
        ]]></Description>
    </Section>
	<Section>                
	    <Heading>Lambda Declaration</Heading>
		<Description><![CDATA[
          <p>The lambda function supports the creation of unbound-unnamed Lambdas. The multiple ways of declaring 
          bound-named Lambdas are as follows:</p>
          <ul>
          <li>defun</li>   
          <li>defchild</li>
          <li>defriend</li>                    
          <li>deforphan</li>   
          <li>defmethod</li> 
          <li>defmacro</li>  
          <li>defvm</li>      
          </ul> 
          <p> Each Lambda declaration contains the declaration of variables (including argument variables), the 
           of Lambda interfaces, and any Lambda event keywords.  </p>        
        ]]></Description>
    </Section>
    <Section>                
	    <Heading>Lambda Properties</Heading>
		<Description><![CDATA[
          <p>An Lambda is a First Class Object. A First Class object in Analytic Information Server is any object that is fully 
          exposed, i.e., all of the Structures are visible and modifiable by the other Lambdas in the system. All Lambdas 
          have the following data structure elements: source code <b>(Sc)</b>, pseudo code instructions <b>(Pc)</b>, 
          argument variables <b>(Av)</b>, self object variables <b>(Sv)</b>, persistent variables <b>(Pv)</b>, 
          persistent class variables <b>(Cv)</b>, register variables <b>(Rv)</b>, temporary variables <b>(Tv)</b>, 
          interfaces <b>(In)</b>, native code <b>(Nc)</b>, and the virtual machine emulator <b>(Vm)</b>. 
          All Lambda structures can viewed and modified by the programmer.</p>
        ]]></Description>
    </Section>
      <Section>                
	    <Heading>Object or Heap Data Type</Heading>
		<Description><![CDATA[
          <p>The <b>Lambda</b> Data Type is an example of an AIS Object Data Type. </p>
		  <p>The Analytic Information Server Object Types are stored in the <b>Heap</b> and are
          managed by the <b>Heap manager</b>. The <b>Analytic Information Server Heap manager</b> 
          supports object resizing, garbage collection, and anti-fragmentation algorithms so 
          that the user may concentrate on the analysis and modeling of data rather than on 
          memory management. Without exception, all of the <b>Object types</b> are identified 
          by an <b>object id</b>. The <b>object id</b>  identifies a block of memory, managed by 
          the <b>Analytic Information Server memory manager</b>, in which the Object's data is stored.</p>
          <p>The Analytic Information Server Heap Object and Native Data types can be saved and 
          loaded to and from persistent (disk file) storage at any time. Words with immediate 
          data are saved on disk in fixed length records equal to the size of the Word. Words 
          with Heap object references are saved in fixed length records, which are automatically 
          expanded to include the contents of the Heap object, and any objects referenced by 
          the Heap object, etc. This feature is called <b>Object Closure Management</b> and is 
          automatic with every Analytic Information Server database save.</p>
	      <p>Analytic Information Server Words may be loaded from any database repository record at 
          any time. If the data in the record is immediate, the database load fills the Word with 
          the immediate data. If the data in the record is an <b>object closure</b>, the database
          load fills the Word with a <b>Heap object reference</b>, and all of the objects in the 
          record are loaded back into the <b>Heap</b>  with the same referential relationships 
          they had when they were saved in the repository.</p>   
        ]]></Description>
    </Section>
</Datatype>
