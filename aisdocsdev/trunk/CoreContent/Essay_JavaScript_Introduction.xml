<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE Essay SYSTEM "../DTD/Essay.dtd">
<Essay>
	<KnowledgeBase>
	    <Title>JavaScript Introduction</Title>
		<Topic>JavaScript</Topic>
		<SubTopic>Overview</SubTopic>
		<HumanKeywords>JavaScript Programming Artificial-Intelligence</HumanKeywords>
	</KnowledgeBase>
	<Section>
	    <Heading>Introduction</Heading>
		<Description><![CDATA[
             <div class="h2section" id="Introduction">	
		    <p>JavaScript was developed by Netscape as a means to bring the simplicity
		    of scripting languages to a wider audience. The main difference between Java
		    and JavaScript, is that Java code is compiled into &quot;applets&quot; that
		    are distinct from the HTML page and whose code cannot be viewed directly,
		    whereas JavaScript code is included directly in the HTML document and can be
		    easily modified.</p>
		    <p>JavaScript is a scripting language designed to extend the functionality
		    of web pages. Typically written as part of an HTML document, a JavaScript
		    controls the elements of the page and reacts to user actions.</p>
		    <p>The generic JavaScript language is distinguished from the <b>javaScript</b>
		    language by an uppercase letter &quot;J&quot;. The<b> javaScript </b>language<b>
		    </b>is<b> </b>a proprietary javaScript compiler generated by <b>parseLib</b>.
		    The <b>javaScript</b> compiler Lambda converts javaScript source code into an
		    Analytic Information Server parse tree which is the input to the <b>morph</b>
		    and <b>compile</b> functions. The <b>compile</b> function finally produces
		    an Lambda ready execute.</p>
		    <p>Thus, the <b>javaScript </b>language<b> </b>is an easy to use alternative
		    tool that web programmers may find more easy to use than Lisp. The
		    javaScript language extends the power of Lambda Oriented programming to a
		    wider audience.</p>
		    <p>javaScript includes a number of language commands for creating datamine
		    tables, filtering tables, and scoring tables. It was developed, for the
		    dataMineLib, as a means to bring the full power and simplicity of
		    scripting languages to the data mining process.</p>
		    <p>Thus, the <b>Filter Extensions</b> is an easy to use alternative tool
		    that dataMineLib programmers may find more easy to use than the data mine
		    Lambda?s API. These language extensions bring the power of scripting
		    languages to the data mining process.</p>
             </div>
	    ]]></Description>
	</Section>
	<Section>
	    <Heading>Invoking javaScript from Lisp</Heading>
		<Description><![CDATA[
             <div class="h2section" id="Invoking javaScript from Lisp">
		    <p>The <b>javaScript</b> compiler Lambda can be called from the Lisp parser, <b>lisp</b>,
		    by using the <b>#javaScript#</b> compiler directive, or it can be called
		    directly. If called directly, it should be followed by morph and compile
		    (see the lisp parser - javaScript is a replacement for the lisp parser). The
		    <b>javaScript</b> Lambda was generated by the parseLib Lambda.</p>
		    <b>Note</b>: The javaScript Lambda must be loaded into the workspace prior to
		    using the javaScript language. (see the javaScript library and the Dynamic
		    HTML example).
            </div>
	    ]]></Description>
	</Section>
	<Section>
	    <Heading>Invoking javaScript from the Console</Heading>
		<Description><![CDATA[
            <div class="h2section" id="Invoking javaScript from the Console">
			<p>The LambdaClient IDE contains a Console tab. Clicking the right mouse
		    button, and selecting the &quot;Set Prefix&quot; option displays a modal
		    dialog containing an edit box for the user to enter a Console prefix. The
		    Console prefix controls which parser is invoked when the console receives
		    any text to be evaluated. The valid prefixes are: &quot;&quot; (a null
		    string), &quot;<b>#lisp#&quot;,</b> and <b>&quot;#javaScript#&quot;</b>. If
		    the Console prefix is a null string or <b>#lisp#,</b> then any expressions
		    submitted for evaluation will be parsed with the Lisp parser. If the Console
		    prefix is <b>&quot;#javaScript#&quot;</b>, the JavaScript parser will be
		    invoked.</p>
            </div>
	    ]]></Description>
	</Section>
	<Section>
	    <Heading>Lambda Objects</Heading>
		<Description><![CDATA[
           <div class="h2section" id="Lambda Objects;">
			<p>The LambdaClient development uses an Lambda-oriented metaphor. <b>javaScript</b>
		    &quot;Lambdas&quot; are a unique class of objects designed to act as the <b><u>building
		    blocks</u></b><u></u> for intelligent, adaptive, systems. Lambdas contain
		    more than just binary machine code (Analytic Information Server supports many
		    built-in functions, which are primarily binary machine code, but these are
		    not Lambdas). Lambdas are something more than just functions. Lambdas are
		    building block objects, which contain the necessary structure to provide
		    some rudimentary autonomy. Lambdas can contain other child Lambdas and can
		    give birth to other child Lambdas. Lambdas can publish their preferred style
		    of interface. Lambdas have an abstract threshold (like a cell membrane) which
		    makes the Lambda aware of any mutative or referential access attempt from the
		    outside. Lambdas may run on native machine code or they may be emulated by a
		    virtual machine. There may be a different virtual machine for each Lambda.
		    Lambdas contain their persistent and temporary knowledge variables. Lambdas
		    contain the original source code used to compile them. Lambdas can be
		    generated from multiple languages. Analytic Information Server comes with a
		    built-in Lisp compiler, which produces Lambdas.</p>
           </div>
	    ]]></Description>
	</Section>
	<Section>
	    <Heading>Lambda Properties</Heading>
		<Description><![CDATA[
            <div class="h2section" id="Lambda Properties">
			<p>The Lambda object stores Lambda behavior and knowledge in a standard
		    building block format (regardless of the original source language). The
		    Analytic Information Server Lambda object contains the following eight
		    properties:</p>
		    <table class=members_table border="3" cellpadding="2" >
			<colgroup><col class="member"><col class="description"></colgroup>
		      <tr>
		        <td>Av:</td>
		        <td>
		          <p>The arguments Structure object containing the Lambda's arguments.<br><br></p>
		        </td>
		      </tr>
		      <tr">
		        <td>In:</td>
		        <td>
		          <p>The <b>faces</b>: Structure object containing the Lambda's published
		          interface styles.</p>
		        </td>
		      </tr>
		      <tr>
		        <td>Pc:</td>
		        <td>
		          <p>The Pcode Vector object containing the Lambda's virtual machine
		          codes.</p>
		        </td>
		      </tr>
		      <tr>
		        <td>Pv:</td>
		        <td>
		          <p>The <b>pvars</b>: Structure object containing the Lambda's
		          persistent variables.</p>
		        </td>
		      </tr>
		      <tr>
		        <td>Cv:</td>
		        <td>
		          <p>The <b>cvars</b>: Structure object containing the Lambda's
		          persistent class variables</p>
		        </td>
		      </tr>
		      <tr>
		        <td>Nc:</td>
		        <td>
		          <p>The Native Code Vector object containing the Lambda's native machine
		          code.</p>
		        </td>
		      </tr>
		      <tr>
		        <td>Sc:</td>
		        <td>
		          <p>The Source Code Vector containing the original language source for
		          debugger display.</p>
		        </td>
		      </tr>
		      <tr>
		        <td>Tv:</td>
		        <td>
		          <p>The <b>vars</b>: Structure object containing the Lambda's temporary
		          frame variables.</p>
		        </td>
		      </tr>
		      <tr>
		        <td>Vm:</td>
		        <td>
		          <p>The Virtual Machine emulator function (each Lambda may run on a
		          separate virtual machine).</p>
		        </td>
		      </tr>
		    </table>
		    <p>&nbsp;</p>
		    <p>An Lambda is <i>First Class Object</i>. A First Class object in Lambda
		    Information Server is any object that is fully exposed, i.e., all of the
		    Structures are visible and modifiable by the programmer. All Lambdas have the
		    following data structures: source code tokens (<b>Sc</b>), pcode tokens (<b>Pc</b>),
		    argument variables (<b>Av</b>), persistent variables (<b>Pv</b>)<b>, </b>persistent
		    class variables (<b>Cv</b>)<b>, </b>temporary variables (<b>Tv</b>),
		    interfaces (<b>In</b>), native code (<b>Nc</b>), and the virtual machine
		    emulator (<b>Vm</b>). All Lambda structures can viewed and modified by the
		    programmer:</p>
             </div>
	    ]]></Description>
	</Section>
	<Section>
	    <Heading>javaScript Filter Lambdas</Heading>
		<Description><![CDATA[
            <div class="h2section" id="JavaScript Filter Lambdas">
			<p>The principal activity of the datamine is to reduce tables to smaller
		    tables which have a higher <i>score</i> than the original table. This
		    process is called filtering. For instance, in the stock market, we start
		    with a table of all possible stocks and we wish to select a few stocks to
		    purchase. If the few stocks we purchase have a higher <i>score</i> (percent
		    profit) than the average of all stocks, then we are happy. The act of
		    selecting a few stocks to purchase reduces the original table of all stocks
		    down to the table of those we wish to purchase. This process is called
		    filtering.</p>
		    <p>Other examples of filtering include reviewing a table of all United
		    States households to select only those households which are to receive this
		    month's promotional mailing. Reviewing a table of possible oil deposit sites
		    to select only those sites where we wish to drill. There are many other
		    examples of filtering.</p>
		    <p>The <i>score</i> of a table is determined by the Score Lambda (see the <b>Score
		    Lambdas</b> section next).</p>
		    <p>All datamine table filtering is performed by Filter Lambdas, which are
		    entered by the user in the simple, easy to learn datamine javaFilter
		    language. An example might be:</p>
		    <blockquote>
		      <pre>filter top LastMonthProfit 10%;</pre>
		    </blockquote>
		    <p>or</p>
		    <blockquote>
		      <pre>filter all Timeliness = 1;</pre>
		    </blockquote>
           </div>
	    ]]></Description>
	</Section>
	<Section>
	    <Heading>javaScript Score Lambdas</Heading>
		<Description><![CDATA[
             <div class="h2section" id="javaScript Score Lambdas">
			<p>If the principal activity of the datamine is to reduce tables to smaller
		    tables which have a higher <i>score</i> than the original table, then there
		    must be some means of determining a table?s score. All datamine table
		    scoring is performed by Score Lambdas, which are entered by the user in the
		    simple, easy to learn datamine javaFilter language. An example might be:</p>
		    <blockquote>
		      <pre>score avg NextMonthProfit;</pre>
		    </blockquote>
		    <p>or</p>
		    <blockquote>
		      <pre>score sum ItemPrice * TotalItems;</pre>
		    </blockquote>
           </div>
	    ]]></Description>
	</Section>
	<Section>
	    <Heading>JavaScript Data Types</Heading>
		<Description><![CDATA[
            <div class="h2section" id="JavaScript Data Types">
		   <p>The <b>javaScript</b> Programmer has access to all of the types in the
		    Analytic Information Server environment. These are the same as the Lisp data
		    types. The Lisp data types are divided into three categories: Native Data
		    Types (also known as Immediate types), Objects (heap objects) and
		    Repositories. The Native (immediate) types can be entirely contained within
		    the immediate data of a single Virtual Machine Container. The Objects (heap
		    objects) types are too large to be contained within a single Virtual Machine
		    Container and require extra memory must be managed by the heap manager.
		    Without exception, all of the Object types are identified by an object id.
		    The object id identifies a block of memory, managed by the Analytic Information
		    Server memory manager, in which the Object's data is stored. (see Object
		    Identifier Notation).</p>
		    <p>Virtual Machine Containers are of fixed length and come in different
		    sizes. Small data items are stored in immediate mode, and may be moved to
		    the heap if the data becomes too large to store immediately.</p>
		    <p>The Heap contains memory resident data, which is of variable length or is
		    too large to fit in small fixed containers. The Analytic Information Server
		    object Heap manager supports automated object resizing, garbage collection,
		    and anti-fragmentation algorithms so that the user may concentrate on the
		    analysis and modeling of data rather than on memory management.</p>
		    <p>Repositories (databases) contain persistent data of all sorts. Lambda
		    Information Server supports repositories with multiple database volumes and
		    multiple database schema's including General Object Repositories, Text
		    Repositories, and Lambda Repositories.</p>
		    <p>The generic Analytic Information Server data type is known to javaScript as <b>obj</b>.
		    No type identification, such as <i>var n;</i>, will cause javaScript to
		    treat the variable, <i>n</i>, as being of type <b>obj</b>, that is to say
		    any possible Analytic Information Server data type.</p>
		    <p>The javaScript compiler also supports strong typing of declared variables
		    <b>obj</b>. Providing a type identification, such as <i>var int n;</i>, will
		    cause javaScript to treat the variable, <i>n</i>, as being of type <b>int</b>,
		    that is to say it will be managed as an Analytic Information Server type <b>Integer</b>.</p>
		    <p>The following is a list of javaScript strong data types together with the
		    Analytic Information Server types which they represent.</p>
		    <table border="3" cellpadding="2" width="100%" bgcolor="#99CCCC">
			<colgroup><col><col class="italic"><col><col class="italic"></colgroup>
		      <tr align="top">
		        <th>obj</th>
		        <td>Object</td>
		        <th>bool</th>
		        <td>Boolean</td>
		        <th>char</th>
		        <td>Character</td>
		        <th>int</th>
		        <td>Integer</td>
		        <th>float</th>
		        <td>Number</td>
		      </tr>
		      <tr align="top">
		        <th>text</th>
		        <td>Text</td>
		        <th>string</th>
		        <td>String</td>
		        <th>symbol</th>
		        <td>Symbol</td>
		        <th>bytvec</th>
		        <td>ByteVector</td>
		        <th>fltvec</th>
		        <td>FloatVector</td>
		      </tr>
		      <tr align="top">
		        <th>stc</th>
		        <td>Structure</td>
		        <th>dir</th>
		        <td>Directory</td>
		        <th>dic</th>
		        <td>Dictionary</td>
		        <th>matrix</th>
		        <td>Matrix</td>
		        <th>nummat</th>
		        <td>NumMatrix</td>
		      </tr>
		      <tr align="top">
		        <th>vec</th>
		        <td>Vector</td>
		        <th>bitvec</th>
		        <td>BitVector</td>
		        <th>numvec</th>
		        <td>NumVector</td>
		        <th>intvec</th>
		        <td>IntVector</td>
		        <th>objvec</th>
		        <td>ObjVector</td>
		      </tr>
		    </table>
         </div>
	    ]]></Description>
	</Section>
	<Section>
	    <Heading>Strong Typing</Heading>
		<Description><![CDATA[
            <div class="h2section" id="Strong Typing">
			<p>The <b>javaScript</b> Programmer has access to compile time strong typing
		    variable declarations. Strongly typed variables are compiled with Lambda
		    Information Server's strong typed virtual machine instructions. Strongly
		    typed variables operate faster, at run time; but, are more prone to
		    programmer error as there is little or no run time type checking performed.</p>
		    <p>The programmer can even cast an arbitrary javaScript expression to a
		    valid type. The casting will alert the javaScript compiler to treat the
		    result of the cast expression as specified. This will direct the javaScript
		    compiler to use Analytic Information Server's strong typed virtual machine
		    instructions with the cast expression. Warning: casting does not introduce
		    any run time type checking.</p>
		    <p>The following javaScript code sample illustrates the actions of the
		    javaScript compiler when strong typing variable declarations and type casts
		    are encounteres.</p>
		    <p><b>The javaScript source code for foo</b></p>
		    <blockquote>
			  <pre>
		      // A test of strong typing, including expression type casting, in javaScript.
		      function foo(int i) {
		      var char c1, string name=new('String',&quot;Hello There&quot;);
		      c1 +=name[((int)length(name))-i];
		      }</pre>
		    </blockquote>
		    <p><b>The compiled code for foo</b></p>
		    <table border="3" cellpadding="2">
		      <tr>
		        <td><u>Virtual Machine Instructions for</u>: <b>foo</b></td>
		      </tr>
		      <tr>
		        <td>0000: push &quot;String,&quot;Hello There&quot;</td>
		      </tr>
		      <tr>
		        <td>0007: call 2,new,vars:(name)</td>
		      </tr>
		      <tr>
		        <td>0011: push vars:(name)</td>
		      </tr>
		      <tr>
		        <td>0013: call 1,length,vars:(__T4)</td>
		      </tr>
		      <tr>
		        <td>0017: isub args:(i),vars:(__T4),vars:(__T3)</td>
		      </tr>
		      <tr>
		        <td>0021: refstring vars:(__T3),vars:(name),vars:(__T2)</td>
		      </tr>
		      <tr>
		        <td>0025: cadd vars:(__T2),vars:(c1),vars:(c1)</td>
		      </tr>
		      <tr>
		        <td>0029: return vars:(c1)</td>
		      </tr>
		    </table>
            </div>
	    ]]></Description>
	</Section>
	<Section>
	    <Heading>White Space</Heading>
		<Description><![CDATA[
             <div class="h2section" id="White Space">
			<p>The javaScript compiler uses white space to separate each of its symbols
		    and operators. The javaScript white space characters include all the
		    standard 8-bit ASCII control characters (less than 32 decimal), and the
		    blank character (32 decimal).</p>
		    <b>LF, CR, TAB</b> ..control chars..
		    <p>space</p>
		    <p>The javaScript compiler ignores whitespace</p>
		    <blockquote>
		      <pre>a = 1 + 2;  // This is a valid statement
		       b=1+2;  // This is also a valid statement</pre>
		    </blockquote>
            </div>
	    ]]></Description>
	</Section>
	<Section>
	    <Heading>Special Characters</Heading>
		<Description><![CDATA[
           <div class="h2section" id="Special Characters">
			<p>javaScript uses the standard 8-bit ASCII character set. Some of the
		    javaScript special characters serve to group a set of characters as a single
		    unit (e.g. double quotes group characters to form a string constant). The
		    remainder of the special characters serve to separate tokens (e.g. comma or
		    blank) or prefix a constant (e.g. $ # ).</p>
		    <p>The following are the javaScript special characters.</p>
		    <table border="3" cellpadding="2" width="50%" style="font-weight: bold" >
		      <tr align="top">
		        <td>\</td>
		        <td>|</td>
		        <td>(</td>
		        <td>)</td>
		        <td>[</td>
		        <td>]</td>
		        <td>{</td>
		        <td>}</td>
		        <td>#</td>
		        <td>@</td>
		      </tr>
		      <tr align="top">
		        <td>'</td>
		        <td>'</td>
		        <td>,</td>
		        <td>&quot;</td>
		        <td>:</td>
		        <td>;</td>
		        <td>$</td>
		        <td>%</td>
		        <td>.</td>
		        <td>&nbsp;</td>
		      </tr>   
		      </table>
            </div>
	    ]]></Description>
	</Section>
	<Section>
	    <Heading>Naming Conventions for Variables</Heading>
		<Description><![CDATA[
             <div class="h2section" id="Naming Conventions for Variables">
			<p>javaScript variable names are composed of case-sensitive alphanumeric
		    characters. No spaces are allowed in a variable name but the underscore (_)
		    character may be embedded to separate multi-word names . Another convention
		    to make multiple word names more readable its to use start the first word
		    with a lowercase letter and begin the first letter of each succeeding word
		    with an uppercase letter.</p>
		    <p>For example</p>
		    <blockquote>
		      <pre>myVariable
		
		sum
		
		namesOfStudents</pre>
		     </blockquote>
		  </div>
	    ]]></Description>
	</Section>
	<Section>
	    <Heading>Constants</Heading>
		<Description><![CDATA[
		     <div class="h2section" id="Constants">
			<p>javaScript is a dynamically typed language. The type of a variable is
		    unknown until runtime when data is stored into it. The follow table contains
		    the constant forms recognized by the javaScript compiler. For more detail on
		    the data types listed below, see <b>Analytic Information Server Programmer's
		    Guide.</b></p>
		    <table border="3" cellpadding="2" width="50%">
		      <tr align="top">
		        <td><b>Type</b></td>
		        <td><b>Constant Form</b></td>
		      </tr>
		      <tr align="top">
		        <td><b>Void</b></td>
		        <td><b>void</b> or <b>nil</b></td>
		      </tr>
		      <tr align="top">
		        <td><b>Boolean</b></td>
		        <td><b>true</b> or <b>false</b></td>
		      </tr>
		      <tr align="top">
		        <td><b>Date</b></td>
		        <td><b>#Mar,2,1987</b> or <b>#Jun,1,200BC</b></td>
		      </tr>
		      <tr align="top">
		        <td><b>Integer</b></td>
		        <td><b>12 </b>or<b> -2345</b></td>
		      </tr>
		      <tr align="top">
		        <td><b>Number</b></td>
		        <td><b>12.9 </b>or<b> 0.123456</b></td>
		      </tr>
		      <tr align="top">
		        <td><b>Object</b></td>
		        <td><b>#&lt;Vector 1273&gt;</b></td>
		      </tr>
		      <tr align="top">
		        <td><b>String</b></td>
		        <td><b>&quot;Hello World&quot;</b></td>
		      </tr>
		      <tr align="top">
		        <td><b>Symbol</b></td>
		        <td><b>'Hello'</b></td>
		      </tr>
		    </table>
		  </div>
	    ]]></Description>
	</Section>
	<Section>
	    <Heading>Comments</Heading>
		<Description><![CDATA[
             <div class="h2section" id="Comments">
			<p>Because the javaScript compiler tries to evaluate all of the words in a
		    script, it is useful to have text, which is to be ignored by the compiler.
		    This ignored text, called a comment, allows you to include information,
		    which may be useful to understanding the javaScript statements. There are
		    two types of comments: single line and multi-line.</p>
		    <p>A single line comment tells the compiler to ignore all the characters up
		    to the end-of-line (eol). A single line comment must begin with the
		    characters: //</p>
		    <p>For Example:</p>
		    <blockquote>
		      <pre>// This is a comment</pre>
		    </blockquote>
		    <p>A multi-line comment tells the compiler to ignore all the characters
		    embedded in between the delimiters: <b>/*</b> and */</p>
		    <p>For Example:</p>
		    <blockquote>
		      <pre>/*  Humpty Dumpty 
		
		            sat on a wall  */</pre>
		    </blockquote>
            </div>
	    ]]></Description>
	</Section>
	<Section>
	    <Heading>Global Variables</Heading>
		<Description><![CDATA[
             <div class="h2section" id="Global Variables">
			<p>javaScript variables have automatic global declaration. Referencing a
		    symbol, which has not already been declared, automatically causes it to be
		    declared as a global variable. This feature has been added to make
		    javaScript user-friendlier and to make javaScript consistent with other
		    Analytic Information Server languages.</p>
		    <p>The following javaScript expressions are equivalent (The assumption is
		    made that X has not already been referenced).</p>
		    <blockquote>
		      <pre>X = 23</pre>
		    </blockquote>
		    <p>is equivalent to:</p>
		    <blockquote>
		      <pre>var X = 23</pre>
		    </blockquote>
		    <p>javaScript global variables are valid during the whole life of the
		    current workspace (see the <b>_globals</b> global symbol table variable).
		    javaScript global variables are referenced by specifying the symbol. In
		    addition to user defined globals, javaScript global variables include all of
		    the built-in functions such as <b>+ - * upperCase, sin, cos, date, etc.</b></p>
		    <p>The Analytic Information Server javaScript dialect is specified as
		    case-sensitive (most dialects of javaScript are case-insensitive). Therefore</p>
		    <blockquote>
		      <pre>Var</pre>
		    </blockquote>
		    <p>is NOT equivalent to:</p>
		    <blockquote>
		      <pre>var</pre>
		    </blockquote>
            </div>
	    ]]></Description>
	</Section>
	<Section>
	    <Heading>Function Calls</Heading>
		<Description><![CDATA[
           <div class="h2section" id="Function Calls">
			<p>Any user-defined javaScript Lambda, and Lisp Lambda, and any Lambda
		    Information Server function may be called from javaScript. The syntax is
		    simple the function name followed by parenthesis, (). If the function
		    requires arguments, they must be supplied in between the parenthesis and
		    multiple arguments should be separated by a comma. The parenthesis are
		    mandatory even if no arguments are supplied. All javaScript functions
		    receive arguments by value. After function invocation, one and only one
		    result value is returned.</p>
		    <p>For example</p>
		    <blockquote>
		      <pre>mod(10, 2); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Returns 0
		
		            today();            //Returns 729855</pre>
		    </blockquote>
            </div>
	    ]]></Description>
	</Section>
</Essay>
