<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE VMInstruction SYSTEM "../DTD/VMInstruction.dtd">
<VMInstruction>
	<KnowledgeBase>
	    <Title>vmvecPush</Title>
		<InstructionName>vmvecPush</InstructionName>
		<InstructionType>Vector</InstructionType>
		<ArgumentTypes>Integer Number Double Float</ArgumentTypes>
		<RelatedVMInstructions>vmvecPop vmvecPopNumber vmvecPushNumber</RelatedVMInstructions>
		<HumanKeywords>vector pop push number</HumanKeywords>
	</KnowledgeBase>
	<Description><![CDATA[
		<p>When evaluated, this vm instruction increments the stack pointer 
		and loads the top word of the internal Vector Processing Stack, 
		specified by the <b>type</b> argument, from the location, specified by 
		the <b>origin</b> argument. The top stack word is loaded, from the 
		origin, as the data type specified by the type argument. There are no 
		conversions made between different types. The initial values in the 
		three pointer registers, the three increment registers, and the counter 
		register are NOT altered by this instruction. This instruction may 
		return an Error value. After the operation, the Instruction Pointer 
		is promoted. The operation of this vm instruction is expressed in the 
		following C expression:
	    </p>
        <ul><li> <b>   (type)ST[++top] = *((type*)origin); </b></li></ul>
        <p>
         The possible values of the <b>type</b> argument are <u>any immediate integer value</u>, 
         indicating the data type, or any one of the following symbolic data types:
        </p>  
         <li>Float: [NumStack Only] <i>(The top stack word is stored as a 32 bit IEEE floating point at the destination.)  </i></li>  
         <li>Number: [NumStack Only]<i>(The top stack word is stored as a 64 bit IEEE floating point at the destination.) </i></li>
        <p>
        The possible values of the <b>destination</b> argument are <u>any immediate integer value</u>, 
        indicating the origin, or any one of the following symbolic data types:
        </p>
        <ul><li>argument:{0}<i> (The top stack word is loaded, as the specified data type, from the Internal Vector argument Pointer Register origin.) </i></li>  
         <li>source:  {1}<i> ((The top stack word is loaded, as the specified data type, from the Internal Vector source Pointer Register origin.) </i></li>   
         <li>target:  {2}<i> (The top stack word is loaded, as the specified data type, from the Internal Vector target Pointer Register origin.) </i></li>  
         <li>dup:     {3}<i>(The top stack word is dropped.) </i></li>               
         <li>mone:    {4}<i>(The top stack word is loaded with minus one.)  </i></li>                
         <li>one:     {5}<i> (The top stack word is loaded with one.)  </i></li>     
         <li>zero:    {6}<i>(The top stack word is loaded with zero.)  </i></li></ul>               
    ]]></Description>
	<Syntax>
	    <Expression><![CDATA[(vmvecPush type origin)]]></Expression>   
	    <Argument> 
		  <Name>type</Name>
		  <Format>immediate</Format>
		  <AISTypes>integer</AISTypes>
		</Argument> 
		 <Argument> 
		  <Name>origin</Name>
		  <Format>immediate</Format>
		  <AISTypes>integer</AISTypes>   
		</Argument>
	</Syntax>
</VMInstruction>
