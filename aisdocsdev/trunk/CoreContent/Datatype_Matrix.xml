<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE Datatype SYSTEM "../DTD/Datatype.dtd">
<Datatype>
	<KnowledgeBase>
        <Title>Matrix</Title>
		<Type>Heap</Type>
		<RelatedTypes>NumMatrix</RelatedTypes>
		<HumanKeywords>Heap Vectors Element Array</HumanKeywords>
	</KnowledgeBase>
	<Section>                
	    <Heading>Matrix Overview</Heading>
		<Description><![CDATA[
          <p>A Matrix  is a one, two, or three dimensional array. An un-typed matrix (also known as a Normal Matrix) 
          is a data structure containing an arbitrary number of heterogeneous data values and with a rank of 
           one, two, or three.  </p>
             <table align="center" border=4 cellspacing=5 cellpadding=5>
               <tr><td>"Humpty"</td> </tr>
               <tr><td>"Dumpty"</td> </tr>
               <tr><td>"sat"</td> </tr>
               <tr><td>"on"</td> </tr>
               <tr><td>"a"</td> </tr>
               <tr><td>"wall"</td> </tr>
           </table>    
          <p>The <b>Matrix</b> is a dynamic data type: it can grow to containing new elements 
             or contract as elements are deleted.    An element is accessed by an index from 0 
             to n-1 where n is the number of elements in the Matrix.   When an element is added, 
             it is appended to the end.</p> 
          <table align="center" border=4 cellspacing=5 cellpadding=5>
               <tr><td>"Humpty"</td> </tr>
               <tr><td>"Dumpty"</td> </tr>
               <tr><td>"sat"</td> </tr>
               <tr><td>"on"</td> </tr>
               <tr><td>"a"</td> </tr>
               <tr><td>"wall"</td> </tr>
               <tr><td>"Humpty"</td> </tr>
           </table> 
           <p>Or we might sort the Matrix</p> 
           <table align="center" border=4 cellspacing=5 cellpadding=5>
               <tr><td>"a"</td> </tr>
               <tr><td>"Dumpty"</td> </tr>
               <tr><td>"Humpty"</td> </tr>
               <tr><td>"Humpty"</td> </tr>
               <tr><td>"on"</td> </tr>
               <tr><td>"sat"</td> </tr>
               <tr><td>"wall"</td> </tr>
           </table> 
           <p>Or we might delete a key by specify the index of the item to be deleted (2)</p> 
           <table align="center" border=4 cellspacing=5 cellpadding=5>
               <tr><td>"a"</td> </tr>
               <tr><td>"Dumpty"</td> </tr>
               <tr><td>"Humpty"</td> </tr>
               <tr><td>"on"</td> </tr>
               <tr><td>"sat"</td> </tr>
               <tr><td>"wall"</td> </tr>
           </table>
        ]]></Description>
    </Section>
	<Section>                
	    <Heading>When to Use</Heading>
		<Description><![CDATA[
          <p>The <b>Matrix</b> object is useful for storing data of the  "same" types 
            (homogeneous) or  "different" types (heterogeneous) . The Matrix object is very fast 
            and has minimum memory overhead due to the indexed access of its values.  If you 
            require a random access strategy or a keyed access strategy see the Dictionary or 
            Structure data types. Within the Matrix object type there are the subtypes that store
            homogeneous values:</p>
          <p><blockquote>Matrix</blockquote></p>
          <p><blockquote>NumMatrix</blockquote></p>
        ]]></Description>
    </Section>
	<Section>                
	    <Heading>Constant Form</Heading>
		<Description><![CDATA[
          <p>The <b>Matrix</b> native data type has a constant form. A Matrix constant 
          is enclosed in brackets and preceded by the sharp symbol (#).   </p>
          <p>For Example:</p>
          <p><b>#(mat| 0  1  2  3  4  5  6  7  8  9)</b></p>
          <p>The constant form for Matrix allows any Analytic Information Server objects:</p>
		  <p><b>#(mat| X:  5  #Jan,1,1996  #{Mike: "father"  Sally: "mother"}  "Hello")</b></p>
          <p><b>#(mat| 23  34  "Testing"  -.987  #\return)</b></p>
          <p><b>#(mat|  "Hello"  9  34.5)</b></p>
          <p><b>#(mat| 0  1  2  3  4  5  6  7  8  9 . {a: 10 b: 20})</b></p>
        ]]></Description>
    </Section>
	<Section>                
	    <Heading>Object Data Types</Heading>
		<Description><![CDATA[
          <p>The <b>Matrix</b> is a Heap Object or an Object Data Type. The Analytic Information Server Object Types 
            are stored in the Heap and are managed by the Heap manager.  The Analytic Information 
            Server Heap manager supports object resizing, garbage collection, and anti-fragmentation algorithms 
            so that the user may concentrate on the analysis and modeling of data rather than on
            memory management. Without exception, all of the Object types are identified by an 
            object id.  The object id identifies a block of memory, managed by the Lambda 
             Information Server memory manager, in which the Object's data is stored.</p>
         <p>The Analytic Information Server Heap Object and Native Data types can be saved and loaded to and from persistent
            (disk file) storage at any time. Containers with immediate data are saved on disk 
            in fixed length records equal to the size of the container. Containers with Heap 
            object references are saved in fixed length records, which are automatically expanded 
            to include the contents of the Heap object, and any objects referenced by the Heap 
            object, etc. This feature is called Object Closure Management and is automatic with 
            every Analytic Information Server container database save.</p>
         <p>Analytic Information Server containers may be loaded from any database repository record 
            at any time. If the data in the record is immediate, the database load fills the 
            container with the immediate data. If the data in the record is an object closure, 
            the database load fills the container with a Heap object reference, and all of the 
            objects in the record are loaded back into the Heap with the same referential 
            relationships they had when they were saved in the repository.</p>    
        ]]></Description>
    </Section>
</Datatype>
