logmgr/logmgrnotes.txt			tlwms				8/24/02

							Log Manager Notes

This project holds the log messaging class used by the Abasedev project to log a variety of
different types of messages 
In particular:                                                      
AmpLog		- Logs requests and responses submitted to the engine
ConsoleLog	- Console messages generated by the abase engine.
NcsaLog		- Logs every HTTP response by the http server using the NCSA Common Log Format
ReqHdrsLog	- Records every HTTP request header.
SysLog		- Logs system information and error messages. Monitors Lambda Internet Server (AIS)
			  activity.

OVERVIEW
--------
Almost any module can generate a log entry.  This entry may be written to a file, sent to
standard error, or returned to a GUI.  The system configuration can control which, if any,
of these outputs are used.  In addition, each of these outputs may only record messages
at or above a message warning level that is set during startup and may be modified by the
system monitoring facility.

ARCHITECTURE
------------
Just as with sessions or other allocated resources, each log could be assigned a slot and a
logID during startup.  This logID could then be passed around to identify the type of log.
Since number and type of logs does not vary over the life of an AIS incarnation, the logID
is replaced by five defined constants, whose values vary from 1 to 5, one for each type of
log mentioned above.  These defined constants are included in globals.h so that every
module has access to these defined constants.

A message may be raised by any module, such as httpsvr.  The logger calls (directly or
indirectly) the AisMgr with the generated message.  AisMgr will return this message to zero
or more clients that have opened a Server Message Window and have a warning level at or below
the warning level for this message type.  An AisReturnEvent is sent back to each
of these clients.

Any GUI with an open Server Message Window may submit a local request to modify its warning
levels.
	
DOCUMENTATION GUIDE
-------------------
 *	logmgr/logmgrnotes.txt - this project setup and configuration.
 *	include/msglog.h - message log specifications. 
 *	include/aismgr.h - routing log messages to various GUIs, setting warning levels.
 *	docs/internaldocumentation/Qt - Documents on building Qt
	projects.
 *	docs/internaldocumentation/VisualStudio - Importing Qt projects,
	general project settings, and compiler options.
 

							LOG MANAGER
PROJECT SETUP
-------------
This project was created as follows:
 1.	Start Visual Studio. Select File->New->Projects->"Win32 Static Library"
	Set project to: abasedev/sysmgr with no options checked. VS creates a
	logmgr.dsp file for you.
 2.	Insert this project into the abasedev project. Open abasedev project.
 	Rt click on abasedev in explorer window and then select insert project.
 3.	Modify project settings as noted below.  Build debug and release configurations.
		  
PROJECT NOTES
-------------
1.	See Docs/InternalDocumentation/Qt/Qmake.doc.  Includes
	notes on using Visual Studio with Qt.
2.	See Docs/InternalDocumentation/Qt/QtProcedures.doc
	for a general discussion on setting up Qt library projects.
	Includes notes on creating Qt toolbar, using Qt Designer,
	and Qt Documentation.	
3.	See Docs/InternalDocumentation/VisualStudio/VsProcedures.doc
	for a general discussion on setting up Visual Studio library
	projects.  Includes notes on standard project settings,
	importing Qt projects, and list of compiler options.	
								
PROJECT SETTINGS
----------------
Project->Settings
	General tab
		Intermediate Files: debug
		Output files:  ../bin/debug
	C/C++ tab
		General:
			WarningLevel: 3
		C++ Language:
			Enable Exception Handling
		CodeGeneration:
			Blend,DebugMultithreadedDLL,cdecl,8 bytes
		PreProcessor
			IncludeDirs:
				../include
			Definitions:
				WIN32,_DEBUG,_MBCS,_LIB,UNICODE,QT_DLL,QT_THREAD_SUPPORT
	Library tab
		OutputFile: ../bin/debug/logmgr.lib

Static Lib Debug Project Options:
/nologo /MDd /W3 /Gm /GX /Zi /Od /I "../include" /I "$(QTDIR)/Include"
/I "$(QTDIR)/mkspecs/win32-msvc" /D "WIN32" /D "_DEBUG" /D "_MBCS" /D "_LIB"
/D "UNICODE" /D "QT_DLL" /D "QT_THREAD_SUPPORT" /Fo"Debug/" /Fd"Debug/"
/FD /GZ /c

Static Lib Release Project Options:
/nologo /G5 /MT /W3 /Gx /O1 /I "D:/Qt/Include"
/I "D:/Qt/mkspecs/win32-msvc" /I "../Include" /D "WIN32"
/D "NDEBUG" /D "_MBCS" /D "_LIB" /D "QT_DLL" /D "UNICODE"
/D "QT_THREAD_SUPPORT" /Fo"Release/" /Fd"Release/" /FD /c

BUILD
-----
Compiling...
amsglog.cpp
...
Generating Code...
Creating library...

COMPILER OPTIONS
----------------
See Docs/InternalDocumentation/VisualStudio/VsProcedures.doc
for list of above compiler options.

FD - Generate file dependencies
G5 - Favor Pentium processor
Gm - Enable minimal rebuild
GX - enable synchronous exception handling
GZ - Catch release-build errors in debug
MD  - Creates a multithreaded DLL, (MSVCRT.LIB)
MDd - Creates debug multithreaded DLL   (MSVCRTD.LIB)
ML  - Creates a single-threaded exe file, (LIBC.LIB)
MLd - Creates debug single-threaded exe, (LIBCD.LIB)
MT  - Creates a multithreaded executable file,(LIBCMT.LIB) 
MTd - Creates a debug multithreaded exe file, (LIBCMTD.LIB)
O1  - Create smallest code
O2  - Create fast code
Od  - Disable optimizations
ZI  - Generate debug information for Edit&Continue
Zi  - Generate debugging information
MBCS - Include multibyte character set mappings
UNICODE - Include unicode character set mappings





