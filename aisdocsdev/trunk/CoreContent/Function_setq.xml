<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE Function SYSTEM "../DTD/Function.dtd">
<Function>
	<KnowledgeBase>
        <Title>setq</Title>
		<FunctionName>setq</FunctionName>
		<FunctionType>Builtin</FunctionType>
		<ArgumentTypes>Character String Symbol Vector BitVector ByteVector IntVector
 Date
                       FltVector ObjVector Structure Brick Dictionary Directory
 ShortVector List Void ObjectRepository
                       Matrix NumMatrix Integer Float Number Complex Boolean Number Lambda </ArgumentTypes>
		<DataType> String Symbol Structure Dictionary Directory Date Lambda ShortVector Boolean Vector Brick Matrix List Void Character Number  FltVector IntVector NumVector ObjVector  BitVector PcodeVector ObjectRepository</DataType>
		<RelatedFunctions>new defineStructure define makeStructure </RelatedFunctions>
        <RelatedVMInstructions> vmregObjPointer </RelatedVMInstructions> 
		<HumanKeywords>set setq replace global value </HumanKeywords>
	</KnowledgeBase>
         <Description><![CDATA[ 
             <p> The <b>setq</b> function replaces the I-th character in a String 
                 with a new Character value.   </p>
             <p> The <b>setq</b> function alters the global value of Symbol. </p>
             <p> The <b>setq</b> function the bindings of a Structure.   </p>
             <p> The <b>setq</b> function the bindings of a Dictionary.   </p>
             <p> The <b>setq</b> function the bindings of a Directory.   </p>
             <p> The <b>setq</b> function replaces the I-th character in a Vector 
                 to a specific value.   </p>
             <p> The <b>setq</b> function alters a field value of a Brick. The various syntax 
                 forms of the setq functions allow the modification of any field in the Brick. </p>
             <p> The <b>setq</b> function alters the I-th element in a Matrix to a specific value. </p>
             <p> The <b>setq</b> function alters the I-th element in a List to a specific value. </p>
             <p> The <b>setq</b> function  is used with an Lambda object to alter a method, or persistent variable that is owned by the Lambda.</p>
             <p> Use the <b>setq</b> function when you want to replace the value of a variable with a new value.</p>
         ]]></Description>
	<Brief>   
       <Overview-String><![CDATA[
		<p>The <b>setq</b> function replaces the I-th character in a String with a new 
           Character value.   If the specified target is a Text, it must be first converted to
           a String.  If the index is greater than the index of the last character in a String, 
           the String is resized to the size of the specified index, and the intervening 
           characters are padded with the space character:  #&#92space. 
        </p>
        ]]></Overview-String>
	   <Overview-Symbol><![CDATA[
		<p>The <b>setq</b> function alters the global value of a Symbol. 
        </p>
        ]]></Overview-Symbol>
	   <Overview-Structure><![CDATA[
		<p>The <b>setq</b> function alters the bindings of a Structure. The 
            various syntax forms of the <b>setq</b> functions allows the modification 
            of any key in the Structure, as well as any value in the Structure.  
        </p>
        ]]></Overview-Structure>
       <Overview-Dictionary><![CDATA[
		<p>The <b>setq</b> function alters the bindings of a Dictionary. There are two 
           syntax forms for changing a Dictionary binding. The first syntax form requires a 
           key argument <b>{key}</b> and a value argument <b>{newValue}</b> and results in 
           replacing the value at the specified key with <b>{newValue}</b>.  The second syntax 
           form requires a single index. The index  <b>{index1}</b> selects the index1-th
           binding pair and results in replacing the value at the specified index1-th position. 
           The third syntax form requires two indices. The first index specifies the index1-th 
           binding in the Dictionary and the second index  <b>{index2}</b> specifies which part
           of the binding pair will be altered. If  <b>{index2}</b> is equal to 0 the key will 
           be replaced, if  <b>{index2}</b> is equal to 1, then the value will be replaced.
        </p>
        ]]></Overview-Dictionary>
        <Overview-Directory><![CDATA[
		<p>The <b>setq</b> function alters the bindings of a Directory. There are two 
           syntax forms for changing a Directory binding. The first syntax form requires a 
           key argument <b>{key}</b> and a value argument <b>{newValue}</b> and results in 
           replacing the value at the specified key with <b>{newValue}</b>.  The second syntax 
           form requires a single index. The index  <b>{index1}</b> selects the index1-th
           binding pair and results in replacing the value at the specified index1-th position. 
           The third syntax form requires two indices. The first index specifies the index1-th 
           binding in the Dictionary and the second index  <b>{index2}</b> specifies which part
           of the binding pair will be altered. If  <b>{index2}</b> is equal to 0 the key will 
           be replaced, if  <b>{index2}</b> is equal to 1, then the value will be replaced.
        </p>
        ]]></Overview-Directory>
        <Overview-Vector><![CDATA[
		<p>The <b>setq</b> function alters the I-th element in a Vector to a specific value.
        </p>
        ]]></Overview-Vector>
        <Overview-Brick><![CDATA[ 
             <p> The <b>setq</b> function alters a field value of a Brick. The various syntax 
                 forms of the setq functions allow the modification of any field in the Record. </p>
        ]]></Overview-Brick>
        <Overview-Matrix><![CDATA[ 
             <p> The <b>setq</b> function alters the I-th element in a Matrix to a specific value. 
             The Matrix can also be accessed by indices across its dimensions if the Matrix has a 
             rank greater than one.</p>
        ]]></Overview-Matrix>
        <Overview-List><![CDATA[ 
             <p> The <b>setq</b> function alters the I-th element in a List to a specific value. </p>
        ]]></Overview-List>
       <Overview-Lambda><![CDATA[ 
             <p> The <b>setq</b> function is used with an Lambda object to alter a method, or persistent variable that is owned by the Lambda. </p>
        ]]></Overview-Lambda>
       <Overview-ObjectRepository><![CDATA[ 
             <p> The <b>setq</b> special form is a short hand form for the <b>set</b> function which assigns new values to
             variables. A simple <b>set</b> function results in a simple assignment and is uncomplicated. However, the <b>set</b>
             function can also be used to set a new value into a target object with indexing. When indexing is used, 
             the results of the <b>set</b> function depend upon the type of target object being indexed. The result of a <b>set</b>
             function, with indexing, are complicated because we need to know the type of target object and the types of the 
             indices. In all cases the <b>setq</b> special form converts easily into a longer set function call.  </p>
        ]]></Overview-ObjectRepository>
        <Overview><![CDATA[ 
             <p> The <b>setq</b> function sets the value of a variable to a new value.  </p>
        ]]></Overview>
       <Usage-String><![CDATA[
        <p>The <b>setq</b> function is used to modify  a single character from a String.  
           Assuming there are n characters in the String, the character indices run from 
           0 thru n-1.  The setq function does not apply to Text. </p>
      ]]></Usage-String>
      <Usage-Symbol><![CDATA[
        <p>Use the <b>setq</b> function when you want to replace the global value of Symbol 
           with a new value.</p>
      ]]></Usage-Symbol>
      <Usage-Vector><![CDATA[
        <p>Use the <b>setq</b> function when you want to replace an existing element in a 
           Vector or dynamically expand and add an element to a Vector.</p>
      ]]></Usage-Vector>
     <Usage-Brick><![CDATA[
        <p>Use the <b>setq</b> function when you want to modify one of the 
         fields in a brick.</p>
      ]]></Usage-Brick>
     <Usage-Matrix><![CDATA[
        <p>Use the <b>setq</b> when you want to replace an existing element in a Matrix or 
          dynamically expand and add an element to a Matrix.</p>
      ]]></Usage-Matrix>
      <Usage-List><![CDATA[
        <p>Use the <b>setq</b> when you want to replace an existing element in a List or 
         dynamically  expand and  add an element to a List.</p>
      ]]></Usage-List>
      <Usage-Void><![CDATA[
        <p>Use the <b>setq</b> when you want to replace the value of a variable with a new value.</p>
      ]]></Usage-Void>
     <Usage-Boolean><![CDATA[
        <p>Use the <b>setq</b> when you want to replace the value of a variable with a new value.</p>
      ]]></Usage-Boolean>
     <Usage-Character><![CDATA[
        <p>Use the <b>setq</b> when you want to replace the value of a variable with a new value.</p>
      ]]></Usage-Character>
    <Usage-Number><![CDATA[
        <p>Use the <b>setq</b> when you want to replace the value of a variable with a new value.</p>
      ]]></Usage-Number>
   <Usage-ObjectRepository><![CDATA[
        <p>Use the <b>setq</b> special form when a longer set function is too cumbersome.</p>
      ]]></Usage-ObjectRepository>
     <Usage-Date><![CDATA[
        <p>Use the <b>setq</b> when you want to replace the value of a variable with a new value.</p>
      ]]></Usage-Date>
     <Usage><![CDATA[
        <p>Use the <b>setq</b> function when you want to modify one of the bindings in a 
         structure, dictionary or directory.  You can modify either a key or a value of a 
         binding.</p>
      ]]></Usage>
    </Brief>
   <Syntax-String>
	    <Expression><![CDATA[ <p><b> (set   string  index newValue)</b></p>                    
                    <p><b><FONT COLOR="#0000ff">Strong Typed: </FONT>
                       <blockquote> (setString   string  index  newValue)    </blockquote> </b></p>]]></Expression>
		<Argument> 
		  <Name>string</Name>
		  <Note><![CDATA[
		  <p> A String object.</p>
          ]]></Note>
		  <AISTypes>String</AISTypes>
		</Argument>  
    	<Argument> 
		  <Name>index</Name>
		  <Note><![CDATA[
		  <p> An integer index</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p> A Character value</p>
          ]]></Note>
		  <AISTypes>Character</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>The result String after  setq is performed.</p>
	    ]]></Return>    	    
	</Syntax-String>
   <Syntax-Symbol>
	    <Expression><![CDATA[<p><b> (setq sym newValue ) </b></p>]]></Expression>
		<Argument> 
		  <Name>sym</Name>
		  <Note><![CDATA[
		  <p> The Symbol whose value will be modified</p>
          ]]></Note>
		  <AISTypes>---</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p> New string value</p>
          ]]></Note>
		  <AISTypes>String, Symbol or Text</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns the value of the updated symbol.</p>
	    ]]></Return>    	    
	</Syntax-Symbol>
  <Syntax-Structure>
	    <Expression><![CDATA[ <p><b><FONT COLOR="#0000ff">Strong Typed: </FONT>
                       <blockquote>(refStrValue aStruct index) </blockquote> </b></p>
                    <p><b><blockquote> (refStrKey aStruct index)</blockquote>  </b></p>
                    <p><b> (setq  struct key  newValue ) </b></p> ]]></Expression>
		<Argument> 
		  <Name>struct</Name>
		  <Note><![CDATA[
		  <p> The Structure to be modified.</p>
          ]]></Note>
		  <AISTypes>Structure</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>key</Name>
		  <Note><![CDATA[
		  <p>The key whose value is to be modified. If the key is already present, 
             then its bound value will be modified; otherwise, the new key will be 
             added bound with the specified new value. The current key value bindings 
            are assumed NOT to exist in binary unique ascending sorted order.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
    	<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p>The new value to be bound along with the key.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated Structure.</p>
	    ]]></Return>    
  </Syntax-Structure>
  <Syntax-Structure>
        <Expression><![CDATA[ <p><b> (setq  struct index1 newValue)  </b></p>]]></Expression>
	   <Argument> 
		  <Name>struct</Name>
		  <Note><![CDATA[
		  <p> The Structure to be modified.</p>
          ]]></Note>
		  <AISTypes>Structure</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index1</Name>
		  <Note><![CDATA[
		  <p>If the index1 is present and numeric, it will identify the integer index 
              position to modify.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
    	<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p>The new value to replace the old value.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated Structure.</p>
	    ]]></Return>    	    
  </Syntax-Structure>
  <Syntax-Structure>
        <Expression><![CDATA[<p><b>(setq  struct index1 index2 newValue) </b></p>]]></Expression>
       <Argument> 
		  <Name>struct</Name>
		  <Note><![CDATA[
		  <p> The Structure to be modified.</p>
          ]]></Note>
		  <AISTypes>Structure</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index1</Name>
		  <Note><![CDATA[
		  <p>If the index1 is present and numeric, it will identify the integer index 
              position to modify.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
       <Argument> 
		  <Name>index2</Name>
		  <Note><![CDATA[
		  <p>If equal to 0 then the newValue argument is to modify the Key. If equal to 1 then 
             the newValue argument is to modify the old value.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
    	<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p>The new value to modify either the old key or the old value.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated Structure.</p>
	    ]]></Return>    
  </Syntax-Structure>
  <Syntax-Structure>
        <Expression><![CDATA[<p><b>(setq  struct last: key newValue) </b></p>]]></Expression>
    	<Argument> 
		  <Name>struct</Name>
		  <Note><![CDATA[
		  <p> The Structure to be modified.</p>
          ]]></Note>
		  <AISTypes>Structure</AISTypes>
		</Argument>  
	    <Argument> 
		  <Name>last:</Name>
		  <Note><![CDATA[
		  <p> If the index1 is present and is the symbol last, a new binding 
              will be added after the last index position.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>key</Name>
		  <Note><![CDATA[
		  <p>The key for the new binding.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
    	<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p>The new value to be bound along with the key.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated Structure.</p>
	    ]]></Return>    
  </Syntax-Structure>
  <Syntax-Structure>
        <Expression><![CDATA[<p><b>(setq  struct sorted: key newValue) </b></p>]]></Expression>
    	<Argument> 
		  <Name>struct</Name>
		  <Note><![CDATA[
		  <p> The Structure to be modified.</p>
          ]]></Note>
		  <AISTypes>Structure</AISTypes>
		</Argument>  
	    <Argument> 
		  <Name>sorted:</Name>
		  <Note><![CDATA[
		  <p> If the index1 is present and is the symbol sorted, the current key 
              value bindings are assumed to exist in binary unique ascending sorted order.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>key</Name>
		  <Note><![CDATA[
		  <p>The key whose value is to be modified. If the key is already present, then 
             its bound value will be modified; otherwise, the new key will be added bound 
             with the specified new value.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
    	<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p>The new value to be bound along with the key.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated Structure.</p>
	    ]]></Return>    
  </Syntax-Structure>
  <Syntax-Structure>
       <Expression><![CDATA[<p><b>(setq  struct unsorted: key newValue) </b></p>]]></Expression>
    	<Argument> 
		  <Name>struct</Name>
		  <Note><![CDATA[
		  <p> The Structure to be modified.</p>
          ]]></Note>
		  <AISTypes>Structure</AISTypes>
		</Argument>  
	    <Argument> 
		  <Name>unsorted:</Name>
		  <Note><![CDATA[
		  <p> If the index1 is present and is the symbol unsorted, the current key 
              value bindings are assumed NOT to exist in binary unique ascending sorted order.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>key</Name>
		  <Note><![CDATA[
		  <p>The key whose value is to be modified. If the key is already present, then 
             its bound value will be modified; otherwise, the new key will be added bound 
             with the specified new value.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
    	<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p>The new value to be bound along with the key.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated Structure.</p>
	    ]]></Return>    
	</Syntax-Structure>
   <Syntax-Dictionary>
	    <Expression><![CDATA[ <p><b><FONT COLOR="#0000ff">Strong Typed: </FONT>
                       <blockquote>(setDicValue aDic index newValue) </blockquote> </b></p>                  
        ]]></Expression> 
	   <Argument> 
		  <Name>aDic</Name>
		  <Note><![CDATA[
		  <p> The Dictionary to be modified.</p>
          ]]></Note>
		  <AISTypes>Dictionary</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index</Name>
		  <Note><![CDATA[
		  <p>If the index is present and numeric, it will identify the integer index 
              position to modify.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
    	<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p>The new value to replace the old value.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated Dictionary.</p>
	    ]]></Return>
   </Syntax-Dictionary>
   <Syntax-Dictionary>
       <Expression><![CDATA[ <p><b><FONT COLOR="#0000ff">Strong Typed: </FONT>                        
                    <p><b><blockquote> (setDicKey aDic index newKey)</blockquote>  </b></p>
        ]]></Expression>
	   <Argument> 
		  <Name>aDic</Name>
		  <Note><![CDATA[
		  <p> The Dictionary to be modified.</p>
          ]]></Note>
		  <AISTypes>Dictionary</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index</Name>
		  <Note><![CDATA[
		  <p>If the index is present and numeric, it will identify the integer index 
              position to modify.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
    	<Argument> 
		  <Name>newKey</Name>
		  <Note><![CDATA[
		  <p>The new key to replace the old key.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated Dictionary.</p>
	    ]]></Return>
   </Syntax-Dictionary>
   <Syntax-Dictionary>
        <Expression><![CDATA[  <p> (set dict key newValue) </p> ]]></Expression>
		<Argument> 
		  <Name>dict</Name>
		  <Note><![CDATA[
		  <p> The Dictionary to be modified.</p>
          ]]></Note>
		  <AISTypes>Dictionary</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>key</Name>
		  <Note><![CDATA[
		  <p>The key whose value is to be modified. If the key is already present, 
             then its bound value will be modified; otherwise, the new key will be 
             added bound with the specified new value. The current key value bindings 
            are assumed NOT to exist in binary unique ascending sorted order.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
    	<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p>The new value to be bound along with the key.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated Dictonary.</p>
	    ]]></Return>
   </Syntax-Dictionary>
   <Syntax-Dictionary>
       <Expression><![CDATA[ <p> (set dict index1 newValue) </p>                  
        ]]></Expression> 
	   <Argument> 
		  <Name>dict</Name>
		  <Note><![CDATA[
		  <p> The Dictionary to be modified.</p>
          ]]></Note>
		  <AISTypes>Dictionary</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index1</Name>
		  <Note><![CDATA[
		  <p>If the index is present and numeric, it will identify the integer index 
              position to modify.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
    	<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p>The new value to replace the old value.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated Dictionary.</p>
	    ]]></Return>
   </Syntax-Dictionary>
   <Syntax-Dictionary>
       <Expression><![CDATA[<p>(setq  struct index1 index2 newValue) </p>]]></Expression>
       <Argument> 
		  <Name>struct</Name>
		  <Note><![CDATA[
		  <p> The Structure to be modified.</p>
          ]]></Note>
		  <AISTypes>Structure</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index1</Name>
		  <Note><![CDATA[
		  <p>If the index1 is present and numeric, it will identify the integer index 
              position to modify.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
       <Argument> 
		  <Name>index2</Name>
		  <Note><![CDATA[
		  <p>If equal to 0 then the newValue argument is to modify the Key. If equal to 1 then 
             the newValue argument is to modify the old value.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
    	<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p>The new value to modify either the old key or the old value.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated Dictionary.</p>
	    ]]></Return>
   </Syntax-Dictionary>
   <Syntax-Dictionary>
        <Expression><![CDATA[<p><b>(setq  dict last: key newValue) </b></p>]]></Expression>
    	<Argument> 
		  <Name>dict</Name>
		  <Note><![CDATA[
		  <p> The Dictionary to be modified.</p>
          ]]></Note>
		  <AISTypes>Dictionary</AISTypes>
		</Argument>  
	    <Argument> 
		  <Name>last:</Name>
		  <Note><![CDATA[
		  <p> If the index1 is present and is the symbol last, a new binding 
              will be added after the last index position.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>key</Name>
		  <Note><![CDATA[
		  <p>The key for the new binding.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
    	<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p>The new value to be bound along with the key.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated Dictionary.</p>
	    ]]></Return>
   </Syntax-Dictionary>
   <Syntax-Dictionary>
        <Expression><![CDATA[<p><b>(setq  dict sorted: key newValue) </b></p>]]></Expression>
    	<Argument> 
		  <Name>struct</Name>
		  <Note><![CDATA[
		  <p> The Dictionary to be modified.</p>
          ]]></Note>
		  <AISTypes>Dictionary</AISTypes>
		</Argument>  
	    <Argument> 
		  <Name>sorted:</Name>
		  <Note><![CDATA[
		  <p> If the index1 is present and is the symbol sorted, the current key 
              value bindings are assumed to exist in binary unique ascending sorted order.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>key</Name>
		  <Note><![CDATA[
		  <p>The key whose value is to be modified. If the key is already present, then 
             its bound value will be modified; otherwise, the new key will be added bound 
             with the specified new value.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
    	<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p>The new value to be bound along with the key.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated Dictionary.</p>
	    ]]></Return>    
   </Syntax-Dictionary>
   <Syntax-Dictionary>
       <Expression><![CDATA[<p><b>(setq  dict unsorted: key newValue) </b></p>]]></Expression>
    	<Argument> 
		  <Name>dict</Name>
		  <Note><![CDATA[
		  <p> The Dictionary to be modified.</p>
          ]]></Note>
		  <AISTypes>Dictionary</AISTypes>
		</Argument>  
	    <Argument> 
		  <Name>unsorted:</Name>
		  <Note><![CDATA[
		  <p> If the index1 is present and is the symbol unsorted, the current key 
              value bindings are assumed NOT to exist in binary unique ascending sorted order.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>key</Name>
		  <Note><![CDATA[
		  <p>The key whose value is to be modified. If the key is already present, then 
             its bound value will be modified; otherwise, the new key will be added bound 
             with the specified new value.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
    	<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p>The new value to be bound along with the key.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated Dictionary.</p>
	    ]]></Return>    
	</Syntax-Dictionary>
  <Syntax-Directory>
	    <Expression><![CDATA[ <p><b><FONT COLOR="#0000ff">Strong Typed: </FONT>
                       <blockquote>(setDirValue aDir index newValue) </blockquote> </b></p>                  
        ]]></Expression> 
	   <Argument> 
		  <Name>aDir</Name>
		  <Note><![CDATA[
		  <p> The Directory to be modified.</p>
          ]]></Note>
		  <AISTypes>Directory</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index</Name>
		  <Note><![CDATA[
		  <p>If the index is present and numeric, it will identify the integer index 
              position to modify.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
    	<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p>The new value to replace the old value.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated Dictionary.</p>
	    ]]></Return>
  </Syntax-Directory>
  <Syntax-Directory>
       <Expression><![CDATA[ <p><b><FONT COLOR="#0000ff">Strong Typed: </FONT>                        
                    <p><b><blockquote> (setDicKey aDic index newKey)</blockquote>  </b></p>
        ]]></Expression>
	   <Argument> 
		  <Name>aDic</Name>
		  <Note><![CDATA[
		  <p> The Dictionary to be modified.</p>
          ]]></Note>
		  <AISTypes>Dictionary</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index</Name>
		  <Note><![CDATA[
		  <p>If the index is present and numeric, it will identify the integer index 
              position to modify.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
    	<Argument> 
		  <Name>newKey</Name>
		  <Note><![CDATA[
		  <p>The new key to replace the old key.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated Dictionary.</p>
	    ]]></Return>
  </Syntax-Directory>
  <Syntax-Directory>
        <Expression><![CDATA[  <p> (set dict key newValue) </p> ]]></Expression>
		<Argument> 
		  <Name>dict</Name>
		  <Note><![CDATA[
		  <p> The Dictionary to be modified.</p>
          ]]></Note>
		  <AISTypes>Dictionary</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>key</Name>
		  <Note><![CDATA[
		  <p>The key whose value is to be modified. If the key is already present, 
             then its bound value will be modified; otherwise, the new key will be 
             added bound with the specified new value. The current key value bindings 
            are assumed NOT to exist in binary unique ascending sorted order.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
    	<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p>The new value to be bound along with the key.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated Dictonary.</p>
	    ]]></Return>
  </Syntax-Directory>
  <Syntax-Directory>
       <Expression><![CDATA[ <p> (set dict index1 newValue) </p>                  
        ]]></Expression> 
	   <Argument> 
		  <Name>dict</Name>
		  <Note><![CDATA[
		  <p> The Dictionary to be modified.</p>
          ]]></Note>
		  <AISTypes>Dictionary</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index1</Name>
		  <Note><![CDATA[
		  <p>If the index is present and numeric, it will identify the integer index 
              position to modify.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
    	<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p>The new value to replace the old value.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated Dictionary.</p>
	    ]]></Return>
  </Syntax-Directory>
  <Syntax-Directory>
       <Expression><![CDATA[<p>(setq  struct index1 index2 newValue) </p>]]></Expression>
       <Argument> 
		  <Name>struct</Name>
		  <Note><![CDATA[
		  <p> The Structure to be modified.</p>
          ]]></Note>
		  <AISTypes>Structure</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index1</Name>
		  <Note><![CDATA[
		  <p>If the index1 is present and numeric, it will identify the integer index 
              position to modify.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
       <Argument> 
		  <Name>index2</Name>
		  <Note><![CDATA[
		  <p>If equal to 0 then the newValue argument is to modify the Key. If equal to 1 then 
             the newValue argument is to modify the old value.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
    	<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p>The new value to modify either the old key or the old value.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated Dictionary.</p>
	    ]]></Return>
  </Syntax-Directory>
  <Syntax-Directory>
        <Expression><![CDATA[<p><b>(setq  dict last: key newValue) </b></p>]]></Expression>
    	<Argument> 
		  <Name>dict</Name>
		  <Note><![CDATA[
		  <p> The Dictionary to be modified.</p>
          ]]></Note>
		  <AISTypes>Dictionary</AISTypes>
		</Argument>  
	    <Argument> 
		  <Name>last:</Name>
		  <Note><![CDATA[
		  <p> If the index1 is present and is the symbol last, a new binding 
              will be added after the last index position.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>key</Name>
		  <Note><![CDATA[
		  <p>The key for the new binding.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
    	<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p>The new value to be bound along with the key.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated Dictionary.</p>
	    ]]></Return>
  </Syntax-Directory>
  <Syntax-Directory>
        <Expression><![CDATA[<p><b>(setq  dict sorted: key newValue) </b></p>]]></Expression>
    	<Argument> 
		  <Name>struct</Name>
		  <Note><![CDATA[
		  <p> The Dictionary to be modified.</p>
          ]]></Note>
		  <AISTypes>Dictionary</AISTypes>
		</Argument>  
	    <Argument> 
		  <Name>sorted:</Name>
		  <Note><![CDATA[
		  <p> If the index1 is present and is the symbol sorted, the current key 
              value bindings are assumed to exist in binary unique ascending sorted order.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>key</Name>
		  <Note><![CDATA[
		  <p>The key whose value is to be modified. If the key is already present, then 
             its bound value will be modified; otherwise, the new key will be added bound 
             with the specified new value.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
    	<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p>The new value to be bound along with the key.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated Dictionary.</p>
	    ]]></Return>    
  </Syntax-Directory>
  <Syntax-Directory>
       <Expression><![CDATA[<p><b>(setq  dict unsorted: key newValue) </b></p>]]></Expression>
    	<Argument> 
		  <Name>dict</Name>
		  <Note><![CDATA[
		  <p> The Dictionary to be modified.</p>
          ]]></Note>
		  <AISTypes>Dictionary</AISTypes>
		</Argument>  
	    <Argument> 
		  <Name>unsorted:</Name>
		  <Note><![CDATA[
		  <p> If the index1 is present and is the symbol unsorted, the current key 
              value bindings are assumed NOT to exist in binary unique ascending sorted order.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>key</Name>
		  <Note><![CDATA[
		  <p>The key whose value is to be modified. If the key is already present, then 
             its bound value will be modified; otherwise, the new key will be added bound 
             with the specified new value.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
    	<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p>The new value to be bound along with the key.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated Dictionary.</p>
	    ]]></Return>    
	</Syntax-Directory>
    <Syntax>
	    <Expression><![CDATA[<p><b> (setq vector index newValue) </b></p>                 			     
					<p><b><FONT COLOR="#0000ff">Strong Typed: </FONT>
                          <blockquote>(setVector Vector index newValue) </blockquote> </b></p>
                    <p><b><blockquote> (setBitVector BitVector index newValue)</blockquote>  </b></p>
                    <p><b><blockquote> (setBytVector ByteVector index newValue) </blockquote>  </b></p>
                    <p><b><blockquote> (setFltVector FltVector index newValue)</blockquote>  </b></p>
                    <p><b><blockquote> (setIntVector IntVector index newValue)  </blockquote>  </b></p>
                    <p><b><blockquote>  (setNumVector NumVector index newValue)  </blockquote>  </b></p>
                    <p><b><blockquote>  (setObjVector ObjVector index newValue)  </blockquote>  </b></p>
                    <p><b><blockquote>  (setShortVector ShortVector index newValue)  </blockquote>  </b></p>
                    <p><b><blockquote> (setPcdVector PcodeVector index newValue)  </blockquote>  </b></p>]]></Expression>
		<Argument> 
		  <Name>vector</Name>
		  <Note><![CDATA[
		  <p> The Vector to be modified. </p>
          ]]></Note>
		  <AISTypes>Vector BitVector ByteVector, ShortVector
              FltVector IntVector NumVector ObjVector PcodeVector. </AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index</Name>
		  <Note><![CDATA[
		  <p>The index of element to be set.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
     	<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p>The new value that will occupy the location Vector[index].</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex Boolean</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated Vector.</p>
	    ]]></Return>            
	</Syntax>
 <Syntax-Brick>
	    <Expression><![CDATA[<p><b> (setq aRecord fieldIndex  {rowIndex} newValue)</b></p> ]]></Expression>
		<Argument> 
		  <Name>aRecord</Name>
		  <Note><![CDATA[
		  <p> The Brick to be referenced. </p>
          ]]></Note>
		  <AISTypes>Brick </AISTypes>
		</Argument>  
		<Argument> 
		  <Name>fieldIndex</Name>
		  <Note><![CDATA[
		  <p>The field index of a field in the Brick 
		    (must be either a field name or an integer index of the field).</p>
          ]]></Note>
		  <AISTypes>Integer Symbol</AISTypes>
		</Argument>    
		<Argument> 
		  <Name>rowIndex</Name>
		  <Note><![CDATA[
		  <p>(Optional) The row index of the specified record in the record 
		   (the first row is always index zero).</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
     	<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p>The new value to be saved in the specified field</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex Boolean</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns the altered Brick object.</p>
	    ]]></Return>
 </Syntax-Brick>
 <Syntax-Brick>
	    <Expression><![CDATA[ <p><b>  (setq aBrick fieldIndex number  {rowIndex} newValue)</b></p>]]></Expression>
		<Argument> 
		  <Name>aRecord</Name>
		  <Note><![CDATA[
		  <p> The Brick to be referenced. </p>
          ]]></Note>
		  <AISTypes>Brick </AISTypes>
		</Argument>  
		<Argument> 
		  <Name>fieldIndex</Name>
		  <Note><![CDATA[
		  <p>The field index of a field in the Brick 
		    (must be either a field name or an integer index of the field).</p>
          ]]></Note>
		  <AISTypes>Integer Symbol</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>number</Name>
		  <Note><![CDATA[
		  <p>The field repeat index of the specified field in the record 
		   (the first repeat is always index zero).</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>    
		<Argument> 
		  <Name>rowIndex</Name>
		  <Note><![CDATA[
		  <p>(Optional) The row index of the specified record in the record 
		   (the first row is always index zero).</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
     	<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p>The new value to be saved in the specified field</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex Boolean</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns the altered Brick object.</p>
	    ]]></Return>
	</Syntax-Brick>
    <Syntax-Matrix>
	    <Expression><![CDATA[<p><b> (setq  matrix index  newValue )</b></p> ]]></Expression>
		<Argument> 
		  <Name>matrix</Name>
		  <Note><![CDATA[
		  <p> The Matrix to be referenced. </p>
          ]]></Note>
		  <AISTypes>Matrix </AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index</Name>
		  <Note><![CDATA[
		  <p>The index or index list of element to be set.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>    
     	<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p>The new value that will occupy the location Matrix[index]</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex Boolean</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated Matrix.</p>
	    ]]></Return>              
	</Syntax-Matrix>
   <Syntax-List>
	    <Expression><![CDATA[<p><b> (setq list  index  newValue ) </b></p>]]></Expression>
		<Argument> 
		  <Name>list</Name>
		  <Note><![CDATA[
		  <p> The list to be modified</p>
          ]]></Note>
		  <AISTypes>List</AISTypes>
		</Argument> 
		<Argument> 
		  <Name>index</Name>
		  <Note><![CDATA[
		  <p> The index of element to be setq.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument> 
		<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p> The new value that will occupy the location List[index]</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex Boolean</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated List</p>
	    ]]></Return>    	    
	</Syntax-List>
   <Syntax-Lambda>
	    <Expression><![CDATA[<p><b> (setq  anLambda.LambdaVariable newValue) </b></p>]]></Expression>
		<Argument> 
		  <Name>anLambda</Name>
		  <Note><![CDATA[
		  <p> The name of an Lambda.</p>
          ]]></Note>
		  <AISTypes>Lambda</AISTypes>
		</Argument> 
		<Argument> 
		  <Name>.</Name>
		  <Note><![CDATA[
		  <p> Mandatory period operator.</p>
          ]]></Note>
		  <AISTypes>---</AISTypes>
		</Argument> 
		<Argument> 
		  <Name>LambdaVariable</Name>
		  <Note><![CDATA[
		  <p> The new value for the Lambda persistent variable.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument> 
		<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p> The new value for the Lambda persistent variable.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex Boolean</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns an updated List</p>
	    ]]></Return>    	    
	</Syntax-Lambda>
   <Syntax-ObjectRepository>
	    <Expression><![CDATA[<p><b> (setq target newValue)  </b></p>
                     <p><b> (setq (ref target index1) newValue)   </b></p>
                     <p><b> (setq (ref target index1 index2) newValue)   </b></p>
                     <p><b> (setq (ref target index1 index2 index3) newValue)   </b></p>]]></Expression>
		<Argument> 
		  <Name>target</Name>
		  <Note><![CDATA[
		  <p> The target Object Repository.</p>
          ]]></Note>
		  <AISTypes>ObjectRepository</AISTypes>
		</Argument> 
		<Argument> 
		  <Name>index1</Name>
		  <Note><![CDATA[
		  <p> (Optional) A target variable index.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument> 
		<Argument> 
		  <Name>index2</Name>
		  <Note><![CDATA[
		  <p> (Optional) A target variable index.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument> 
		<Argument> 
		  <Name>index3</Name>
		  <Note><![CDATA[
		  <p> (Optional) A target variable index.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument> 
		<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p> The new value for the Lambda persistent variable.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex Boolean</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>The result of setq depends upon the type of object in the target variable.</p>
	    ]]></Return>    	    
	</Syntax-ObjectRepository>
   <Syntax-Void>
	    <Expression><![CDATA[<p><b> (setq  obj newValue ) </b></p>]]></Expression>
		<Argument> 
		  <Name>obj</Name>
		  <Note><![CDATA[
		  <p> Must be a native data type object.</p>
          ]]></Note>
		  <AISTypes>Void Boolean Character Number Date</AISTypes>
		</Argument>
		<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p> The new value to be placed in {obj}.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex Boolean</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns the {obj} which contains a new value.</p>
	    ]]></Return>    	    
	</Syntax-Void>
   <Syntax-Boolean>
	    <Expression><![CDATA[<p><b> (setq  obj newValue ) </b></p>]]></Expression>
		<Argument> 
		  <Name>obj</Name>
		  <Note><![CDATA[
		  <p> Must be a native data type object.</p>
          ]]></Note>
		  <AISTypes>Void Boolean Character Number Date</AISTypes>
		</Argument>
		<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p> The new value to be placed in {obj}.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex Boolean</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns the {obj} which contains a new value.</p>
	    ]]></Return>    	    
	</Syntax-Boolean>
   <Syntax-Character>
	    <Expression><![CDATA[<p><b> (setq  obj newValue ) </b></p>]]></Expression>
		<Argument> 
		  <Name>obj</Name>
		  <Note><![CDATA[
		  <p> Must be a native data type object.</p>
          ]]></Note>
		  <AISTypes>Void Boolean Character Number Date</AISTypes>
		</Argument>
		<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p> The new value to be placed in {obj}.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex Boolean</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns the {obj} which contains a new value.</p>
	    ]]></Return>    	    
	</Syntax-Character>
   <Syntax-Number>
	    <Expression><![CDATA[<p><b> (setq  obj newValue ) </b></p>]]></Expression>
		<Argument> 
		  <Name>obj</Name>
		  <Note><![CDATA[
		  <p> Must be a native data type object.</p>
          ]]></Note>
		  <AISTypes>Void Boolean Character Number Date</AISTypes>
		</Argument>
		<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p> The new value to be placed in {obj}.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex Boolean</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns the {obj} which contains a new value.</p>
	    ]]></Return>    	    
	</Syntax-Number>
   <Syntax-Date>
	    <Expression><![CDATA[<p><b> (setq  obj newValue ) </b></p>]]></Expression>
		<Argument> 
		  <Name>obj</Name>
		  <Note><![CDATA[
		  <p> Must be a native data type object.</p>
          ]]></Note>
		  <AISTypes>Void Boolean Character Number Date</AISTypes>
		</Argument>
		<Argument> 
		  <Name>newValue</Name>
		  <Note><![CDATA[
		  <p> The new value to be placed in {obj}.</p>
          ]]></Note>
		  <AISTypes>Character String Symbol Vector BitVector ByteVector IntVector
                       FltVector ObjVector Structure Dictionary Directory
                       Matrix NumMatrix Integer Float Number Complex Boolean</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns the {obj} which contains a new value.</p>
	    ]]></Return>    	    
	</Syntax-Date>
</Function>
