<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE Example SYSTEM "../DTD/Example.dtd">
<Example>
	<KnowledgeBase>
		<Title>Example Function addMethod 017</Title>
		<Template>Example</Template>
		<FunctionKeywords>addMethod</FunctionKeywords>
		<TypeKeywords> Function Symbol Dictionary </TypeKeywords>
		<RelatedFunctions>defmethod send methodsOf</RelatedFunctions>
		<Language>Lisp</Language>
		<HumanKeywords>method message messageName</HumanKeywords>
	</KnowledgeBase>
	<Description><![CDATA[<p> This example defines a method named <b>evalFun</b> that is invoked when the Function  


                 type receives a <b>eval</b>   message.  The <b>evalFun</b> method takes function with a single parameter, 
                 coerces the parameter to an integer and returns the result after evaluating the function.  </p>
	]]></Description>
	<Syntax>
	<Expression><![CDATA[<sc>
(defun evalFun (fname arg)  (fname (integer arg)) )   </sc>]]></Expression>
    <Note><![CDATA[ First Define the evalFun  method:

]]></Note>
    <Returns><![CDATA[ #&#60Lambda 123456&#62]]></Returns>
    <Expression><![CDATA[<sc>(addMethod  Function: eval: evalFun)                    <sc> ]]></Expression>
    <Note><![CDATA[Install the evalFun method and the message named eval in the Function Methods Dictionary.]]></Note>
    <Returns><![CDATA[#&#60Dictionary 123456&#62]]></Returns>
    <Expression><![CDATA[<sc>(send eval:  add1 96.1 )              <sc> ]]></Expression>
    <Note><![CDATA[To invoke the Lambda that responds to the eval message, issue the following statement:]]></Note>
    <Returns><![CDATA[97]]></Returns>
    <Expression><![CDATA[<sc>(eval: add1 96.1 )                   <sc> ]]></Expression>
    <Note><![CDATA[Alternatively, the Lambda may be invoked using the following syntax:]]></Note>
    <Returns><![CDATA[97]]></Returns>
    <Hints><![CDATA[none]]></Hints>
</Syntax>
</Example>
