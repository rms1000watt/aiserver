<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE Function SYSTEM "../DTD/Function.dtd">
<Function>
	<KnowledgeBase>
        <Title>isComplex</Title>
		<FunctionName>isComplex</FunctionName>
		<FunctionType>Builtin</FunctionType>
		<ArgumentTypes> Character String Symbol Vector BitVector ByteVector IntVector Void
                       FltVector ObjVector Structure Dictionary Directory Brick Pair List ObjectRepository
                       Matrix NumMatrix Integer Float Number Complex Boolean Date Function</ArgumentTypes>
		<DataType> Complex </DataType>
		<RelatedFunctions>complex real imaginary</RelatedFunctions>
        <RelatedVMInstructions>none </RelatedVMInstructions>
		<HumanKeywords>complex real imaginary </HumanKeywords>
	</KnowledgeBase>
         <Description><![CDATA[
             <p> The <b>isComplex</b> function returns a Boolean which is true if, and 
                only if, its argument is Complex.</p>
          ]]></Description>
	<Brief>
	   <Overview><![CDATA[
               <p> The <b>isComplex</b> function returns a Boolean which is true if, and 
                only if, its argument is Complex.</p>
        ]]></Overview>
        <Usage><![CDATA[
        <p>The <b>isComplex</b> function is used to test the data type of an 
           argument to determine if it is complex.
         </p>
        ]]></Usage>
    </Brief>
	<Syntax>
	    <Expression><![CDATA[<p><b> (isComplex X)</b></p>]]></Expression>
		<Argument>
		  <Name>X</Name>
		  <Note><![CDATA[
		  <p>Any Lisp data type.</p>
          ]]></Note>
		  <AISTypes> Character String Symbol Vector BitVector ByteVector IntVector Void
                       FltVector ObjVector Structure Dictionary Directory Brick Pair List ObjectRepository
                       Matrix NumMatrix Integer Float Number Complex Boolean Date Function</AISTypes>
		</Argument>
		<Return><![CDATA[
	    <p>The Boolean, true if X is a complex number; else, returns false.</p>
	    ]]></Return>
	</Syntax>
</Function>
