<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE Example SYSTEM "../DTD/Example.dtd">
<Example>
	<KnowledgeBase>
		<Title>Example ObjVector uniqueInsert 007</Title>
		<Template>Example</Template>
		<FunctionKeywords>uniqueInsert</FunctionKeywords>
		<TypeKeywords>ObjVector  Integer</TypeKeywords>
		<RelatedFunctions>insert binarySearch binaryInsert sort</RelatedFunctions>
		<Language>Lisp</Language>
		<HumanKeywords>binary insert structure sort</HumanKeywords>
	</KnowledgeBase>
	<Description><![CDATA[ The first example shows how  the <b>uniqueInsert</b> function works

                  when a value that already exists in the Vector is inserted. The second 

                  example shows how the <b>uniqueInsert</b> function works when a new value

                  is inserted in the Vector.

                  


	]]></Description>
	<Syntax>
  	   <Expression><![CDATA[ <sc>(setq X #(obj| #{A: 1 B: 2} #(1 2 ) ))         </sc>]]></Expression>
        <Note><![CDATA[Try to insert a value that already exists]]></Note>
        <Returns><![CDATA[#&#60ObjVector 123456&#62 ]]></Returns>
        <Expression><![CDATA[ <sc>(uniqueInsert X #(1 2 ) )       </sc>]]></Expression>
        <Note><![CDATA[The index of the value in the Vector is returned.]]></Note>
        <Returns><![CDATA[1]]></Returns>
        <Expression><![CDATA[ <sc>(uniqueInsert X #{dir| A: 1 B: 2})       </sc>]]></Expression>  
        <Note><![CDATA[The new value is inserted at the end of the Vector.]]></Note> 
        <Returns><![CDATA[2]]></Returns>
        <Expression><![CDATA[ <sc>(display X )       </sc>]]></Expression>
        <Note><![CDATA[The modified Vector is displayed. ]]></Note>
        <Returns><![CDATA[#(obj| #{A: 1 B: 2} #(1 2 ) #{dir|| A 1 B 2} )]]></Returns>
        <Hints><![CDATA[The <b>uniqueInsert</b> function always inserts a new value at the end, since a 


                Vector is by default not sorted. If sort order is needed, use the <b>sort</b>
                function and insert new objects by calling the <b>binaryInsert</b> function.

        ]]></Hints>
   </Syntax>
</Example>
