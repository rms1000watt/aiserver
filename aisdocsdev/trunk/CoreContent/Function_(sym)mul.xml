<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE Function SYSTEM "../DTD/Function.dtd">
<Function>
	<KnowledgeBase>
        <Title>Mul</Title>
		<FunctionName>(sym)mul</FunctionName>
		<FunctionType>Builtin(Math)</FunctionType>
		<ArgumentTypes>Number Integer Complex</ArgumentTypes>
		<DataType>Number Complex  </DataType>
		<RelatedFunctions>(sym)add (sym)sub (sym)div</RelatedFunctions>
        <RelatedVMInstructions>    </RelatedVMInstructions>
		<HumanKeywords>multiplication addition subtraction division</HumanKeywords>
	</KnowledgeBase>
         <Description><![CDATA[
             <p> The <b>&#42</b> Function returns the product of its arguments.  </p>
          ]]></Description>
	<Brief>
	   <Overview><![CDATA[
		  <p> The <b>&#42</b> Function returns the product of its arguments. If no arguments 
           are specified, <b>&#42</b> returns one.</p>
        ]]></Overview>
	   <Overview-Complex><![CDATA[
		  <p> The <b>&#42</b> Function  forms the product of a variety of numeric data types and
           one or more complex numbers as shown in the examples below. The product of xr + i xi 
            with yr + i yi is xr&#42yr - xi&#42yi + i (xr&#42 yi + xi&#42yr).</p>
        ]]></Overview-Complex>
        <Usage><![CDATA[
        <p>The <b>&#42</b> function is used whenever it is necessary to compute the product of a set 
            of Numbers.</p>
        ]]></Usage>
        <Usage-Complex><![CDATA[
        <p>Use the <b>&#42</b> function to multiply numeric data types where at least one of the
           arguments is complex. Do not use if an immediate type, such as a real number, 
           would suffice. Since complex numbers are heap objects, they require more space 
           and operations on these types are slower than on immediate types.      </p>   
        ]]></Usage-Complex>
    </Brief>
	<Syntax>
	    <Expression><![CDATA[<p>(&#42 args...)</p>]]></Expression>
		<Argument>
		  <Name>args ...</Name>
		  <Note><![CDATA[
		  <p> Any Number Types</p>
          ]]></Note>
		  <AISTypes>Number</AISTypes>
		</Argument>
		<Return><![CDATA[
	    <p>Computes the product of all the Numbers(or Complex Types) in the argument list. If the argument list is empty,
               the &#42 function returns 1.
        </p>
	    ]]></Return>
	</Syntax>
	<Syntax-Complex>
	    <Expression><![CDATA[<p>(&#42 N1 N2)</p>]]></Expression>
		<Argument> 
		  <Name>N1 N2</Name>
		  <Note><![CDATA[
		  <p> A numeric type.</p>
          ]]></Note>
		  <AISTypes>Number</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>A complex number holding the product of N1, N2, etc.
        </p>
	    ]]></Return>   
	</Syntax-Complex>
</Function>
