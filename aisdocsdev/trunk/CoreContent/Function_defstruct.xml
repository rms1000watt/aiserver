<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE Function SYSTEM "../DTD/Function.dtd">
<Function>
	<KnowledgeBase>
        <Title>defstruct</Title>
		<FunctionName>defstruct</FunctionName>
		<FunctionType>macro</FunctionType>
		<ArgumentTypes>Structure</ArgumentTypes>
		<DataType>Structure </DataType>
		<RelatedFunctions>defineStructure makeStructure defclass objectToStructure fieldsOf</RelatedFunctions>
        <RelatedVMInstructions>vmregObjPointer  </RelatedVMInstructions>
		<HumanKeywords>define set make object structure inherit 

                       parent object-oriented classes</HumanKeywords>
	</KnowledgeBase>
         <Description><![CDATA[
             <p> The defstruct macro creates and initializes a new object type 
                 with the specified field names.    </p>
          ]]></Description>
	<Brief>
	   <Overview><![CDATA[
		<p>The <b>defstruct</b> macro creates and initializes a new object type 

           <b>{newType}</b> with the specified field names <b>{fieldnames}</b>.  There 

           may be one or more field names.  The new type created by <b>defstruct</b>
           can inherit from another object by specifying the <b>include:</b> keyword and 

           the name of the parent object <b>{parentName}</b>.  </p>
        <p>
The defstruct macro results in the following substitution:  </p>
        <p><b> (defineStructure  newType:  include:  parentName  fieldnames....)</b></p>
        ]]></Overview>
        <Usage><![CDATA[
        <p>The <b>defstruct</b> macro and the <b>defineStructure</b> function do exactly the 
           same thing. The <b>defstruct</b> macro is a mechanism for adding user-defined types 
           to the Analytic Information Server workbench. The <b>defstruct</b> function brings the 
           conventional object-oriented paradigm to the Analytic Information Server workbench. 
           The <b>defstruct</b> describes a template for the new type object. The object is not 
           instantiated until the constructor function is invoked.  The new type can inherit 
           field names (analogous to OOP properties or members) and methods by using the 
           <b>include:</b> syntax.</p>
        ]]></Usage>
    </Brief>
	<Syntax-Structure>
	    <Expression><![CDATA[<p>(defstruct newType: include: parentName fieldnames....)</p>]]></Expression>
		<Argument>
		  <Name>newType</Name>
		  <Note><![CDATA[
		  <p>A symbolic name for the new object type</p>
          ]]></Note>
		  <AISTypes>String or Text </AISTypes>
		</Argument>
     	<Argument>
		  <Name>include:</Name>
		  <Note><![CDATA[
		  <p>An optional keyword.  If present, it must be followed by an existing object type</p>
          ]]></Note>
		  <AISTypes> </AISTypes>
		</Argument>
    	<Argument>
		  <Name>parentName</Name>
		  <Note><![CDATA[
		  <p>If the include: keyword is present, it must be followed by an existing 

             object type name</p>
          ]]></Note>
		  <AISTypes> String or Text </AISTypes>
		</Argument>
    	<Argument>
		  <Name>'fieldnames</Name>
		  <Note><![CDATA[
		  <p>One or more field names that is to be associated with the object type</p>
          ]]></Note>
		  <AISTypes> String or Text </AISTypes>
		</Argument>
		<Return><![CDATA[
	    <p>The name of the new object type (as a symbol).

        </p>
	    ]]></Return>
	</Syntax-Structure>
</Function>
