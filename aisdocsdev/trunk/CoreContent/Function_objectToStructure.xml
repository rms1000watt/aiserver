<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE Function SYSTEM "../DTD/Function.dtd">
<Function>
	<KnowledgeBase>
        <Title>objectToStructure</Title>
		<FunctionName>objectToStructure</FunctionName>
		<FunctionType>Builtin</FunctionType>
        <ArgumentTypes>Structure </ArgumentTypes>
        <DataType> Structure </DataType>
	    <RelatedFunctions>makeStructure defineStructure</RelatedFunctions>
        <RelatedVMInstructions> vmregObjPointer </RelatedVMInstructions>
		<HumanKeywords>object structure vector values keys merge </HumanKeywords>
	</KnowledgeBase>
         <Description><![CDATA[
             <p> The <b>objectToStructure</b> function converts the arguments into a 
                 Structure returning the new Structure.  </p>
          ]]></Description>
	<Brief>
	   <Overview><![CDATA[
		<p>The <b>objectToStructure</b> function converts the arguments <b>{source}</b> into 
           a Structure returning the new Structure. The <b>{source}</b> may be either a Vector 
           or a Dictionary. If there are two arguments, such as <b>{vector1}</b> and <b>{vector2}</b>, 
           the items from both vectors are paired to form a Structure.  If there are two arguments, 
           and they are a combination of Structures, Dictionaries, or Directories, the <b><i>values</b></i> of 
           the first argument are updated with the <b><i> values</i></b> of the second argument, only when the 
           <b><i>keys</i></b>  match.  If the object is already a Structure, it is returned unchanged.</p>
        ]]></Overview>
        <Usage><![CDATA[
        <p>The <b>objectToStructure</b> function is used to convert a Vector object or a 
          Dictionary object to a Structure object. The <b>objectToStructure</b> function is 
          also useful for key-based merge and update of a Structure, Dictionary, or Directory 
          from another Structure, Dictionary, Directory, or Vector. 
		</p>
        ]]></Usage>
    </Brief>
  <Syntax-Structure>
	    <Expression><![CDATA[<p><b> (objectToStructure {source}) </b></p> ]]></Expression>
    	<Argument> 
		  <Name>source</Name>
		  <Note><![CDATA[
		  <p> A Vector or Dictionary object.</p>
          ]]></Note>
		  <AISTypes>Vector Dictionary</AISTypes>
		</Argument>  
		<Return><![CDATA[ 
	    <p>A new Structure object.</p>
	    ]]></Return>    
  </Syntax-Structure>
  <Syntax-Structure>
        <Expression><![CDATA[ <p><b>  (objectToStructure {vector1} {vector2})  </b></p>]]></Expression>
	   <Argument> 
		  <Name>vector1</Name>
		  <Note><![CDATA[
		  <p> A vector object.</p>
          ]]></Note>
		  <AISTypes>Vector</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>vector2</Name>
		  <Note><![CDATA[
		  <p>A vector object.</p>
          ]]></Note>
		  <AISTypes>Vector</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>The I-th item of {vector1} is paired with the I-th item in the {vector2} 
            to form a new Structure. Each item in {vector1} must be a Symbol  and may contain 
            more items than {vector2}. If {vector1} contains more items than {vector2} then the 
            keys in the structure will be assigned a value of #void.  The new Structure object
             is returned.</p>
	    ]]></Return>    	    
  </Syntax-Structure>
  <Syntax-Structure>
        <Expression><![CDATA[<p><b> (objectToStructure {structure} {vector}) </b></p>]]></Expression>
       <Argument> 
		  <Name>structure</Name>
		  <Note><![CDATA[
		  <p> A Structure object.</p>
          ]]></Note>
		  <AISTypes>Structure</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>vector</Name>
		  <Note><![CDATA[
		  <p>A Vector object.</p>
          ]]></Note>
		  <AISTypes>Vector</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>The {structure} object is updated with the values from the {vector} object. 
           The I-th item from  {vector} is mapped to the I-th item in {structure}. 
           If {vector} contains more items than {structure}, the extra elements are ignored.
           This is a destructive update to the {structure} object. </p>
	    ]]></Return>    
  </Syntax-Structure>
  <Syntax-Structure>
        <Expression><![CDATA[<p><b>(objectToStructure {structure1} {structure2}) </b></p>
                    <p><b>(objectToStructure {structure1} {dictionary}) </b></p>
                    <p><b>(objectToStructure {structure1} {directory}) </b></p>]]></Expression>
    	<Argument> 
		  <Name>structure1</Name>
		  <Note><![CDATA[
		  <p> A Structure object to be updated.</p>
          ]]></Note>
		  <AISTypes>Structure</AISTypes>
		</Argument>  
	    <Argument> 
		  <Name>object</Name>
		  <Note><![CDATA[
		  <p> Must be a Structure, Dictionary, or Directory object. </p>
          ]]></Note>
		  <AISTypes>Structure Dictionary Directory</AISTypes>
		</Argument>  
		<Return><![CDATA[ 
	    <p>The {structure1} object is updated with the values from the {structure2}, 
           {dictionary} or {directory} object only if the key from {structure2}, etc. 
            matches a key from {structure1}. Keys that do not match are ignored.  
            This is a destructive update to the {structure1} object. </p>
	    ]]></Return>    
  </Syntax-Structure>
  <Syntax-Structure>
        <Expression><![CDATA[<p><b>(objectToStructure {dictionary1} {dictionary2}) </b></p>
                    <p><b>(objectToStructure {dictionary}  {directory}) </b></p>
                    <p><b>(objectToStructure {directory1}  {directory2}) </b></p>
                    <p><b>(objectToStructure {directory}   {dictionary})</b></p>]]></Expression>
    	<Argument> 
		  <Name>dictionary or directory</Name>
		  <Note><![CDATA[
		  <p>Must be a Dictionary or Directory object. </p>
          ]]></Note>
		  <AISTypes>Dictionary Directory</AISTypes>
		</Argument>  
	    <Argument> 
		  <Name>dictionary or directory</Name>
		  <Note><![CDATA[
		  <p>Must be a Dictionary or Directory object.</p>
          ]]></Note>
		  <AISTypes>Dictionary Directory</AISTypes>
		</Argument>  	  
		<Return><![CDATA[ 
	    <p>The keys and values of {dictionary1} object is copied to a new Structure object.  
           The new Structure is updated  with the values from the {dictionary2}, object only if 
           the key matches. If the key from {dictionary2} does not match, the new key and its 
           value is added to the new Structure. </p>
	    ]]></Return>    
	</Syntax-Structure>
</Function>
