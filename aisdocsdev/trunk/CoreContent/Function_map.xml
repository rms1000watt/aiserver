<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE Function SYSTEM "../DTD/Function.dtd">
<Function>
	<KnowledgeBase>
        <Title>map</Title>
		<FunctionName>map</FunctionName>
		<FunctionType>Builtin</FunctionType>
        <ArgumentTypes>Structure Dictionary NumMatrix Directory Vector Matrix Pair List ShortVector FltVector IntVector NumVector</ArgumentTypes>
        <DataType> Structure Dictionary Directory Vector Matrix Pair List NumMatrix FltVector ShortVector IntVector  NumVector </DataType>
	    <RelatedFunctions>mapc makeStructure makeDictionary new</RelatedFunctions>
        <RelatedVMInstructions> vmregObjPointer </RelatedVMInstructions>
		<HumanKeywords>map mapc copy process</HumanKeywords>
	</KnowledgeBase>
         <Description><![CDATA[
             <p> The <b>map</b> function applies the specified function  
             to each value in the Structure, Dictionary, Directory, Vector, Matrix, Pair or List.</p>
          ]]></Description>
	<Brief>
	   <Overview-Structure><![CDATA[
	         <p> The <b>map</b> Function applies the specified function <b>{proc}</b> 
             to each value in <b>{structure}</b>.  The <b>map</b> function returns a 
             structure containing the result of the each mapping.  The function 
             <b>{proc}</b> must be a function that requires a single argument.</p>
        ]]></Overview-Structure>
        <Overview-Dictionary><![CDATA[
	         <p> The <b>map</b> Function applies the specified function <b>{proc}</b> 
             to each value in <b>{dictionary}</b>.  The <b>map</b> function returns a 
             structure containing the result of the each mapping.  The function 
             <b>{proc}</b> must be a function that requires a single argument.</p>
        ]]></Overview-Dictionary>
        <Overview-Directory><![CDATA[
	         <p> The <b>map</b> Function applies the specified function <b>{proc}</b> 
             to each value in <b>{directory}</b>.  The <b>map</b> function returns a 
             directory containing the result of the each mapping.  The function 
             <b>{proc}</b> must be a function that requires a single argument.</p>
        ]]></Overview-Directory>
       <Overview><![CDATA[
	         <p> The <b>map</b> Function applies the specified function <b>{proc}</b> 
             to each value in <b>{vector}</b>.  The <b>map</b> function returns a 
             Vector containing the result of the each mapping.  The function 
             <b>{proc}</b> must be a function that requires a single argument.</p>
        ]]></Overview>
     <Overview-Matrix><![CDATA[
	         <p> The <b>map</b> Function applies the specified function <b>{proc}</b> 
             to each value in <b>{matrix}</b>.  The <b>map</b> function returns a 
             Matrix containing the result of the each mapping.  The function 
             <b>{proc}</b> must be a function that requires a single argument.</p>
        ]]></Overview-Matrix>
     <Overview-NumMatrix><![CDATA[
	         <p> The <b>map</b> Function applies the specified function <b>{proc}</b> 
             to each value in <b>{nummatrix}</b>.  The <b>map</b> function returns a 
             NumMatrix containing the result of the each mapping.  The function 
             <b>{proc}</b> must be a function that requires a single argument.</p>
        ]]></Overview-NumMatrix>
       <Overview-Pair><![CDATA[
	         <p> The <b>map</b> Function applies the specified function <b>{proc}</b> 
             to each value in the <b>{pair}</b>.  The <b>map</b> function returns a 
             List containing the result of the each mapping.  The function 
             <b>{proc}</b> must be a function that requires a single argument.</p>
        ]]></Overview-Pair>
       <Overview-List><![CDATA[
	         <p> The <b>map</b> Function applies the specified function <b>{proc}</b> 
             to each value in the  <b>{list}</b>.  The <b>map</b> function returns a 
             List containing the result of the each mapping.  The function 
             <b>{proc}</b> must be a function that requires a single argument.</p>
        ]]></Overview-List>
        <Usage-Structure><![CDATA[
        <p>The <b>map</b> function is a non-destructive function useful when you want 
           to apply a native or user-defined function to each member in a Structure.
           As a result, each  member of the Structure may be updated by the <b>map</b> function 
           without having to set up a loop and reference each field individually. 
           For instance, the <b>map</b> function, with arguments of <b>{proc}</b> and 
           <b>{structure}</b>, is equivalent to the following generic loop code: 	</p>
           <p><b>(loop for i from 0 until (length structure) do (proc structure[i])) </b> </p>
        ]]></Usage-Structure>
        <Usage-Dictionary><![CDATA[
        <p>The <b>map</b> function is a non-destructive function useful when you want 
           to apply a native or user-defined function to each member in a Dictionary.
           As a result, each  member of the Dictionary may be updated by the <b>map</b> function 
           without having to set up a loop and reference each field individually. 
           For instance, the <b>map</b> function, with arguments of <b>{proc}</b> and 
           <b>{dictionary}</b>, is equivalent to the following generic loop code: 	</p>
           <p><b>(loop for i from 0 until (length dictionary) do (proc dictionary[i])) </b> </p>
        ]]></Usage-Dictionary>
       <Usage-Directory><![CDATA[
        <p>The <b>map</b> function is a non-destructive function useful when you want 
           to apply a native or user-defined function to each member in a Directory.
           As a result, each  member of the Directory may be updated by the <b>map</b> function 
           without having to set up a loop and reference each field individually. 
           For instance, the <b>map</b> function, with arguments of <b>{proc}</b> and 
           <b>{directory}</b>, is equivalent to the following generic loop code: 	</p>
           <p><b>(loop for i from 0 until (length directory) do (proc directory[i])) </b> </p>
        ]]></Usage-Directory>
       <Usage><![CDATA[
        <p>The <b>map</b> function is a non-destructive function useful when you want 
           to apply a native or user-defined function to each member in a Vector.
           As a result, each  member of the Vector may be updated by the <b>map</b> function 
           without having to set up a loop and reference each field individually. 
           For instance, the <b>map</b> function, with arguments of <b>{proc}</b> and 
           <b>{vector}</b>, is equivalent to the following generic loop code: 	</p>
           <p><b>(loop for i from 0 until (length vector) do (proc vector[i])) </b> </p>
        ]]></Usage>
       <Usage-Pair><![CDATA[
        <p>The <b>map</b> function is a non-destructive function useful when you want 
           to apply a native or user-defined function to each element in a  Pair.
           The <b>map</b> function is a shortcut to  updating elements in a Pair or List  
           without having to set up a loop and reference each element individually.  
           For instance, the <b>map</b> function, with arguments of <b>{proc}</b> and <b>{list}</b>, 
           is equivalent to the following generic loop code:
           <p><b>(loop for i from 0 until (length list) do (proc list[i])) </b> </p>
        ]]></Usage-Pair>
       <Usage-List><![CDATA[
        <p>The <b>map</b> function is a non-destructive function useful when you want 
           to apply a native or user-defined function to each element in a List.
           The <b>map</b> function is a shortcut to  updating elements in a Pair or List  
           without having to set up a loop and reference each element individually.  
           For instance, the <b>map</b> function, with arguments of <b>{proc}</b> and <b>{list}</b>, 
           is equivalent to the following generic loop code:
           <p><b>(loop for i from 0 until (length list) do (proc list[i])) </b> </p>
        ]]></Usage-List>
       <Usage-Matrix><![CDATA[
        <p>The <b>map</b> function is a non-destructive function useful when you want 
           to apply a native or user-defined function to each member in a Matrix.
           As a result, each  Matrix element may be updated by the <b>map</b> function 
           without having to set up a loop and reference each field individually. 
           For instance, the <b>map</b> function, with arguments of <b>{proc}</b> and 
           <b>{matrix}</b>, is equivalent to the following generic loop code: 	</p>
           <p><b>(loop for i from 0 until (length matrix) do (proc matrix[i])) </b> </p>
        ]]></Usage-Matrix>
       <Usage-NumMatrix><![CDATA[
        <p>The <b>map</b> function is a non-destructive function useful when you want 
           to apply a native or user-defined function to each member in a NumMatrix.
           As a result, each  NumMatrix element may be updated by the <b>map</b> function 
           without having to set up a loop and reference each field individually. 
           For instance, the <b>map</b> function, with arguments of <b>{proc}</b> and 
           <b>{matrix}</b>, is equivalent to the following generic loop code: 	</p>
           <p><b>(loop for i from 0 until (length matrix) do (proc matrix[i])) </b> </p>
        ]]></Usage-NumMatrix>
    </Brief>
	<Syntax-Structure>
	    <Expression><![CDATA[<p> (map proc structure)</p>]]></Expression>
		<Argument>
		  <Name>proc </Name>
		  <Note><![CDATA[
		  <p> A function requiring a single argument. </p>
          ]]></Note>
		  <AISTypes>Function </AISTypes>
		</Argument>
    	<Argument> 
		  <Name>structure </Name>
		  <Note><![CDATA[
		  <p> Structure containing the argument values for the function {proc} </p>
          ]]></Note>
		  <AISTypes>Structure </AISTypes>
		</Argument>
		<Return><![CDATA[
	    <p>A new structure object containing values that have the values updated by 
           applying the map function to each value.  The symbolic keys are copied as is 
           to the new structure object.
        </p>
	    ]]></Return>
	</Syntax-Structure>
	<Syntax-Dictionary>
	    <Expression><![CDATA[<p> (map proc dictionary)</p>]]></Expression>
		<Argument> 
		  <Name>proc </Name>
		  <Note><![CDATA[
		  <p> A function requiring a single argument. </p>
          ]]></Note>
		  <AISTypes>Function </AISTypes>
		</Argument>
    	<Argument> 
		  <Name>structure </Name>
		  <Note><![CDATA[
		  <p> Dictionary containing the argument values for the function {proc} </p>
          ]]></Note>
		  <AISTypes>Dictionary </AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>A new dictionary object containing values that have the values updated by 
           applying the map function to each value.  The symbolic keys are copied as is 
           to the new dictionary object.
        </p>
	    ]]></Return>   
	</Syntax-Dictionary>
	<Syntax>
	    <Expression><![CDATA[<p> (map proc vector)</p>]]></Expression>
		<Argument> 
		  <Name>proc </Name>
		  <Note><![CDATA[
		  <p> A function requiring a single argument. </p>
          ]]></Note>
		  <AISTypes>Function </AISTypes>
		</Argument>
    	<Argument> 
		  <Name>vector </Name>
		  <Note><![CDATA[
		  <p> Vector containing the argument values for the function {proc} </p>
          ]]></Note>
		  <AISTypes>Vector FltVector ShortVector IntVector  NumVector </AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>A new vector object containing values that have the values updated by 
           applying the map function to each value.   
        </p>
	    ]]></Return>   
	</Syntax>
	<Syntax-Matrix>
	    <Expression><![CDATA[<p> (map proc matrix)</p>]]></Expression>
		<Argument> 
		  <Name>proc </Name>
		  <Note><![CDATA[
		  <p> A function requiring a single argument. </p>
          ]]></Note>
		  <AISTypes>Function </AISTypes>
		</Argument>
    	<Argument> 
		  <Name>matrix </Name>
		  <Note><![CDATA[
		  <p> Matrix containing the argument values for the function {proc} </p>
          ]]></Note>
		  <AISTypes>Matrix </AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>A new matrix object containing values that have the values updated by 
           applying the map function to each value.   
        </p>
	    ]]></Return>   
	</Syntax-Matrix>
	<Syntax-NumMatrix>
	    <Expression><![CDATA[<p> (map proc nummatrix)</p>]]></Expression>
		<Argument> 
		  <Name>proc </Name>
		  <Note><![CDATA[
		  <p> A function requiring a single argument. </p>
          ]]></Note>
		  <AISTypes>Function </AISTypes>
		</Argument>
    	<Argument> 
		  <Name>nummatrix </Name>
		  <Note><![CDATA[
		  <p> NumMatrix containing the argument values for the function {proc} </p>
          ]]></Note>
		  <AISTypes>NumMatrix </AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>A new nummatrix object containing values that have the values updated by 
           applying the map function to each value.   
        </p>
	    ]]></Return>   
	</Syntax-NumMatrix>
	<Syntax-Pair>
	    <Expression><![CDATA[<p> (map proc pair)</p>]]></Expression>
		<Argument> 
		  <Name>proc </Name>
		  <Note><![CDATA[
		  <p> A function requiring a single argument. </p>
          ]]></Note>
		  <AISTypes>Function </AISTypes>
		</Argument>
    	<Argument> 
		  <Name>pair </Name>
		  <Note><![CDATA[
		  <p> A Pair containing the argument values for the function {proc} </p>
          ]]></Note>
		  <AISTypes>Pair</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>A new Pair object containing values that have the values updated by 
           applying the map function to each value.    
        </p>
	    ]]></Return>   
	</Syntax-Pair>
	<Syntax-List>
	    <Expression><![CDATA[ <p> (map proc list)</p>]]></Expression>                  
		<Argument> 
		  <Name>proc </Name>
		  <Note><![CDATA[
		  <p> A function requiring a single argument. </p>
          ]]></Note>
		  <AISTypes>Function </AISTypes>
		</Argument>
    	<Argument> 
		  <Name> list </Name>
		  <Note><![CDATA[
		  <p> A  List containing the argument values for the function {proc} </p>
          ]]></Note>
		  <AISTypes>  List </AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>A new  List object containing values that have the values updated by 
           applying the map function to each value.    
        </p>
	    ]]></Return>   
	</Syntax-List>
</Function>
