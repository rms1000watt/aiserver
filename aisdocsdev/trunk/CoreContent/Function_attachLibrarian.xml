<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE Function SYSTEM "../DTD/Function.dtd">
<Function>
	<KnowledgeBase>
        <Title>attachLibrarian</Title>
		<FunctionName>attachLibrarian</FunctionName>
		<FunctionType>Builtin</FunctionType>
        <ArgumentTypes>ObjectRepository Lambda</ArgumentTypes>        
        <DataType> ObjectRepository</DataType>
	    <RelatedFunctions>detachLibrarian refLibrarian new</RelatedFunctions>
        <RelatedVMInstructions> none </RelatedVMInstructions>
		<HumanKeywords>librarian Lambda associative</HumanKeywords>
	</KnowledgeBase>
         <Description><![CDATA[ 
             <p> The <b>attachLibrarian </b> function attaches the specified librarian Lambda to the specified 
             ObjectRepository.  </p>
          ]]></Description>
	<Brief>
	   <Overview><![CDATA[
		<p>The <b>attachLibrarian </b> function attaches the specified librarian Lambda <b>{anLambda}</b> to the specified 
		ObjectRepository <b>{aGor}</b>. Once the <b>attachLibrarian</b> function returns, the ObjectRepository is no 
		longer a simple associative memory. The database schema and the entire behavior of the ObjectRepository is now 
		completely determined by the attached librarian Lambda. Furthermore, multiple librarian Lambdas may interact, 
		controlling multiple ObjectRepositories, thus creating very large object databases and/or distributed object 
		databases.</p> 
		<p>Normally, when an ObjectRepository is opened (see the <b>new</b> function), an ObjectRepository object is 
		returned to the caller. This ObjectRepository object behaves, as previously described, like a simple associative 
		memory. However, once a librarian Lambda is attached to an ObjectRepository, when an ObjectRepository is opened 
		(see the <b>new</b> function), the librarian Lambda object (not the ObjectRepository object) is returned to the 
		caller.   </p>              
		<p>Once attached to the ObjectRepository, the librarian Lambda always resides on disk in the ObjectRepository. 
		Any Analytic Information Server server opening the ObjectRepository talks with the attached librarian Lambda, not 
		with the ObjectRepository directly. The librarian Lambda continues to treat the ObjectRepository as a simple 
		associative memory, but the other intelligent Lambdas, end users, and Analytic Information Server servers see the 
		ObjectRepository according to the database schema implemented by the attached librarian Lambda. </p>
        ]]></Overview>
        <Usage><![CDATA[
        <p>Use the <b>attachLibrarian</b> function to return the result the attached libriarian Lambda and not the Object Repository.
		</p>
        ]]></Usage>
    </Brief>
    <Syntax>
	    <Expression><![CDATA[<p>(attachLibrarian aGor anLambda) </p>]]></Expression>
		<Argument> 
		  <Name>aGor</Name>
		  <Note><![CDATA[
		  <p>The ObjectRepository whose librarian Lambda is to receive the command string.</p>
          ]]></Note>
		  <AISTypes>ObjectRepository</AISTypes>
		</Argument>    
		<Argument> 
		  <Name>anLambda</Name>
		  <Note><![CDATA[
		  <p>The librarian Lambda to be attached to the ObjectRepository.</p>
          ]]></Note>
		  <AISTypes>Lambda</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Determined by the librarian Lambda.
        </p>
	    ]]></Return>   
	</Syntax>
</Function>
