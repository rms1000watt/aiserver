<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE Example SYSTEM "../DTD/Example.dtd">
<Example>
	<KnowledgeBase>  
		<Title>Example String addMethod 001</Title>  
		<Template>Example</Template> 
		<FunctionKeywords>addMethod</FunctionKeywords>
		<TypeKeywords>String Text Dictionary</TypeKeywords>	
		<RelatedFunctions>defmethod send methodsOf</RelatedFunctions>
		<Language>Lisp</Language>
		<HumanKeywords>method message messageName</HumanKeywords>
	</KnowledgeBase>
	<Description><![CDATA[  This example first defines the method <b>EatSpace</b>. It then invokes the
                  <b>addMethod</b> function with the arguments <b>String:</b>, <b>EatSpace</b> and
                  <b>Eat:</b>. These are the type, method name and message name respectively.
                  The <b>addMethod</b> function binds the method <b>EatSpace</b> to
                  the <b>String</b> Methods Dictionary and makes method <b>EatSpace</b> 
                  respond to the message <b>Eat</b>.
	]]></Description>
	<Syntax> 
	<Expression><![CDATA[
    <sc>(defun EatSpace ( S ) <br>
    vars: (NewString, i, j, len)<br>
    (setq NewString (new String: ""))<br>
    (setq j 0)<br>
    (setq len (length S))<br>
    (loop for i from 0 until len do<br>
         ;;Move the character to the buffer only if it isn't a space <br>
         (if (&#60&#62 S[i] #\space)        <br>                            
             (begin<br>
             (setq NewString[j] S[i]) <br>
             (setq j (add1 j ))<br>
              )   ;; end begin <br>
          )   ;; end if <br>
    )   ;; end loop <br>
   NewString)  ;; End EatSpace  <br>
   ]]></Expression>  
   <Note><![CDATA[ Define a method named <b>EatSpace</b> which will removes spaces from a  String. 
   ]]></Note> 
   <Returns><![CDATA[ modified String ]]></Returns>
   <Expression><![CDATA[<sc>(addMethod  String: Eat: EatSpace )  </sc> ]]></Expression>
   <Note><![CDATA[ Add the method EatSpace which responds to the message Eat:  to the String Methods 
          Dictionary.
   ]]></Note>
   <Returns><![CDATA[#&#60Dictionary 12345&#62]]></Returns>
   <Expression><![CDATA[<sc>(setq S (new String: "Hello World"  ))  </sc> ]]></Expression>
   <Note><![CDATA[ Define a  String  that contains some spaces
   ]]></Note>
   <Returns><![CDATA[Hello World]]></Returns>
   <Expression><![CDATA[<sc>(setq Y  (send  Eat:  S)) </sc> ]]></Expression>
   <Note><![CDATA[ Invoke the method named <b>Eat</b> to remove spaces from a String
   ]]></Note>
   <Returns><![CDATA[HelloWorld]]></Returns>
   <Expression><![CDATA[<sc>(setq Y (Eat:  S))   </sc> ]]></Expression>
   <Note><![CDATA[ The method can be invoked simply by name:
   ]]></Note>
   <Returns><![CDATA[HelloWorld]]></Returns>
   <Hints><![CDATA[
        <p>It is important to remember that String constants that are 9 characters or less are by 
           default assigned a  type of Text unless explicitly assigned to a String Symbol variable.  
           All functions that are applicable to Strings (<b>append, mid, right, etc.</b>)  are 
           applicable Text constants as well.   The fact that a constant  is a Text or String is 
           normally transparent to the user.</p>
        <p>The Methods Dictionary exists for both the String type and the Text type.  The constant 
           "Hello"  would by default be assigned as a Text constant if the following Lisp statement was used:</p>
        <p><b>(setq SText "Hello")</p></b>
        <p>The method <b>Eat:</b> which was installed as a method for the String type by the <b>addMethod</b> 
           function would not be able to the understand the following Lisp instruction: </p>
        <p><b>(Eat: SText)</b></p>
        <p>Since Stext is a Text String, the Lisp compiler will go the Methods Dictionary for the 
           Text data type and search for the Eat: method and will fail, since the <b>Eat: method</b> 
           was installed in the String data type. See the <b>send</b> function.</p>
    ]]></Hints>
</Syntax>
</Example>
