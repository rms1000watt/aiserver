<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE Example SYSTEM "../DTD/Example.dtd">
<Example>
	<KnowledgeBase>
		<Title>Example List send 020</Title>
		<Template>Example</Template>
		<FunctionKeywords>addMethod</FunctionKeywords>
		<TypeKeywords> Dictionary Symbol</TypeKeywords>
		<RelatedFunctions>defmethod send methodsOf</RelatedFunctions>
		<Language>Lisp</Language>
		<HumanKeywords>method message messageName</HumanKeywords>
	</KnowledgeBase>
	<Description><![CDATA[ This example uses the added method <b>IncAll </b> which will increment 


                each value in a List. It then calls the <b>send</b> functionto invoke the added method.


	]]></Description>
	<Syntax>
	<Expression><![CDATA[<sc>(addMethod  List: IncAll:  (lambda  (s)  (map add1  s)))     </sc>]]></Expression>
    <Note><![CDATA[ Add a method named IncAll which will increments each value in a List.


    ]]></Note>
    <Returns><![CDATA[ #&#60Dictionary 123456&#62]]></Returns>
    <Expression><![CDATA[<sc>(define P '(100 200 250 150 )  )          </sc> ]]></Expression>
    <Note><![CDATA[Define a List that contains Pairs of numbers]]></Note>
    <Returns><![CDATA[#&#60Pair 123456&#62]]></Returns>
    <Expression><![CDATA[<sc>(setq Y  (send IncAll: P))     </sc> ]]></Expression>
    <Note><![CDATA[ Invoke the method named IncAll to increment all the Pair values in the List by 1. The last


           value in the List is displayed.]]></Note>
    <Returns><![CDATA[151]]></Returns>
    <Expression><![CDATA[<sc>(setq Y (IncAll:  P))       </sc> ]]></Expression>
    <Note><![CDATA[The method can be invoked simply by name:]]></Note>
    <Returns><![CDATA[151]]></Returns>
    <Expression><![CDATA[<sc>Y[0]    </sc> ]]></Expression>
    <Note><![CDATA[The contents of the List can be viewed using the index.]]></Note>
    <Returns><![CDATA[101]]></Returns>
    <Expression><![CDATA[<sc>Y[1]    </sc> ]]></Expression>
    <Note><![CDATA[none]]></Note>
    <Returns><![CDATA[201]]></Returns>
    <Expression><![CDATA[<sc>Y[2]    </sc> ]]></Expression>
    <Note><![CDATA[none]]></Note>
    <Returns><![CDATA[251]]></Returns>
    <Expression><![CDATA[<sc>Y[3]    </sc> ]]></Expression>
    <Note><![CDATA[none]]></Note>
    <Returns><![CDATA[151]]></Returns>
    <Hints><![CDATA[
    <p>Dissecting the <b>send</b> command involves understanding the methods dictionary 
          of any Analytic Information Server type. In general the <b>send</b> command is translated 
          as a reference into the methods dictionary:</p>
          <p><b>((ref (methodsOf (type object)) methodName  object))</b></p>
          <p> The statement : </p>
          <p><b>(send IncAll: P) </b> </p>
          <p>is translated into </p>
          <p><b>((ref (methodsOf (type P)) IncAll: ) P) </b></p>
          <p> Each statement segment results in: </p>
          <table>
             <tr><td width=60%><b> (type P)        </b></td>
                  <td width=40%>Returns: <b> List  </b></td></tr>
             <tr><td width=60%><b>  (methodsOf (List:))    </b></td>
                  <td width=40%>Returns: <b> #&#60Dictionary 123456&#62  </b></td></tr>
             <tr><td width=60%><b> (ref (#&#60Dictionary 123456&#62) IncAll: )    </b></td>
                  <td width=40%>Returns: <b> #&#60Lambda 123456&#62  </b></td></tr>
             <tr><td width=60%><b> ( #&#60Lambda 123456&#62  monthlyBills)       </b></td>
                  <td width=40%>Returns: <b> 3200 </b></td></tr>
          </table>
    ]]></Hints>
</Syntax>
</Example>
