<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE Function SYSTEM "../DTD/Function.dtd">
<Function>
	<KnowledgeBase>
        <Title>send</Title>
		<FunctionName>send</FunctionName>
		<FunctionType>Special Form</FunctionType>
		<ArgumentTypes>String Symbol Structure Directory Vector Brick Date ShortVector Lambda ObjectRepository
                     Pair List Matrix Text Dictionary Void Character Number Function NumMatrix</ArgumentTypes>            
		<DataType>String Symbol Structure Dictionary Directory Vector Lambda FltVector ShortVector IntVector NumVector BitVector Pair List Matrix CpxVector Brick Void Character Number Date Function  NumMatrix ObjectRepository Boolean</DataType>
		<RelatedFunctions>defmethod addMethod methodsOf</RelatedFunctions>
        <RelatedVMInstructions> vmsetdickey vmrefdicvalue </RelatedVMInstructions>
		<HumanKeywords>method message type methodName send</HumanKeywords>
	</KnowledgeBase>
         <Description><![CDATA[ 
             <p> The  <b>send</b>  special form invokes a method of an object.   </p>
          ]]></Description>
	<Brief>
	   <Overview><![CDATA[
		<p>The  <b>send</b>  special form invokes a method of an object.  
           The methods  invocation may include   0  or more arguments. </p>
        ]]></Overview>
        <Usage><![CDATA[
        <p>The <b>send</b> special form can only be used on a method that has been installed 
          in the Methods Dictionary for an object via the <b>defmethod</b> macro or the 
          <b>addMethod</b> function.  The Methods Dictionary  for any Analytic Information Server 
          native type or object contains an arbitrary number of method bindings, i.e. method 
          name and Lambda pairs.   The <b>send</b> Special Form causes a lookup of the method 
          name argument in the methods dictionary.  If the name is found, the Lambda attached
          to the name will be invoked.   
		</p>
        ]]></Usage>
    </Brief>
	<Syntax>
	    <Expression><![CDATA[<p>(send methodName object)</p>
                    <p>(send methodName object arg1 arg2...)</p>
                    <p> (methodName object)</p>
                    <p> (methodName object arg1  arg2 ...) </p>
       ]]></Expression>
		<Argument> 
		  <Name>methodName</Name>
		  <Note><![CDATA[
		  <p> The name of the method to be invoked</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Argument> 
		  <Name>object</Name>
		  <Note><![CDATA[
		  <p>The target object (the object owning the method that was specified in the 
             methodName argument</p>
          ]]></Note>
		  <AISTypes>  String Symbol Vector  Structure Dictionary Number ObjectRepository
                      Pair List Brick Directory Matrix Void Character Date</AISTypes>   
		</Argument>     
		<Return><![CDATA[ 
	    <p>Dependent on the method invoked</p>
	    ]]></Return>   
	</Syntax>
</Function>
