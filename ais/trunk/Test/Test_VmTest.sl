;;/**********************************************************************************
;;    Copyright (C) 2008 Investment Science Corp.
;;
;;    This program is free software: you can redistribute it and/or modify
;;    it under the terms of the GNU General Public License as published by
;;    the Free Software Foundation, either version 3 of the License, or
;;    any later version.
;;
;;    This program is distributed in the hope that it will be useful,
;;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;    GNU General Public License for more details.
;;
;;    You should have received a copy of the GNU General Public License
;;    along with this program.  If not, see <http://www.gnu.org/licenses/>.
;;
;;***********************************************************************************
;;
;;  
;;  Title:    vmtest Autotest
;;
;;  Author:   Michael F. Korns, Tim May
;;
;;  Project:  AIS Regression Suite
;;
;;  Notes:    A subset of the vmcompiler is acceptance tested in this test script.
;;            Transcendental functions are not tested at this time.
;;
;;  Files:    RegTest.sl
;;

;#memory=500
;#memoryObjectHeaders=100
(runScript "RegTest.sl")
(testStart "Test_VmTest.sl")
 
(defun l(v) (lisp v))
(defun m(v) (morph v))
(defun de(v) (decompile v))
(defun dis(v) (disassemble v))
(defun af(v) (attachFormula v))
(defun ml (theInput) (morph (lisp theInput)))
(defun vmc (theInput ) (compile (morph (lisp theInput))))
(defun ins() (inspect _currentWorkspace))

;;  The VmScript diagnostic report function for this test script
(setq diagnostic writeln)

;;  The VmScript test function for this test script

(defun lw () 
 (l (ref (get-window scriptName) 'window))
)

(defun mlw () 
 (ml (ref (get-window scriptName) 'window))
)

(defun et (evalTxt result) 
 (equal (eval evalTxt) result )
)

;; *******************************************************************
;; name:     lispDotProduct
;; *******************************************************************
(define (lispDotProduct X Y)
    regs:(i k n N m M Number:y NumPointer:ap NumPointer:sp)
    vars:(x)
    (vmregObjLength X N)
    (vmregObjLength Y M)
    (if (<> N M) (error "lispDotProduct: both vectors must have the same length"))
    (setq ap X)
    (setq sp Y)
    (setq n (offset X 1))
    (vmvecSetPointers ap sp sp)
    (vmvecSetIncrements n n n)
    (vmvecNumScalar dot: N y)
    y)

;; *******************************************************************
;; name:     vectorSum
;; *******************************************************************
(define (vectorSum X)
    regs:(i k n N m M (Number:y) NumPointer:ap NumPointer:sp)
    vars:(x)
    (vmregObjLength X N)
    (setq ap X)
    (setq n (offset X 1))
    (vmvecSetPointers ap ap ap)
    (vmvecSetIncrements n n n)
    (vmvecNumScalar sum: N y)
    y)

;; *******************************************************************
;; name:     vectorAdd
;; *******************************************************************
(define (vectorAdd X Y)
    regs:(i k K n N m M Number:y 
          NumPointer:ap NumPointer:sp NumPointer:tp
          )
    vars:(x Z)
    (vmregObjLength X N)
    (vmregObjLength Y M)
    (if (<> N M) (error "vectorAdd: both vectors must have the same length"))
    (setq Z (new Vector: number: N))
    (setq ap X)
    (setq sp Y)
    (setq tp Z)
    (setq n (offset X 1))
    (vmvecSetPointers ap sp tp)
    (vmvecSetIncrements n n n)
    (vmvecNumVector add: N)
    Z)

;; *******************************************************************
;; name:     vectorSub
;; *******************************************************************
(define (vectorSub X Y)
    regs:(i k K n N m M Number:y 
          NumPointer:ap NumPointer:sp NumPointer:tp
          )
    vars:(x Z)
    (vmregObjLength X N)
    (vmregObjLength Y M)
    (if (<> N M) (error "vectorSub: both vectors must have the same length"))
    (setq Z (new Vector: number: N))
    (setq ap X)
    (setq sp Y)
    (setq tp Z)
    (setq n (offset X 1))
    (vmvecSetPointers ap sp tp)
    (vmvecSetIncrements n n n)
    (vmvecNumVector sub: N)
    Z)

;; *******************************************************************
;; name:     vectorMul
;; *******************************************************************
(define (vectorMul X Y)
    regs:(i k K n N m M Number:y 
          NumPointer:ap NumPointer:sp NumPointer:tp
          )
    vars:(x Z)
    (vmregObjLength X N)
    (vmregObjLength Y M)
    (if (<> N M) (error "vectorMul: both vectors must have the same length"))
    (setq Z (new Vector: number: N))
    (setq ap X)
    (setq sp Y)
    (setq tp Z)
    (setq n (offset X 1))
    (vmvecSetPointers ap sp tp)
    (vmvecSetIncrements n n n)
    (vmvecNumVector mul: N)
    Z)

;; *******************************************************************
;; name:     vectorDis
;; *******************************************************************
(define (vectorDis X Y)
    regs:(i k K n N m M Number:y 
          NumPointer:ap NumPointer:sp NumPointer:tp
          )
    vars:(x Z)
    (vmregObjLength X N)
    (vmregObjLength Y M)
    (if (<> N M) (error "vectorDis: both vectors must have the same length"))
    (setq Z (new Vector: number: N))
    (setq ap X)
    (setq sp Y)
    (setq tp Z)
    (setq n (offset X 1))
    (vmvecSetPointers ap sp tp)
    (vmvecSetIncrements n n n)
    (vmvecNumScalar dis: N y)
    y)

;; *******************************************************************
;; name:     vectorDiv
;; *******************************************************************
(define (vectorDiv X Y)
    regs:(i k K n N m M Number:y 
          NumPointer:ap NumPointer:sp NumPointer:tp
          )
    vars:(x Z)
    (vmregObjLength X N)
    (vmregObjLength Y M)
    (if (<> N M) (error "vectorDiv: both vectors must have the same length"))
    (setq Z (new Vector: number: N))
    (setq ap X)
    (setq sp Y)
    (setq tp Z)
    (setq n (offset X 1))
    (vmvecSetPointers ap sp tp)
    (vmvecSetIncrements n n n)
    (vmvecNumVector div: N)
    Z)

;; *******************************************************************
;; name:     vectorMov
;; *******************************************************************
(define (vectorMov X)
    regs:(i k K n N m M Number:y 
          NumPointer:ap  NumPointer:sp NumPointer:tp
          )
    vars:(x Z)
    (vmregObjLength X N)
    (setq Z (new Vector: number: N))
    (setq sp X)
    (setq tp Z)
    (setq n (offset X 1))
    (vmvecSetPointers sp sp tp)
    (vmvecSetIncrements n n n)
    (vmvecNumVector mov: N)
    Z)

;; *******************************************************************
;; name:     vectorSwp
;; *******************************************************************
(define (vectorSwp X Z)
    regs:(i k K n N m M (Number:y) 
          (NumPointer:ap) (NumPointer:sp) (NumPointer:tp)
          )
    vars:(x)
    (vmregObjLength X N)
    (setq sp X)
    (setq tp Z)
    (setq n (offset X 1))
    (vmvecSetPointers sp sp tp)
    (vmvecSetIncrements n n n)
    (vmvecNumVector swp: N)
    Z)

;; *******************************************************************
;; name:     vectorMove
;; *******************************************************************
(defun vectorMove(NumVector:X)
    regs:(i (k 0) K n N m M (Number:y) 
          (NumPointer:ap) (NumPointer:sp) (NumPointer:tp)
          )
    vars:(Y x)
    (vmregObjLength X N)
    (setq Y (new Vector: number: N))
    (setq ap X)
    (setq sp Y)
    (setq n (offset X 1))
    (vmvecSetPointers ap sp sp)
    (vmvecSetIncrements n n n)
    (vmvecInitialize source: N)
    ;(vmdivr 1 1 x)
    (vmvecPush Number: argument:)
    (vmvecPop Number: source:)
    (vmvecLoop)
    Y)

;; *******************************************************************
;; name:     vectorAddNumber
;; *******************************************************************
(defun vectorAddNumber(Number:x Number:y)
    regs:(Number:n Number:m Number:z)
    (setq n x)
    (setq m y)
    (vmvecPushNumber n)
    (vmvecPushNumber m)
    (vmvecBinary add:)
    (vmvecUnary dec:)
    (vmvecPopNumber z)
    z)

;; *******************************************************************
;; name:     vectorSwap
;; *******************************************************************
(defun vectorSwap(FltVector:X FltVector:Y)
    regs:(i (k 0) K n N m M Number:y 
          (FloatPointer:ap) (FloatPointer:sp) (FloatPointer:tp)
          )
    vars:(Y x)
    (vmregObjLength X N)
    (setq ap X)
    (setq sp Y)
    (setq n (offset X 1))
    (vmvecSetPointers ap sp sp)
    (vmvecSetIncrements n n n)
    (vmvecInitialize source: N)
    ;(vmdivr 1 1 x)
    (vmvecPush Float: argument:)
    (vmvecPush Float: source:)
    (vmvecSwapCC le:)
    (vmvecPop Float: source:)
    (vmvecPop Float: argument:)
    (vmvecLoop)
    Y)

;; ******************************
;; Eval and Define instructions::
;; ******************************

(setq gv 1)

(define vms (vmc "(+ 1 2 3 4 5)"))
(testit "(eval vms)" 15)

(define vms (vmc "(+ (+ (+ (+ (+ 1 1) 1) 1) 1) 1)"))
(testit "(eval vms)" 6)

(define vms (vmc "(+ (+ 1 1) (+ 1 1) (+ 1 1) (+ 1 1) (+ 1 1) )"))
(testit "(eval vms)" 10)

(define vms (vmc "(+ 1 2 3 4 5 (+ 1 2 3 4 5))"))
(testit "(eval vms)" 30)

(define vms (vmc "(cond ((< 1 2) 1))"))
(testit "(eval vms)" 1)

(define vms (vmc "(cond (true 2))"))
(testit "(eval vms)" 2)

(define vms (vmc "(cond ((< 1 2) 2 3))"))
(testit "(eval vms)" 3)

(define vms (vmc "(loop for x from 0 to 10 by 1 do 0 )"))
(testit "(eval vms)" 11)

(define vms (vmc "(define x 0) (define repeats 10) (while (< x repeats)  (define x (+ x 1)))"))
(testit "(vms)" false)

(define vms (vmc "(defun foo (x) (+ 1 x))"))
(eval vms)
(testit "(foo 1)" 2)

(define vms (vmc "(defun foo (x) vars: ( (v 1) ) (+ 1 x v))"))
(eval vms)
(testit "(foo 1)" 3)

(define vms (vmc "(defun foo (x) pvars: ( (pv 1)) (+ 1 x pv))"))
(eval vms)
(testit "(foo 1)" 3)

(define vms (vmc "(defun foo (x) pvars: ( (pv 1) (pv2 1)) (+ 1 x pv pv2))"))
(eval vms)
(testit "(foo 1)" 4)

(define vms (vmc "(defun foo (x) pvars: (( pv 1)) (+ 1 x pv gv ))"))
(eval vms)
(testit "(foo 1 )" 4)

(define vms (vmc "(defun foo (x) vars: ( (v 1)) pvars: ((pv 1)) (+ 1 x v pv))"))
(eval vms)
(testit "(foo 1)" 4)

(define vms (vmc "(defun foo (x) vars: ((v1 1)( v2 2)) pvars: (( pv1 1)( pv2 2)) (+ 1 x v1 v2 pv1 pv2))"))
(eval vms)
(testit "(foo 1)" 8)

(define vms (vmc "(define foo )"))
(testit "(eval vms)" #void)

(define vms (vmc "(define foo 123)"))
(testit "(eval vms)" 123)

(define vms (vmc "(define foo (+ 1 2 3))"))
(testit "(eval vms)" 6)

(define vms (vmc "(define foo (if true 1 0))"))
(testit "(eval vms)" 1)

(define vms (vmc "(define foo (+ 1 (define bar 1)))"))
(testit "(eval vms)" 2)

(define vms (vmc "(and  1  2  3  4  5)"))
(testit "(eval vms)" false)

(define vms (vmc "(and  (=  12  12)  (>  2  1))"))
(testit "(eval vms)" true)

(define vms (vmc "(and  (=  24  24)  (<  1  1))"))
(testit "(eval vms)" false)

(define vms (vmc "(and)"))
(testit "(eval vms)" true)

(define vms (vmc "(or  (=  12  12)  (>  2  1))"))
(testit "(eval vms)" true)

(define vms (vmc "(or (=  24  24)  (<  1  1))"))
(testit "(eval vms)" true)

(define vms (vmc "(or  1  2  3  4  5)"))
(testit "(eval vms)" false)

(define vms (vmc "(or)"))
(testit "(eval vms)" false)

(define vms (vmc "(let  ((X  2)  (Y  3) )  (*  X  Y)(+  X  Y))"))
(testit "(eval vms)" 5)

(define vms (vmc "(defun foo (...) (argCount))"))
(eval vms)
(testit "(foo 1 2 3 4)" 4)

(defmacro plus(x y) (+ x y))
(testit "(plus 12 7)" 19)

(testit "(plus (plus 3 4) 12)" 19)

(setq test (makeVector 2))
(setq test[0] +)
(setq test[1] -)

(testit "((if (< 3 2) test[0] test[1]) 100 1000)" -900)

(define vms (vmc "(defun foo (c1 c2) (cadd c1 c2))"))
(eval vms)
(testit "(foo #\\1 1)" #\2)

(define vms (vmc "(defun foo (c1 c2) (csub c1 c2))"))
(eval vms)
(testit "(foo #\\2 1)" #\1)
     
;; ****************************************
;; Strongly typed arithmetic instructions::
;; ****************************************
      
(testit "((defun testMe() vars:((x 10) (y 20) z) (vmiadd x y z)))" 30)

(testit "((defun testMe() vars:((x 1) (y 1.2) z) (vmaddn x y z)))" 2.2)

(testit "((defun testMe() vars:((x 65) (y 32) z) (vmcadd x y z)))" #\a)

(testit "((defun testMe() vars:((x 65.1) (y 32.2) z) (vmnadd x y z)))" 97.3)

(testit "((defun testMe() vars:((x 10) (y 20) z) (vmisub x y z)))" 10)

(testit "((defun testMe() vars:((x 2) (y 10.3) z) (vmsubn x y z)))" 8.3)

(testit "((defun testMe() vars:((x 32) (y 97) z) (vmcsub x y z)))" #\A)

(testit "((defun testMe() vars:((x 32.2) (y 97.3) z) (vmnsub x y z)))" 65.1)

(testit "((defun testMe() vars:((x 7) (y 3) z) (vmiand x y z)))" 3)

(testit "((defun testMe() vars:((x 2) (y 1) z) (vmiandb x y z)))" 1)

(testit "((defun testMe() vars:((x 4) (y 3) z) (vmior x y z)))" 7)

(testit "((defun testMe() vars:((x 0) (y 1) z) (vmiorb x y z)))" 0)

(testit "((defun testMe() vars:((x 4) (y 3) z) (vmixor x y z)))" 7)

(testit "((defun testMe() vars:((x 0) (y 1) z) (vmixorb x y z)))" 0)

(testit "((defun testMe() vars:((x 10) (y 20) z) (vmidiv x y z)))" 2)

(testit "((defun testMe() vars:((x 2) (y 2.2) z) (vmdivn x y z)))" 1.1)

(testit "((defun testMe() vars:((x 2) (y 130) z) (vmcdiv x y z)))" #\A)

(testit "((defun testMe() vars:((x 3.0) (y 120.3) z) (vmndiv x y z)))" 40.1)

(testit "((defun testMe() vars:((x 10) (y 20) z) (vmimul x y z)))" 200)

(testit "((defun testMe() vars:((x 2) (y 1.3) z) (vmmuln x y z)))" 2.6)

(testit "((defun testMe() vars:((x 2) (y 33) z) (vmcmul x y z)))" #\B)

(testit "((defun testMe() vars:((x 3.0) (y 120.3) z) (vmnmul x y z)))" 360.9)

(testit "((defun testMe() vars:((x 10) (y 11) z) (vmidivr x y z)))" 1)

(testit "((defun testMe() vars:((x 2) z) (vmmoven x z)))" 2.0)

(testit "((defun testMe() vars:((x 66.5) z) (vmmovei x z)))" 66)

(testit "((defun testMe() vars:((x 10) (y 40) (z 30)) (vmnatAddInteger x y z)))" 50)

(testit "((defun testMe() vars:((x 10) (y 20) (z 30)) (vmnatSubInteger x y z)))" 10)

(testit "((defun testMe() vars:((x 20) (y 20) (z 30)) (vmnatDivInteger x y z)))" 1)

(testit "((defun testMe() vars:((x 20) (y 20) (z 30)) (vmnatMulInteger x y z)))" 400)

(testit "((defun testMe() vars:((x 10.0) (y 40.0) (z 30.0)) (vmnatAddNumber x y z)))" 50.0)

(testit "((defun testMe() vars:((x 10.1) (y 20.2) (z 30.8)) (vmnatSubNumber x y z)))" 10.1)

(testit "((defun testMe() vars:((x 20.1) (y 20.1) (z 30.3)) (vmnatDivNumber x y z)))" 1.0)

(testit "((defun testMe() vars:((x 20.0) (y 20.0) (z 30.0)) (vmnatMulNumber x y z)))" 400.0)

(testit "((defun testMe() vars:((x 3) (y 7) (z 30)) (vmnatAndInteger x y z)))" 3)

(testit "((defun testMe() vars:((x 3) (y 4) (z 30)) (vmnatOrInteger x y z)))" 7)

(testit "((defun testMe() vars:((x 3) (y 7) (z 30)) (vmnatXorInteger x y z)))" 4)

(testit "((defun testMe() vars:((x 3) (y 2) (z 30)) (vmnatShlInteger x y z)))" 16)

(testit "((defun testMe() vars:((x 2) (y 8) (z 30)) (vmnatShrInteger x y z)))" 2)

;; ***************************************
;; Strongly typed ref & set instructions::
;; ***************************************
      
(testit {(refText "Hello" 1)} (code #\e))
(testit {(refString "Hello There Big Boy" 0)} (code #\H))
(testit {(setString "Hello There Big Boy" 0 #\h)} "hello There Big Boy")
(testit {(refSymbol myName: 2)} (code #\N))

(testit "(refStrValue #{a 1 b 2 c 3 d 4} 2)" 3)
(testit "(refStrKey #{a 1 b 2 c 3 d 4} 2)" c:)
(testit "(setStrValue #{a 1 b 2 c 3 d 4} 2 22)" #{a 1 b 2 c 22 d 4})
(testit "(setStrKey #{a 1 b 2 c 3 d 4} 2 z:)" #{a 1 b 2 z 3 d 4})

(testit "(refDicValue #{dic|| a 1 b 2 c 3 d 4} 2)" 3)
(testit "(refDicKey #{dic|| a 1 b 2 c 3 d 4} 2)" c:)
(testit "(setDicValue #{dic|| a 1 b 2 c 3 d 4} 2 22)" #{dic|| a 1 b 2 c 22 d 4})
(testit "(setDicKey #{dic|| a 1 b 2 c 3 z 4} 2 y:)" #{dic|| a 1 b 2 y 3 z 4})

(testit "(refDirValue #{dir|| a 1 b 2 c 3 d 4} 2)" 3)
(testit "(refDirKey #{dir|| a 1 b 2 c 3 d 4} 2)" c:)
(testit "(setDirValue #{dir|| a 1 b 2 c 3 d 4} 2 22)" #{dir|| a 1 b 2 c 22 d 4})
(testit "(setDirKey #{dir|| a 1 b 2 c 3 z 4} 2 y:)" #{dir|| a 1 b 2 y 3 z 4})

(testit "(refVector (new Vector: 4 1 2 3 4) 2)" 3)
(testit "(setVector (new Vector: 4 1 2 3 4) 3 22)" (new Vector: 4 1 2 3 22))

(testit "(refBitVector (new Vector: bit: 4 1 0 1 0) 2)" 1)
(testit "(setBitVector (new Vector: bit: 4 1 0 1 0) 3 1)" (new Vector: Bit: 4 1 0 1 1))

(testit {(refBytVector (new Vector: byte: 6 #\H #\e #\l #\l #\o 0) 2)} (code #\l))
(testit {(setBytVector (new Vector: byte: 6 #\H #\e #\l #\l #\o 0) 3 #\L)} (new Vector: Byte: 6 #\H #\e #\l #\L #\o 0))

(testit {(refObjVector (new Vector: object: 5 H: e: l: l: o:) 2)} l:)
(testit {(setObjVector (new Vector: object: 5 H: e: l: l: o:) 3 L:)} (new Vector: Object: 5 H: e: l: L: o:))

(testit "(refVector (new Vector: 5 1 2 3 4 5) 2)" 3)
(testit "(setVector (new Vector: 5 1 2 3 4 5) 3 22)" (new Vector: 5 1 2 3 22 5))

(testit "(refIntVector (new Vector: integer: 5 1 2 3 4 5) 2)" 3)
(testit "(setIntVector (new Vector: integer: 5 1 2 3 4 5) 3 22)" (new Vector: Integer: 5 1 2 3 22 5))

(testit "(refNumVector (new Vector: number: 5 1 2 3 4 5) 2)" 3)
(testit "(setNumVector (new Vector: number: 5 1 2 3 4 5) 3 22.0)" (new Vector: Number: 5 1 2 3 22 5))

(testit "(refFltVector (new Vector: float: 5 1 2 3 4 5) 2)" 3)
(testit "(setFltVector (new Vector: float: 5 1 2 3 4 5) 3 22.0)" (new Vector: Float: 5 1 2 3 22 5))

(testit "(refMatrix (new Matrix: 1 4 1 2 3 4) 2)" 3)
(testit "(setMatrix (new Matrix: 1 4 1 2 3 4) 3 22)" (new Matrix: 1 4 1 2 3 22))

(testit "(refNumMatrix (new Matrix: number: 1 4 1 2 3 4) 2)" 3)
(testit "(setNumMatrix (new Matrix: number: 1 4 1 2 3 4) 3 22.0)" (new Matrix: number: 1 4 1 2 3 22))

(testit "(setPcdVector (lambda() true)[Pc:] 0 (refPcdVector (lambda() true)[Pc:] 0))" (lambda() true)[Pc:])

;; ***************************************
;; Virtual Machine Register Instructions::
;; ***************************************

(testit "((defun testMe() regs:(Number:x Number:y) (setq x 10.0) (setq y 20.0) (vmregAddNumber x y)))" 30.0)

(testit "((defun testMe() regs:(x y) (setq x 3) (setq y 1) (vmregAndInteger x y)))" 1)

(testit "((defun testMe() regs:(x) (setq x 3) (vmregAddImmediate 1 x)))" 4)

(testit "((defun testMe() regs:(x) (setq x 3) (vmregIncPointer CharPointer: -2 x)))" 1)

(testit "((defun testMe() regs:(x) (setq x 3) (vmregIncPointer ShortPointer: 23 x)))" 49)

(testit "((defun testMe() regs:(x) (setq x 3) (vmregIncPointer FloatPointer: 1 x)))" 7)

(testit "((defun testMe() regs:(x) (setq x 3) (vmregIncPointer IntPointer: 1 x)))" (if (= _ais.bits 64) 11 7))

(testit "((defun testMe() regs:(x) (setq x 3) (vmregIncPointer NumPointer: 1 x)))" 11)

(testit "((defun testMe() regs:(x) (setq x 3) (vmregIncPointer WordPointer: 2 x)))" 35)

(testit "((defun testMe() regs:(x y) (setq x 10) (setq y 20) (vmregAddInteger x y)))" 30)

(testit "((defun testMe() regs:(x y) (setq x 10) (setq y 20) (vmregAddPointer CharPointer: x y)))" 30)

(testit "((defun testMe() regs:(x y) (setq x 10) (setq y 20) (vmregAddPointer ShortPointer: x y)))" 40)

(testit "((defun testMe() regs:(x y) (setq x 10) (setq y 20) (vmregAddPointer FloatPointer: x y)))" 60)

(testit "((defun testMe() regs:(x y) (setq x 10) (setq y 20) (vmregAddPointer IntPointer: x y)))" (if (= _ais.bits 64) 100 60))

(testit "((defun testMe() regs:(x y) (setq x 10) (setq y 20) (vmregAddPointer NumPointer: x y)))" 100)

(testit "((defun testMe() regs:(x y) (setq x 10) (setq y 20) (vmregAddPointer WordPointer: x y)))" 180)

(testit "((defun testMe() regs:(x y) (setq x 10) (setq y 20) (vmregAddPointer 5 x y)))" 340)

(testit "((defun testMe() regs:(x y) (setq x 10) (setq y 20) (vmregSubInteger x y)))" 10)

(testit "((defun testMe() regs:(x y) (setq x 10) (setq y 20) (vmregSubPointer CharPointer: x y)))" 10)

(testit "((defun testMe() regs:(x y) (setq x 10) (setq y 20) (vmregSubPointer ShortPointer: x y)))" 0)

(testit "((defun testMe() regs:(x y) (setq x 10) (setq y 20) (vmregSubPointer FloatPointer: x y)))" -20)

(testit "((defun testMe() regs:(x y) (setq x 10) (setq y 20) (vmregSubPointer IntPointer: x y)))" (if (= _ais.bits 64) -60 -20))

(testit "((defun testMe() regs:(x y) (setq x 10) (setq y 20) (vmregSubPointer NumPointer: x y)))" -60)

(testit "((defun testMe() regs:(x y) (setq x 10) (setq y 20) (vmregMoveInteger x y)))" 10)

(testit "((defun testMe() regs:(Number:x Number:y) (setq x 10.0) (setq y 20.0) (vmregMoveNumber x y)))" 10.0)

(testit "((defun testMe() regs:(Number:x Number:y) (setq x 10.0) (setq y 20.0) (vmregDivNumber x y)))" 2.0)

(testit "((defun testMe() regs:(x JumpPointer:y) (setq y MyLabel:) (goto y) (setq x 20) (return y) MyLabel:: (setq x 10)))" 10)

(testit "((defun testMe() regs:(Number:x Number:y) (setq x 10.0) (setq y 20.0) (vmregMulNumber x y)))" 200.0)

(testit "((defun testMe() regs:(x y) (setq x 3) (setq y 10) (vmregDivrInteger x y)))" 1)

(testit "(string ((defun testMe() regs:(Number:x Number:y) (setq x 3.0) (setq y 10.0) (vmregDivrNumber x y))))" "1.0")

(testit "((defun testMe() regs:(x y) (setq x 2) (setq y 1) (vmregOrInteger x y)))" 3)

(testit "((defun testMe() vars:(x) regs:(CharPointer:p n) (setq x {Hello}) (setq p x) (vmregRefCharacter p n)))" (code #\H))

(testit "((defun testMe() vars:(x) regs:(CharPointer:p n m) (setq m 1) (setq x {Hello}) (setq p x) (vmregRefXCharacter p m n)))" (code #\e))

(testit "((defun testMe() vars:(x) regs:(IntPointer:p n) (setq x (new Vector: integer: 1 2)) (setq p x) (vmregRefInteger p n)))" 2)

(testit "((defun testMe() vars:(x) regs:(IntPointer:p n m) (setq m 1) (setq x (new Vector: integer: 2 2 3)) (setq p x) (vmregRefXInteger p m n)))" 3)

(testit "((defun testMe() vars:(x) regs:(FloatPointer:p Number:n) (setq x (new Vector: float: 1 2.0)) (setq p x) (vmregRefFloat p n)))" 2.0)

(testit "((defun testMe() vars:(x) regs:(FloatPointer:p m Number:n) (setq m 1) (setq x #(float| 2.0 3.0)) (setq p x) (vmregRefXFloat p m n)))" 3.0)

(testit "((defun testMe() vars:(x) regs:(ShortPointer:p n) (setq x (new Vector: short: 1 2)) (setq p x) (vmregRefShort p n)))" 2)

(testit "((defun testMe() vars:(x) regs:(ShortPointer:p n m) (setq m 1) (setq x (new Vector: short: 2 2 3)) (setq p x) (vmregRefXShort p m n)))" 3)

(testit "((defun testMe() vars:(x) regs:(NumPointer:p Number:n) (setq x (new Vector: number: 1 20.0)) (setq p x) (vmregRefNumber p n)))" 20.0)

(testit "((defun testMe() vars:(x) regs:(NumPointer:p m Number:n) (setq m 1) (setq x #(num| 2.0 3.0)) (setq p x) (vmregRefXNumber p m n)))" 3.0)

(testit "((defun testMe() vars:(x) regs:(CharPointer:p) (setq x {Hello}) (setq p x) (vmregSetCharImmediate 104 p) x))" {hello})

(testit "((defun testMe() vars:(x) regs:(CharPointer:p n) (setq x {Hello}) (setq p x) (setq n 104) (vmregSetCharacter n p) x))" {hello})

(testit "((defun testMe() vars:(x) regs:(CharPointer:p n m) (setq x {Hello}) (setq p x) (setq n 104) (setq m 1) (vmregSetXCharacter n m p) x))" {Hhllo})

(testit "((defun testMe() vars:(x) regs:(CharPointer:p m) (setq x {Hello}) (setq p x) (setq m 1) (vmregSetXCharImmediate 104 m p) x))" {Hhllo})

(testit "((defun testMe() vars:(x) regs:(ShortPointer:p) (setq x (new Vector: short: 1 2)) (setq p x) (vmregSetShortImmediate 20 p) x))" #(short| 20))

(testit "((defun testMe() vars:(x) regs:(ShortPointer:p n) (setq x (new Vector: short: 1 2)) (setq p x) (setq n 20) (vmregSetShort n p) x))" #(short| 20))

(testit "((defun testMe() vars:(x) regs:(ShortPointer:p n m) (setq x (new Vector: short: 2 2 3)) (setq p x) (setq n 20) (setq m 1) (vmregSetXShort n m p) x))" #(short| 2 20))

(testit "((defun testMe() vars:(x) regs:(ShortPointer:p m) (setq x (new Vector: short: 2 2 3)) (setq p x) (setq m 1) (vmregSetXShortImmediate 20 m p) x))" #(short| 2 20))

(testit "((defun testMe() vars:(x) regs:(IntPointer:p) (setq x (new Vector: integer: 1 2)) (setq p x) (vmregSetIntImmediate 20 p) x))" #(int| 20))

(testit "((defun testMe() vars:(x) regs:(IntPointer:p n) (setq x (new Vector: integer: 1 2)) (setq p x) (setq n 20) (vmregSetInteger n p) x))" #(int| 20))

(testit "((defun testMe() vars:(x) regs:(IntPointer:p n m) (setq x (new Vector: integer: 2 2 3)) (setq p x) (setq n 20) (setq m 1) (vmregSetXInteger n m p) x))" #(int| 2 20))

(testit "((defun testMe() vars:(x) regs:(IntPointer:p n m) (setq x (new Vector: integer: 2 2 3)) (setq p x) (setq m 1) (vmregSetXIntImmediate 20 m p) x))" #(int| 2 20))

(testit "((defun testMe() vars:(x) regs:(FloatPointer:p Number:n) (setq x (new Vector: float: 1 2)) (setq p x) (setq n 21.0) (vmregSetFloat n p) x))" #(float| 21.0))

(testit "((defun testMe() vars:(x) regs:(FloatPointer:p m Number:n) (setq x (new Vector: float: 2 2.0 3.0)) (setq p x) (setq m 1) (setq n 21.0) (vmregSetXFloat n m p) x))" #(float| 2.0 21.0))

(testit "((defun testMe() vars:(x) regs:(NumPointer:p Number:n) (setq x (new Vector: number: 1 2)) (setq p x) (setq n 21.0) (vmregSetNumber n p) x))" #(num| 21.0))

(testit "((defun testMe() regs:(Number:x Number:y) (setq x 10.0) (setq y 20.0) (vmregSubNumber x y)))" 10.0)

(testit "((defun testMe() regs:(x y) (setq x 3) (setq y 1) (vmregXorInteger x y)))" 2)
 
(testit "((defun testMe() regs:(x y) (setq x 3) (setq y 6) (vmregDivInteger x y)))" 2)
 
(testit "((defun testMe() regs:(x y) (setq x 3) (setq y 6) (vmregMulInteger x y)))" 18)
 
(testit "((defun testMe() regs:(x y) (setq x 3) (setq y 6) (vmregDivImmediate 3 y)))" 2)
 
(testit "((defun testMe() regs:(x y) (setq x 3) (setq y 6) (vmregAddImmediate 3 y)))" 9)
 
(testit "((defun testMe() regs:(x y) (setq x 3) (setq y 2) (vmregShlInteger x y)))" 16)
 
(testit "((defun testMe() regs:(x y) (setq x 3) (setq y 16) (vmregShrInteger x y)))" 2)
 
(testit "((defun testMe() regs:((x 3)) (vmregJmpLTImmediate x 4 MyLabel:) (return false) MyLabel:: true))" true)
 
(testit "((defun testMe() regs:((x 3)) (vmregJmpLEImmediate x 4 MyLabel:) (return false) MyLabel:: true))" true)
 
(testit "((defun testMe() regs:((x 3)) (vmregJmpEQImmediate x 4 MyLabel:) (return false) MyLabel:: true))" false)
 
(testit "((defun testMe() regs:((x 3)) (vmregJmpNEImmediate x 4 MyLabel:) (return false) MyLabel:: true))" true)
 
(testit "((defun testMe() regs:((x 3)) (vmregJmpGEImmediate x 4 MyLabel:) (return false) MyLabel:: true))" false)
 
(testit "((defun testMe() regs:((x 3)) (vmregJmpGTImmediate x 4 MyLabel:) (return false) MyLabel:: true))" false)
 
(testit "((defun testMe() regs:((x 3) (y 4)) (vmregJmpLTInteger x y MyLabel:) (return false) MyLabel:: true))" true)
 
(testit "((defun testMe() regs:((x 3) (y 4)) (vmregJmpLEInteger x y MyLabel:) (return false) MyLabel:: true))" true)
 
(testit "((defun testMe() regs:((x 3) (y 4)) (vmregJmpEQInteger x y MyLabel:) (return false) MyLabel:: true))" false)
 
(testit "((defun testMe() regs:((x 3) (y 4)) (vmregJmpNEInteger x y MyLabel:) (return false) MyLabel:: true))" true)
 
(testit "((defun testMe() regs:((x 3) (y 4)) (vmregJmpGEInteger x y MyLabel:) (return false) MyLabel:: true))" false)
 
(testit "((defun testMe() regs:((x 3) (y 4)) (vmregJmpGTInteger x y MyLabel:) (return false) MyLabel:: true))" false)
 
(testit "((defun testMe() regs:(Number:x Number:y) (setq x 3.0) (setq y 4.0) (vmregJmpLTNumber x y MyLabel:) (return false) MyLabel:: true))" true)
 
(testit "((defun testMe() regs:(Number:x Number:y) (setq x 3.0) (setq y 4.0) (vmregJmpLENumber x y MyLabel:) (return false) MyLabel:: true))" true)
 
(testit "((defun testMe() regs:(Number:x Number:y) (setq x 3.0) (setq y 4.0) (vmregJmpEQNumber x y MyLabel:) (return false) MyLabel:: true))" false)
 
(testit "((defun testMe() regs:(Number:x Number:y) (setq x 3.0) (setq y 4.0) (vmregJmpNENumber x y MyLabel:) (return false) MyLabel:: true))" true)
 
(testit "((defun testMe() regs:(Number:x Number:y) (setq x 3.0) (setq y 4.0) (vmregJmpGENumber x y MyLabel:) (return false) MyLabel:: true))" false)
 
(testit "((defun testMe() regs:(Number:x Number:y) (setq x 3.0) (setq y 4.0) (vmregJmpGTNumber x y MyLabel:) (return false) MyLabel:: true))" false)
 
(testit "((defun testMe() regs:(x JumpPointer:y) (vmregLoadJmpPointer MyLabel: y) (vmregJump y) (setq x 20) (return y) MyLabel:: (setq x 10)))" 10)

(testit "((defun testMe() regs:(x JumpPointer:y) (setq y MyLabel:) (vmregJump y) (setq x 20) (return y) MyLabel:: (setq x 10)))" 10)

(testit "((defun testMe() regs:(y) vars:((x #(1 2 3))) (vmregObjLength x y)))" 3)

(testit "((defun testMe() regs:(y) vars:(x) (setq y 2) (vmregSaveTail y x) (vmregLoadTail x y)))" 2)

(testit "((defun testMe() regs:(y) vars:(x) (setq y 2) (vmregSaveTailImmediate 2 x) (vmregLoadTail x y)))" 2)

(testit "((defun testMe() regs:(y IntPointer:p) vars:(x w) (setq w 2) (vmregLoadAddress w p) (vmregRefInteger p y)))" 2)

(testit "((defun testMe() regs:(n) vars:((x {Hello There}) (y {Hello there})) (vmregStringCompare x y n) (if (< n 0) true false)))" true)

(testit "((defun testMe() regs:(n) vars:((x {Hello there}) (y {Hello There})) (vmregStringiCompare x y n) (if (= n 0) true false)))" true)

(testit "((defun testMe() regs:(n) vars:((x {Hello the}) (y {Hello there})) (vmregStringiCompare x y n) (if (< n 0) true false)))" true)

(testit "((defun testMe() vars:(value result) regs:(WordPointer:pr) (setq value 1.0) (setq result #( 0.0 2.0 )) (setq pr result) (vmregSetWord value pr) result))" #(1.0 2.0))

(testit "((defun testMe() vars:(value result) regs:(WordPointer:pr) (setq value #( 1.0 2.0 )) (setq pr value) (vmregRefWord pr result) result))" 1.0)

(testit "((defun testMe() vars:(value result) regs:(WordPointer:pr (n 1)) (setq value 2.0) (setq result #( 1.0 200.0 3.0 )) (setq pr result) (vmregSetXWord value n pr) result))" #(1.0 2.0 3.0))

(testit "((defun testMe() vars:(value result) regs:(WordPointer:pr (n 1)) (setq value #( 1.0 2.0 3.0 )) (setq pr value) (vmregRefXWord pr n result) result))" 2.0)

;; *************************************
;; Virtual Machine Native Instructions::
;; *************************************

(testit "((defun testMe() vars:((x 2.0) (y 4.0) (z 0.0)) (vmnatAddNumber x y z)))" 6.0)

(testit "((defun testMe() vars:((x 2.0) (y 4.0) (z 0.0)) (vmnatDivNumber x y z)))" 2.0)

(testit "((defun testMe() vars:((x 2.0) (y 4.0) (z 0.0)) (vmnatDivrNumber x y z)))" 0.0)

(testit "((defun testMe() vars:((x 2.0) (y 4.0) (z 0.0)) (vmnatMulNumber x y z)))" 8.0)

(testit "((defun testMe() vars:((x 2.0) (y 4.0) (z 0.0)) (vmnatSubNumber x y z)))" 2.0)

(testit "((defun testMe() vars:((x 2) (y 4) (z 0)) (vmnatAddInteger x y z)))" 6)

(testit "((defun testMe() vars:((x 2) (y 4) (z 0)) (vmnatDivInteger x y z)))" 2)

(testit "((defun testMe() vars:((x 2) (y 4) (z 0)) (vmnatDivrInteger x y z)))" 0)

(testit "((defun testMe() vars:((x 2) (y 4) (z 0)) (vmnatMulInteger x y z)))" 8)

(testit "((defun testMe() vars:((x 2) (y 4) (z 0)) (vmnatSubInteger x y z)))" 2)

(testit "((defun testMe() vars:((x 48) y z) (vmnatSaveCharacter x y) (vmnatLoadCharacter y z)))" #\0)

(testit "((defun testMe() vars:((x 2.0) y z) (vmnatSaveFloat x y) (vmnatLoadFloat y z)))" 2.0)

(testit "((defun testMe() vars:((x 2) y z) (vmnatSaveInteger x y) (vmnatLoadInteger y z)))" 2)

(testit "((defun testMe() vars:((x 2.0) y z) (vmnatSaveNumber x y) (vmnatLoadNumber y z)))" 2.0)

(testit "((defun testMe() vars:((x #(1)) y z) (vmnatSaveObject x y) (vmnatLoadObject y z)))" #(1))

(testit "((defun testMe() vars:((x 2) y z) (vmnatSaveShort x y) (vmnatLoadShort y z)))" 2)

;; *************************************
;; Virtual Machine Vector Instructions::
;; *************************************

(setq X  (new Vector: number: 4 2 3 4 5))
(setq X1 (new Vector: number: 4 2 3 4 5))
(setq Y  (new Vector: number: 4 1 2 3 4))
(setq Y1 (new Vector: number: 4 1 2 3 4))

(setq FX  (new Vector: float: 4 2 3 4 5))
(setq FX1 (new Vector: float: 4 2 3 4 5))
(setq FY  (new Vector: float: 4 1 2 3 4))
(setq FY1 (new Vector: float: 4 1 2 3 4))
(setq FY  (new Vector: float: 4 9 2 5 4))

(testit "(lispDotProduct X Y)" (vectorInnerProduct X Y))

(testit "(vectorDis X Y)" 2.0)

(testit "(vectorMov X)" #(num| 2 3 4 5))

(testit "(vectorMove X)" X1)

(testit "(vectorAddNumber 22.4 34.2)" 55.6)

(testit "(vectorSwap (copy FX) (copy FY))" #(float| 9.0 3.0 5.0 5.0))

(testit "(vectorSwp X1 Y1)" #(num| 2 3 4 5))

(testit "(vectorSum X)" 14.0)

(testit "(vectorAdd X Y)" #(num| 3 5 7 9))

(testit "(vectorSub X Y)" #(num| -1 -1 -1 -1))

(testit "(vectorMul X Y)" #(num| 2 6 12 20))

(testit "(vectorDiv X Y)" (new Vector: number: 4 (/ 1.0 2.0) (/ 2.0 3.0) (/ 3.0 4.0) (/ 4.0 5.0)))

;; ******************************************
;; Virtual Machine Logarithmic Instructions::
;; ******************************************

(testit "((defun testMe() regs:(Number:x Number:y) (setq x -3.4) (vmregAbsNumber x y)))" 3.4)

(testit "((defun testMe() regs:(Number:x Number:y) (setq x 2.154) (vmregCosNumber x y)))" (cos 2.154))

(testit "((defun testMe() regs:(Number:x Number:y) (setq x 2.154) (vmregSinNumber x y)))" (sin 2.154))

(testit "((defun testMe() regs:(Number:x Number:y) (setq x 2.154) (vmregSqrtNumber x y)))" (sqrt 2.154))

(testit "((defun testMe() regs:(Number:x Number:y) (setq x 2.154) (vmregTanNumber x y)))" (tan 2.154))

(testit "((defun testMe() regs:(Number:x Number:y Number:z) (setq x 2.154) (setq y 3.22) (vmregPwrNumber x y z) (string z)))" (string (expt 2.154 3.22)))

(testit "((defun testMe() regs:(Number:x Number:y Number:z) (setq x 2.154) (setq y 3.22) (vmregLogNumber x y z) (string z)))" (string (logbase 2.154 3.22)))

;; ***************************************
;; Multiple Virtual Machine instructions::
;; ***************************************
      
(testit "((defun testMe(a b c) vars:(x y) (vmapply 1 + y) (vmapply -1 + x) (* x y)) 2 4 6)" 60)

(defvm noopVM(...) (if (isLambda (argFetch (isub (argCount) 1))) "Noop VM Okay")) 
(defun foo() true)
(setq foo.Vm noopVM:)
(testit "(foo)" "Noop VM Okay") 

;; ******************************
;; Run In Hardware instructions::
;; ******************************

(defun testMe(Number:x)
    regs:(Number:fr1 Number:fr2 Number:fr3 Number:hr1 Number:hr2 Number:hm1 Number:hm2)
    vars:((Number:w 0.0) (Number:z 0.0))  
    (vmregRunInHardware start:)
    (vmregLoadNumber x hr2)
    (vmregLoadNumber x hm1)
    (vmregSaveNumber hr2 w)
    (vmregSaveNumber hm1 z)
    (vmregRunInHardware stop:)
    (+ w z))
(testit "(string (testMe -1.23))"  "-2.46")

(defun testMe(x)
    regs:((Number:fr1 22.1) (Number:fr2 30.1) (Number:fr3 -4.5) (Number:fr4 -1.0) (Number:fr5 -2.3) (Number:fr6 -2.3) (Number:fr7 -2.3))
    regs:(Integer:ir1 Integer:ir2 (Integer:ir3 -4) (Integer:ir4 -1) (Integer:ir5 2) (Integer:ir6 22) (Integer:ir7 10))
    (vmregRunInHardware start:)
	(vmregInteger fr1 ir1)    
	(vmregInteger fr2 ir2)    
	(vmregInteger fr3 ir3)    
	(vmregInteger fr4 ir4)    
	(vmregInteger fr5 ir5)    
	(vmregInteger fr6 ir6)    
	(vmregInteger fr7 ir7)    
	(vmregInteger fr1 ir7)    
	(vmregInteger fr2 ir6)    
	(vmregInteger fr3 ir5)    
	(vmregInteger fr4 ir4)    
	(vmregInteger fr5 ir3)    
	(vmregInteger fr6 ir2)    
	(vmregInteger fr7 ir1)    
    (vmregRunInHardware stop:)
    (+ ir1 ir2 ir3 ir4 ir5 ir6 ir7))
(testit "(string (testMe {vmregInteger}))"  "41")

(defun testMe(x)
    regs:((Number:fr1 22.1) (Number:fr2 30.1) (Number:fr3 -4.5) (Number:fr4 -1.0) (Number:fr5 -2.3) (Number:fr6 -2.3) (Number:fr7 -2.3))
    regs:((Integer:ir1 106) (Integer:ir2 -63) (Integer:ir3 -4) (Integer:ir4 -1) (Integer:ir5 2) (Integer:ir6 22) (Integer:ir7 10))
    (vmregRunInHardware start:)
	(vmregNumber ir1 fr1)    
	(vmregNumber ir2 fr2)    
	(vmregNumber ir3 fr3)    
	(vmregNumber ir4 fr4)    
	(vmregNumber ir5 fr5)    
	(vmregNumber ir6 fr6)    
	(vmregNumber ir7 fr7)    
	(vmregNumber ir1 fr7)    
	(vmregNumber ir2 fr6)    
	(vmregNumber ir3 fr5)    
	(vmregNumber ir4 fr4)    
	(vmregNumber ir5 fr3)    
	(vmregNumber ir6 fr2)    
	(vmregNumber ir7 fr1)    
    (vmregRunInHardware stop:)
    (+ fr1 fr2 fr3 fr4 fr5 fr6 fr7))
(testit "(string (testMe {vmregNumber}))"  "72.0")

(defun testMe(x)
    regs:(Number:fr1 Number:fr2 (Number:fr3 -4.5) (Number:hr1 -1.0) (Number:hr2 -2.3) (Number:hm1 -2.3) (Number:hm2 -2.3))
    (vmregRunInHardware start:)
	(vmregAbsNumber hr1 hr2)    
	(vmregAbsNumber hr2 hm1)
	(vmregAbsNumber hm1 hm2)
	(vmregAbsNumber hm2 fr3)
    (vmregRunInHardware stop:)
    (+ hr2 hm1 fr3 hm2))
(testit "(string (testMe {vmregAbsNumber}))"  "4.0")

(defun testMe(x)
    regs:(Number:fr1 Number:fr2 (Number:fr3 -4.5) (Number:hr1 1.0) (Number:hr2 -2.3) (Number:hm1 -2.3) (Number:hm2 -2.3))
    (vmregRunInHardware start:)
	(vmregCosNumber hr1 hr2)    
	(vmregCosNumber hr2 hm1)
	(vmregCosNumber hm1 hm2)
	(vmregCosNumber hm1 fr3)
    (vmregRunInHardware stop:)
    (+ hr2 hm1 fr3 hm2))
(testit "(string (testMe {vmregCosNumber}))"  "2.70643510271")

(defun testMe(x)
    regs:(Number:fr1 Number:fr2 (Number:fr3 -4.5) (Number:hr1 1000000.0) (Number:hr2 -2.3) (Number:hm1 -2.3) (Number:hm2 -2.3))
    (vmregRunInHardware start:)
	(vmregSqrtNumber hr1 hr2)    
	(vmregSqrtNumber hr2 hm1)
	(vmregSqrtNumber hm1 hm2)
	(vmregSqrtNumber hm1 fr3)
    (vmregRunInHardware stop:)
    (+ hr2 hm1 fr3 hm2))
(testit "(string (testMe {vmregSqrtNumber}))"  "1042.869603105")

(defun testMe(x)
    regs:(Number:fr1 Number:fr2 (Number:fr3 -4.5) (Number:hr1 1000000.0) (Number:hr2 -2.3) (Number:hm1 -2.3) (Number:hm2 -2.3))
    (vmregRunInHardware start:)
	(vmregSinNumber hr1 hr2)    
	(vmregSinNumber hr2 hm1)
	(vmregSinNumber hm1 hm2)
	(vmregSinNumber hm1 fr3)
    (vmregRunInHardware stop:)
    (+ hr2 hm1 fr3 hm2))
(testit "(string (testMe {vmregSinNumber}))"  "-1.365308927874")

(defun testMe(x)
    regs:(Number:fr1 Number:fr2 (Number:fr3 -4.5) (Number:hr1 1000000.0) (Number:hr2 -2.3) (Number:hm1 -2.3) (Number:hm2 -2.3))
    (vmregRunInHardware start:)
	(vmregAddNumber hr1 hr2)    
	(vmregAddNumber hr2 hm1)
	(vmregAddNumber hm1 hm2)
	(vmregAddNumber hm1 fr3)
    (vmregRunInHardware stop:)
    (+ hr2 hm1 fr3 hm2))
(testit "(string (testMe {vmregAddNumber}))"  "3999977.1")

(defun testMe(x)
    regs:(Number:fr1 Number:fr2 (Number:fr3 -4.5) (Number:hr1 46.0) (Number:hr2 -2.3) (Number:hm1 -2.3) (Number:hm2 -2.3))
    (vmregRunInHardware start:)
	(vmregTanNumber hr1 hr2)    
	(vmregTanNumber hr2 hm1)
	(vmregTanNumber hm1 hm2)
	(vmregTanNumber hm1 fr3)
    (vmregRunInHardware stop:)
    (+ hr2 hm1 fr3 hm2))
(testit "(string (testMe {vmregTanNumber}))"  "-10.56723844")

(defun testMe(x)
    regs:(Number:fr1 Number:fr2 (Number:fr3 -4.5) (Number:hr1 46.0) (Number:hr2 -2.3) (Number:hm1 -2.3) (Number:hm2 -2.3))
    (vmregRunInHardware start:)
	(vmregMulNumber hr1 hr2)    
	(vmregMulNumber hr2 hm1)
	(vmregMulNumber hm1 hm2)
	(vmregMulNumber hm1 fr3)
    (vmregRunInHardware stop:)
    (+ hr2 hm1 fr3 hm2))
(testit "(string (testMe {vmregMulNumber}))"  "-1517.172")

(defun testMe(x)
    regs:(Number:fr1 Number:fr2 (Number:fr3 -4.5) (Number:hr1 46.0) (Number:hr2 -2.3) (Number:hm1 -2.3) (Number:hm2 -2.3))
    (vmregRunInHardware start:)
	(vmregSubNumber hr1 hr2)    
	(vmregSubNumber hr2 hm1)
	(vmregSubNumber hm1 hm2)
	(vmregSubNumber hm1 fr3)
    (vmregRunInHardware stop:)
    (+ hr2 hm1 fr3 hm2))
(testit "(string (testMe {vmregSubNumber}))"  "-101.1")

(defun testMe(x)
    regs:(Number:fr1 Number:fr2 (Number:fr3 -4.5) (Number:hr1 46.0) (Number:hr2 -2.3) (Number:hm1 -2.3) (Number:hm2 -2.3))
    (vmregRunInHardware start:)
	(vmregDivNumber hr1 hr2)    
	(vmregDivNumber hr2 hm1)
	(vmregDivNumber hm1 hm2)
	(vmregDivNumber hm1 fr3)
    (vmregRunInHardware stop:)
    (+ hr2 hm1 fr3 hm2))
(testit "(string (testMe {vmregDivNumber}))"  "45.80217391304")

(defun testMe(x)
    regs:(IntPointer:p Integer:fr2 (Integer:fr3 10) (Integer:hr1 2) (Integer:hr2 1) (Integer:hm1 16) (Integer:hm2 5)) 
    vars:((Integer:y 22))
    (vmregRunInHardware start:)
    (vmregLoadAddress y p)
	(vmregLoadInteger y hr1)    
	(vmregLoadInteger p[:0:] hr2)    
	(vmregLoadInteger y hm1)    
	(vmregLoadInteger p[:0:] hm2)    
    (vmregRunInHardware stop:)
    (+ hr2 hm1 fr3 hm2))
(testit "(string (testMe {vmregLoadInteger}))"  "76")

(defun testMe(x)
    regs:(IntPointer:p Integer:fr2 (Integer:fr3 10) (Integer:hr1 2) (Integer:hr2 1) (Integer:hm1 16) (Integer:hm2 5)) 
    vars:((Integer:y 22))
    (vmregRunInHardware start:)
    (vmregLoadAddress y p)
	(vmregMoveImmediate 22 hr1)    
	(vmregMoveImmediate 66 hm1)    
    (vmregRunInHardware stop:)
    (+ hr1 hm1))
(testit "(string (testMe {vmregMoveImmediate}))"  "88")

(defun testMe(x)
    regs:(IntPointer:p2 Integer:p4 (Integer:fr3 10) (Integer:hr1 2) (Integer:hr2 1) (Integer:hm1 16) (Integer:hm2 5)) 
    vars:((Integer:y1 -1) (Integer:y2 -1) (Integer:y3 -1) (Integer:y4 -1))
    (vmregRunInHardware start:)
    (vmregLoadAddress y2 p2)
    (vmregLoadAddress y4 p4)
	(vmregSaveInteger hr1 y1)    
	(vmregSaveInteger hr2 p2[:0:])    
	(vmregSaveInteger hm1 y3)    
	(vmregSaveInteger hm2 p4[:0:])    
    (vmregRunInHardware stop:)
    (+ y1 y2 y3 y4))
(testit "(string (testMe {vmregSaveInteger}))"  "24")

(defun testMe(x)
    regs:(NumPointer:p1 NumPointer:p2 (Integer:n1 0) (Integer:n2 1) (Integer:n3 2) (Integer:n4 3) (Integer:n5 4) (Integer:n6 5) (Integer:n7 6)) 
    regs:((Number:fr1 4.5) (Number:fr2 7.2) (Number:fr3 10.0) (Number:fr4 2.0) (Number:fr5 1.0) (Number:fr6 16.0) (Number:fr7 5.0)) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: number: 7 1 2 3 4 5 6 7))
    (setq v2 (new Vector: number: 7 1 2 3 4 5 6 7))
    (vmregObjPointer v1 p1)
    (vmregObjPointer v2 p2)
    (vmregRunInHardware start:)
	(vmregRefXNumber p1 n1 fr1)    
	(vmregRefXNumber p1 n2 fr2)    
	(vmregRefXNumber p1 n3 fr3)    
	(vmregRefXNumber p1 n4 fr4)    
	(vmregRefXNumber p1 n5 fr5)    
	(vmregRefXNumber p1 n6 fr6)    
	(vmregRefXNumber p1 n7 fr7)    
    (vmregRunInHardware stop:)
    (setq y (+ fr1 fr2 fr3 fr4 fr5 fr6 fr7))
    (vmregRunInHardware start:)
	(vmregRefXNumber p1 n1 fr1)    
	(vmregRefXNumber p1 n2 fr2)    
	(vmregRefXNumber p1 n3 fr3)    
	(vmregRefXNumber p1 n4 fr4)    
	(vmregRefXNumber p1 n5 fr5)    
	(vmregRefXNumber p1 n6 fr6)    
	(vmregRefXNumber p1 n7 fr7)    
	(vmregRefXNumber p2 n1 fr1)    
	(vmregRefXNumber p2 n2 fr2)    
	(vmregRefXNumber p2 n3 fr3)    
	(vmregRefXNumber p2 n4 fr4)    
	(vmregRefXNumber p2 n5 fr5)    
	(vmregRefXNumber p2 n6 fr6)    
	(vmregRefXNumber p2 n7 fr7)    
    (vmregRunInHardware stop:)
    (setq y (+ y fr1 fr2 fr3 fr4 fr5 fr6 fr7))
    y)
(testit "(string (testMe {vmregRefXNumber}))"  "56.0")

(defun testMe(x)
    regs:(NumPointer:p1 NumPointer:p2 (Integer:n1 0) (Integer:n2 1) (Integer:n3 2) (Integer:n4 3) (Integer:n5 4) (Integer:n6 5) (Integer:n7 6)) 
    regs:((Number:fr1 4.5) (Number:fr2 7.2) (Number:fr3 10.0) (Number:fr4 2.0) (Number:fr5 1.0) (Number:fr6 16.0) (Number:fr7 5.0)) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: number: 7))
    (setq v2 (new Vector: number: 7))
    (vmregObjPointer v1 p1)
    (vmregObjPointer v2 p2)
    (vmregRunInHardware start:)
	(vmregSetXNumber fr1 n1 p1)    
	(vmregSetXNumber fr2 n2 p1)    
	(vmregSetXNumber fr3 n3 p1)    
	(vmregSetXNumber fr4 n4 p1)    
	(vmregSetXNumber fr5 n5 p1)    
	(vmregSetXNumber fr6 n6 p1)    
	(vmregSetXNumber fr1 n1 p2)    
	(vmregSetXNumber fr2 n2 p2)    
	(vmregSetXNumber fr3 n3 p2)    
	(vmregSetXNumber fr4 n4 p2)    
	(vmregSetXNumber fr5 n5 p2)    
	(vmregSetXNumber fr6 n6 p2)    
    (vmregRunInHardware stop:)
    (setq y (sum v1 v2))
    y)
(testit "(string (testMe {vmregSetXNumber}))"  "81.4")

(defun testMe(x)
    regs:(NumPointer:p1 NumPointer:p2 (Integer:n1 0) (Integer:n2 1) (Integer:n3 2) (Integer:n4 3) (Integer:n5 4) (Integer:n6 5) (Integer:n7 6)) 
    regs:((Number:fr1 4.5) (Number:fr2 7.2) (Number:fr3 10.0) (Number:fr4 2.0) (Number:fr5 1.0) (Number:fr6 16.0) (Number:fr7 5.0)) 
    (vmregRunInHardware start:)
	Next0::(vmregJmpLTImmediate n1 2 Next1:) (vmregAddImmediate 1 n1)    
	Next1::(vmregJmpLEImmediate n2 1 Next2:) (vmregAddImmediate 1 n1)    
	Next2::(vmregJmpEQImmediate n3 2 Next3:) (vmregAddImmediate 1 n1)    
	Next3::(vmregJmpNEImmediate n4 1 Next4:) (vmregAddImmediate 1 n1)    
	Next4::(vmregJmpGEImmediate n5 4 Next5:) (vmregAddImmediate 1 n1)    
	Next5::(vmregJmpGTImmediate n6 4 Next6:) (vmregAddImmediate 1 n1)    
	Next6::(vmregJmpLTImmediate n7 7 Next7:) (vmregAddImmediate 1 n1)    
    Next7::
    (vmregRunInHardware stop:)
    n1)
(testit "(string (testMe {vmregJmpCCImmediate}))"  "0")

(defun testMe(x)
    regs:(NumPointer:p1 NumPointer:p2 (Integer:n1 0) (Integer:n2 1) (Integer:n3 2) (Integer:n4 3) (Integer:n5 4) (Integer:n6 5) (Integer:n7 6)) 
    regs:((Number:fr1 4.5) (Number:fr2 7.2) (Number:fr3 10.0) (Number:fr4 2.0) (Number:fr5 1.0) (Number:fr6 16.0) (Number:fr7 5.0)) 
    (vmregRunInHardware start:)
	Next0::(vmregJmpLTInteger n1 n2 Next1:) (vmregAddImmediate 1 n1)    
	Next1::(vmregJmpLEInteger n2 n3 Next2:) (vmregAddImmediate 1 n1)    
	Next2::(vmregJmpEQInteger n3 n3 Next3:) (vmregAddImmediate 1 n1)    
	Next3::(vmregJmpNEInteger n4 n2 Next4:) (vmregAddImmediate 1 n1)    
	Next4::(vmregJmpGEInteger n5 n5 Next5:) (vmregAddImmediate 1 n1)    
	Next5::(vmregJmpGTInteger n6 n5 Next6:) (vmregAddImmediate 1 n1)    
	Next6::(vmregJmpGTInteger n7 n3 Next7:) (vmregAddImmediate 1 n1)    
	Next7::(vmregJmpLTInteger n3 n7 Next8:) (vmregAddImmediate 1 n1)    
    Next8::
    (vmregRunInHardware stop:)
    n1)
(testit "(string (testMe {vmregJmpCCInteger}))"  "0")

(defun testMe(w)
    regs:(NumPointer:p1 NumPointer:p2 (Integer:n1 0) (Integer:n2 1) (Integer:n3 2) (Integer:n4 3) (Integer:n5 4) (Integer:n6 5) (Integer:n7 6)) 
    regs:((Number:x1 1.0) (Number:x2 2.0) (Number:x3 3.0) (Number:x4 4.0) (Number:x5 5.0) (Number:x6 6.0) (Number:x7 7.0)) 
    (vmregRunInHardware start:)
	Next0::(vmregJmpLTNumber x1 x2 Next1:) (vmregAddImmediate 1 n1)    
	Next1::(vmregJmpLENumber x2 x3 Next2:) (vmregAddImmediate 1 n1)    
	Next2::(vmregJmpEQNumber x3 x3 Next3:) (vmregAddImmediate 1 n1)    
	Next3::(vmregJmpNENumber x4 x2 Next4:) (vmregAddImmediate 1 n1)    
	Next4::(vmregJmpGENumber x5 x5 Next5:) (vmregAddImmediate 1 n1)    
	Next5::(vmregJmpGTNumber x6 x5 Next6:) (vmregAddImmediate 1 n1)    
	Next6::(vmregJmpGTNumber x7 x3 Next7:) (vmregAddImmediate 1 n1)    
	Next7::(vmregJmpLTNumber x3 x7 Next8:) (vmregAddImmediate 1 n1)    
    Next8::
    (vmregRunInHardware stop:)
    n1)
(testit "(string (testMe {vmregJmpCCNumber}))"  "0")

(defun testMe(x)
    regs:(NumPointer:p1 NumPointer:p2 (Integer:n1 1) (Integer:n2 2) (Integer:n3 3) (Integer:n4 4) (Integer:n5 5) (Integer:n6 6) (Integer:n7 7)) 
    regs:((Number:x1 1.0) (Number:x2 2.0) (Number:x3 3.0) (Number:x4 4.0) (Number:x5 5.0) (Number:x6 6.0) (Number:x7 7.0)) 
    (vmregRunInHardware start:)
	(vmregAddImmediate 1 n1)    
	(vmregAddImmediate 1 n2)    
	(vmregAddImmediate 1 n3)    
	(vmregAddImmediate 1 n4)    
	(vmregAddImmediate 1 n5)    
	(vmregAddImmediate 1 n6)    
	(vmregAddImmediate 1 n7)    
    (vmregRunInHardware stop:)
    (+ n1 n2 n3 n4 n5 n6 n7))
(testit "(string (testMe {vmregAddImmediate}))"  "35")

(defun testMe(x)
    regs:(NumPointer:p1 NumPointer:p2 (Integer:n1 1) (Integer:n2 2) (Integer:n3 3) (Integer:n4 4) (Integer:n5 5) (Integer:n6 6) (Integer:n7 7)) 
    regs:((Number:x1 1.0) (Number:x2 2.0) (Number:x3 3.0) (Number:x4 4.0) (Number:x5 5.0) (Number:x6 6.0) (Number:x7 7.0)) 
    (vmregRunInHardware start:)
	(vmregAndImmediate 255 n1)    
	(vmregAndImmediate 255 n2)    
	(vmregAndImmediate 255 n3)    
	(vmregAndImmediate 255 n4)    
	(vmregAndImmediate 255 n5)    
	(vmregAndImmediate 255 n6)    
	(vmregAndImmediate 255 n7)    
    (vmregRunInHardware stop:)
    (+ n1 n2 n3 n4 n5 n6 n7))
(testit "(string (testMe {vmregAndImmediate}))"  "28")

(defun testMe(x)
    regs:(NumPointer:p1 NumPointer:p2 (Integer:n1 1) (Integer:n2 2) (Integer:n3 3) (Integer:n4 4) (Integer:n5 5) (Integer:n6 6) (Integer:n7 7)) 
    regs:((Number:x1 1.0) (Number:x2 2.0) (Number:x3 3.0) (Number:x4 4.0) (Number:x5 5.0) (Number:x6 6.0) (Number:x7 7.0)) 
    (vmregRunInHardware start:)
	(vmregOrImmediate 1 n1)    
	(vmregOrImmediate 1 n2)    
	(vmregOrImmediate 1 n3)    
	(vmregOrImmediate 1 n4)    
	(vmregOrImmediate 1 n5)    
	(vmregOrImmediate 1 n6)    
	(vmregOrImmediate 1 n7)    
    (vmregRunInHardware stop:)
    (+ n1 n2 n3 n4 n5 n6 n7))
(testit "(string (testMe {vmregOrImmediate}))"  "31")

(defun testMe(x)
    regs:(NumPointer:p1 NumPointer:p2 (Integer:n1 1) (Integer:n2 2) (Integer:n3 3) (Integer:n4 4) (Integer:n5 5) (Integer:n6 6) (Integer:n7 7)) 
    regs:((Number:x1 1.0) (Number:x2 2.0) (Number:x3 3.0) (Number:x4 4.0) (Number:x5 5.0) (Number:x6 6.0) (Number:x7 7.0)) 
    (vmregRunInHardware start:)
	(vmregXorImmediate 1 n1)    
	(vmregXorImmediate 1 n2)    
	(vmregXorImmediate 1 n3)    
	(vmregXorImmediate 1 n4)    
	(vmregXorImmediate 1 n5)    
	(vmregXorImmediate 1 n6)    
	(vmregXorImmediate 1 n7)    
    (vmregRunInHardware stop:)
    (+ n1 n2 n3 n4 n5 n6 n7))
(testit "(string (testMe {vmregXorImmediate}))"  "27")

(defun testMe(x)
    regs:(NumPointer:p1 NumPointer:p2 (Integer:n1 1) (Integer:n2 2) (Integer:n3 3) (Integer:n4 4) (Integer:n5 5) (Integer:n6 6) (Integer:n7 7)) 
    regs:((Number:x1 1.0) (Number:x2 2.0) (Number:x3 3.0) (Number:x4 4.0) (Number:x5 5.0) (Number:x6 6.0) (Number:x7 7.0)) 
    (vmregRunInHardware start:)
	(vmregSubImmediate 1 n1)    
	(vmregSubImmediate 1 n2)    
	(vmregSubImmediate 1 n3)    
	(vmregSubImmediate 1 n4)    
	(vmregSubImmediate 1 n5)    
	(vmregSubImmediate 1 n6)    
	(vmregSubImmediate 1 n7)    
    (vmregRunInHardware stop:)
    (+ n1 n2 n3 n4 n5 n6 n7))
(testit "(string (testMe {vmregSubImmediate}))"  "21")

(defun testMe(x)
    regs:(NumPointer:p1 NumPointer:p2 (Integer:n1 1) (Integer:n2 2) (Integer:n3 3) (Integer:n4 4) (Integer:n5 5) (Integer:n6 6) (Integer:n7 7)) 
    regs:((Number:x1 1.0) (Number:x2 2.0) (Number:x3 3.0) (Number:x4 4.0) (Number:x5 5.0) (Number:x6 6.0) (Number:x7 7.0)) 
    (vmregRunInHardware start:)
	(vmregShlImmediate 1 n1)    
	(vmregShlImmediate 1 n2)    
	(vmregShlImmediate 1 n3)    
	(vmregShlImmediate 1 n4)    
	(vmregShlImmediate 1 n5)    
	(vmregShlImmediate 1 n6)    
	(vmregShlImmediate 1 n7)    
    (vmregRunInHardware stop:)
    (+ n1 n2 n3 n4 n5 n6 n7))
(testit "(string (testMe {vmregShlImmediate}))"  "56")

(defun testMe(x)
    regs:(NumPointer:p1 NumPointer:p2 (Integer:n1 1) (Integer:n2 2) (Integer:n3 3) (Integer:n4 4) (Integer:n5 5) (Integer:n6 6) (Integer:n7 7)) 
    regs:((Number:x1 1.0) (Number:x2 2.0) (Number:x3 3.0) (Number:x4 4.0) (Number:x5 5.0) (Number:x6 6.0) (Number:x7 7.0)) 
    (vmregRunInHardware start:)
	(vmregShrImmediate 1 n1)    
	(vmregShrImmediate 1 n2)    
	(vmregShrImmediate 1 n3)    
	(vmregShrImmediate 1 n4)    
	(vmregShrImmediate 1 n5)    
	(vmregShrImmediate 1 n6)    
	(vmregShrImmediate 1 n7)    
    (vmregRunInHardware stop:)
    (+ n1 n2 n3 n4 n5 n6 n7))
(testit "(string (testMe {vmregShrImmediate}))"  "12")

(defun testMe(x)
    regs:(NumPointer:p1 NumPointer:p2 (Integer:n1 1) (Integer:n2 2) (Integer:n3 3) (Integer:n4 4) (Integer:n5 5) (Integer:n6 6) (Integer:n7 7)) 
    regs:((Number:x1 1.0) (Number:x2 2.0) (Number:x3 3.0) (Number:x4 4.0) (Number:x5 5.0) (Number:x6 6.0) (Number:x7 7.0)) 
    (vmregRunInHardware start:)
	(vmregMulImmediate 2 n1)    
	(vmregMulImmediate 2 n2)    
	(vmregMulImmediate 2 n3)    
	(vmregMulImmediate 2 n4)    
	(vmregMulImmediate 2 n5)    
	(vmregMulImmediate 2 n6)    
	(vmregMulImmediate 2 n7)    
    (vmregRunInHardware stop:)
    (+ n1 n2 n3 n4 n5 n6 n7))
(testit "(string (testMe {vmregMulImmediate}))"  "56")

(defun testMe(x)
    regs:(NumPointer:p1 NumPointer:p2 (Integer:n1 1) (Integer:n2 2) (Integer:n3 3) (Integer:n4 4) (Integer:n5 5) (Integer:n6 6) (Integer:n7 7)) 
    regs:((Number:x1 1.0) (Number:x2 2.0) (Number:x3 3.0) (Number:x4 4.0) (Number:x5 5.0) (Number:x6 6.0) (Number:x7 7.0)) 
    (vmregRunInHardware start:)
	(vmregDivImmediate 2 n1)    
	(vmregDivImmediate 2 n2)    
	(vmregDivImmediate 2 n3)    
	(vmregDivImmediate 2 n4)    
	(vmregDivImmediate 2 n5)    
	(vmregDivImmediate 2 n6)    
	(vmregDivImmediate 2 n7)    
    (vmregRunInHardware stop:)
    (+ n1 n2 n3 n4 n5 n6 n7))
(testit "(string (testMe {vmregDivImmediate}))"  "12")
  
(defun testMe(x)
    regs:(NumPointer:p1 NumPointer:p2 (Integer:n1 1) (Integer:n2 2) (Integer:n3 3) (Integer:n4 4) (Integer:n5 5) (Integer:n6 6) (Integer:n7 7)) 
    regs:((Number:x1 1.0) (Number:x2 2.0) (Number:x3 3.0) (Number:x4 4.0) (Number:x5 5.0) (Number:x6 6.0) (Number:x7 7.0)) 
    (vmregRunInHardware start:)
	(vmregAddInteger n1 n2)    
	(vmregAddInteger n2 n3)    
	(vmregAddInteger n3 n4)    
	(vmregAddInteger n4 n5)    
	(vmregAddInteger n5 n6)    
	(vmregAddInteger n6 n7)    
	(vmregAddInteger n7 n6)    
	(vmregAddInteger n6 n5)    
	(vmregAddInteger n5 n4)    
	(vmregAddInteger n4 n3)    
	(vmregAddInteger n3 n2)    
	(vmregAddInteger n2 n1)    
    (vmregRunInHardware stop:)
    (+ n1 n2 n3 n4 n5 n6 n7))
(testit "(string (testMe {vmregAddInteger}))"  "462")

(defun testMe(x)
    regs:(NumPointer:p1 NumPointer:p2 (Integer:n1 1) (Integer:n2 2) (Integer:n3 3) (Integer:n4 4) (Integer:n5 5) (Integer:n6 6) (Integer:n7 7)) 
    regs:((Number:x1 1.0) (Number:x2 2.0) (Number:x3 3.0) (Number:x4 4.0) (Number:x5 5.0) (Number:x6 6.0) (Number:x7 7.0)) 
    (vmregRunInHardware start:)
	(vmregSubInteger n1 n2)    
	(vmregSubInteger n2 n3)    
	(vmregSubInteger n3 n4)    
	(vmregSubInteger n4 n5)    
	(vmregSubInteger n5 n6)    
	(vmregSubInteger n6 n7)    
	(vmregSubInteger n7 n6)    
	(vmregSubInteger n6 n5)    
	(vmregSubInteger n5 n4)    
	(vmregSubInteger n4 n3)    
	(vmregSubInteger n3 n2)    
	(vmregSubInteger n2 n1)    
    (vmregRunInHardware stop:)
    (+ n1 n2 n3 n4 n5 n6 n7))
(testit "(string (testMe {vmregSubInteger}))"  "10")

(defun testMe(x)
    regs:(NumPointer:p1 NumPointer:p2 (Integer:n1 1) (Integer:n2 2) (Integer:n3 3) (Integer:n4 4) (Integer:n5 5) (Integer:n6 6) (Integer:n7 7)) 
    regs:((Number:x1 1.0) (Number:x2 2.0) (Number:x3 3.0) (Number:x4 4.0) (Number:x5 5.0) (Number:x6 6.0) (Number:x7 7.0)) 
    (vmregRunInHardware start:)
	(vmregAndInteger n1 n2)    
	(vmregAndInteger n2 n3)    
	(vmregAndInteger n3 n4)    
	(vmregAndInteger n4 n5)    
	(vmregAndInteger n5 n6)    
	(vmregAndInteger n6 n7)    
	(vmregAndInteger n7 n6)    
	(vmregAndInteger n6 n5)    
	(vmregAndInteger n5 n4)    
	(vmregAndInteger n4 n3)    
	(vmregAndInteger n3 n2)    
	(vmregAndInteger n2 n1)    
    (vmregRunInHardware stop:)
    (+ n1 n2 n3 n4 n5 n6 n7))
(testit "(string (testMe {vmregAndInteger}))"  "0")

(defun testMe(x)
    regs:(NumPointer:p1 NumPointer:p2 (Integer:n1 1) (Integer:n2 2) (Integer:n3 3) (Integer:n4 4) (Integer:n5 5) (Integer:n6 6) (Integer:n7 7)) 
    regs:((Number:x1 1.0) (Number:x2 2.0) (Number:x3 3.0) (Number:x4 4.0) (Number:x5 5.0) (Number:x6 6.0) (Number:x7 7.0)) 
    (vmregRunInHardware start:)
	(vmregOrInteger n1 n2)    
	(vmregOrInteger n2 n3)    
	(vmregOrInteger n3 n4)    
	(vmregOrInteger n4 n5)    
	(vmregOrInteger n5 n6)    
	(vmregOrInteger n6 n7)    
	(vmregOrInteger n7 n6)    
	(vmregOrInteger n6 n5)    
	(vmregOrInteger n5 n4)    
	(vmregOrInteger n4 n3)    
	(vmregOrInteger n3 n2)    
	(vmregOrInteger n2 n1)    
    (vmregRunInHardware stop:)
    (+ n1 n2 n3 n4 n5 n6 n7))
(testit "(string (testMe {vmregOrInteger}))"  "49")

(defun testMe(x)
    regs:(NumPointer:p1 NumPointer:p2 (Integer:n1 1) (Integer:n2 2) (Integer:n3 3) (Integer:n4 4) (Integer:n5 5) (Integer:n6 6) (Integer:n7 7)) 
    regs:((Number:x1 1.0) (Number:x2 2.0) (Number:x3 3.0) (Number:x4 4.0) (Number:x5 5.0) (Number:x6 6.0) (Number:x7 7.0)) 
    (vmregRunInHardware start:)
	(vmregXorInteger n1 n2)    
	(vmregXorInteger n2 n3)    
	(vmregXorInteger n3 n4)    
	(vmregXorInteger n4 n5)    
	(vmregXorInteger n5 n6)    
	(vmregXorInteger n6 n7)    
	(vmregXorInteger n7 n6)    
	(vmregXorInteger n6 n5)    
	(vmregXorInteger n5 n4)    
	(vmregXorInteger n4 n3)    
	(vmregXorInteger n3 n2)    
	(vmregXorInteger n2 n1)    
    (vmregRunInHardware stop:)
    (+ n1 n2 n3 n4 n5 n6 n7))
(testit "(string (testMe {vmregOrInteger}))"  "18")

(defun testMe(x)
    regs:(NumPointer:p1 NumPointer:p2 (Integer:n1 1) (Integer:n2 1) (Integer:n3 1) (Integer:n4 1) (Integer:n5 1) (Integer:n6 1) (Integer:n7 1)) 
    regs:((Number:x1 1.0) (Number:x2 2.0) (Number:x3 3.0) (Number:x4 4.0) (Number:x5 5.0) (Number:x6 6.0) (Number:x7 7.0)) 
    (vmregRunInHardware start:)
	(vmregShlInteger n2 n1)    
	(vmregShlInteger n2 n3)    
	(vmregShlInteger n2 n4)    
	(vmregShlInteger n2 n5)    
	(vmregShlInteger n2 n6)    
	(vmregShlInteger n2 n7)    
	(vmregShlInteger n7 n1)    
	(vmregShlInteger n7 n2)    
	(vmregShlInteger n7 n3)    
	(vmregShlInteger n7 n4)    
	(vmregShlInteger n7 n5)    
	(vmregShlInteger n7 n6)    
    (vmregRunInHardware stop:)
    (+ n1 n2 n3 n4 n5 n6 n7))
(testit "(string (testMe {vmregShlInteger}))"  "46")

(defun testMe(x)
    regs:(NumPointer:p1 NumPointer:p2 (Integer:n1 4) (Integer:n2 1) (Integer:n3 4) (Integer:n4 4) (Integer:n5 4) (Integer:n6 4) (Integer:n7 2)) 
    regs:((Number:x1 1.0) (Number:x2 2.0) (Number:x3 3.0) (Number:x4 4.0) (Number:x5 5.0) (Number:x6 6.0) (Number:x7 7.0)) 
    (vmregRunInHardware start:)
	(vmregShrInteger n2 n1)    
	(vmregShrInteger n2 n3)    
	(vmregShrInteger n2 n4)    
	(vmregShrInteger n2 n5)    
	(vmregShrInteger n2 n6)    
	(vmregShrInteger n2 n7)    
	(vmregShrInteger n7 n1)    
	(vmregShrInteger n7 n2)    
	(vmregShrInteger n7 n3)    
	(vmregShrInteger n7 n4)    
	(vmregShrInteger n7 n5)    
	(vmregShrInteger n7 n6)    
    (vmregRunInHardware stop:)
    (+ n1 n2 n3 n4 n5 n6 n7))
(testit "(string (testMe {vmregShrInteger}))"  "6")

(defun testMe(x)
    regs:(NumPointer:p1 NumPointer:p2 (Integer:n1 1) (Integer:n2 2) (Integer:n3 3) (Integer:n4 4) (Integer:n5 5) (Integer:n6 6) (Integer:n7 7)) 
    regs:((Number:x1 1.0) (Number:x2 2.0) (Number:x3 3.0) (Number:x4 4.0) (Number:x5 5.0) (Number:x6 6.0) (Number:x7 7.0)) 
    (vmregRunInHardware start:)
	(vmregMulInteger n1 n2)    
(if (= _ais.bits 64) (vmregMulInteger n2 n3))
	(vmregMulInteger n3 n4)    
	(vmregMulInteger n4 n5)    
	(vmregMulInteger n5 n6)    
	(vmregMulInteger n6 n7)    
	(vmregMulInteger n7 n6)    
	(vmregMulInteger n6 n5)    
	(vmregMulInteger n5 n4)    
	(vmregMulInteger n4 n3)    
	(vmregMulInteger n3 n2)    
	(vmregMulInteger n2 n1)    
    (vmregRunInHardware stop:)
    (+ n1 n2 n3 n4 n5 n6 n7))
(testit "(string (testMe {vmregMulInteger}))"  (if (= _ais.bits 64) "324418353840" "1916351128"))

(defun testMe(x)
    regs:(NumPointer:p1 NumPointer:p2 (Integer:n1 1) (Integer:n2 2) (Integer:n3 30) (Integer:n4 40) (Integer:n5 50) (Integer:n6 60) (Integer:n7 70)) 
    regs:((Number:x1 1.0) (Number:x2 2.0) (Number:x3 3.0) (Number:x4 4.0) (Number:x5 5.0) (Number:x6 6.0) (Number:x7 7.0)) 
    (vmregRunInHardware start:)
	(vmregDivInteger n1 n1)    
	(vmregDivInteger n1 n2)    
	(vmregDivInteger n1 n3)    
	(vmregDivInteger n1 n4)    
	(vmregDivInteger n1 n5)    
	(vmregDivInteger n1 n6)    
	(vmregDivInteger n1 n7)    
	(vmregDivInteger n2 n7)    
	(vmregDivInteger n2 n6)    
	(vmregDivInteger n2 n5)    
	(vmregDivInteger n2 n4)    
	(vmregDivInteger n2 n3)    
	(vmregDivInteger n2 n2)    
	(vmregDivInteger n2 n1)    
    (vmregRunInHardware stop:)
    (+ n1 n2 n3 n4 n5 n6 n7))
(testit "(string (testMe {vmregDivInteger}))"  "127")

(defun testMe(x)
    regs:(IntPointer:p1 IntPointer:p2) 
    regs:((Integer:n1 0) (Integer:n2 1) (Integer:n3 2) (Integer:n4 3) (Integer:n5 4) (Integer:n6 5) (Integer:n7 6)) 
    regs:((Number:x1 4.5) (Number:x2 7.2) (Number:x3 10.0) (Number:x4 2.0) (Number:x5 1.0) (Number:x6 16.0) (Number:x7 5.0)) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: integer: 7 0 1 2 3 4 5 6))
    (setq v2 (new Vector: integer: 7 0 1 2 3 4 5 6))
    (vmregObjPointer v1 p1)
    (vmregObjPointer v2 p2)
    (vmregRunInHardware start:)
	(vmregRefXInteger p1 n1 n7)    
	(vmregRefXInteger p1 n2 n6)    
	(vmregRefXInteger p1 n3 n5)    
	(vmregRefXInteger p1 n4 n4)    
	(vmregRefXInteger p1 n5 n3)    
	(vmregRefXInteger p1 n6 n2)    
	(vmregRefXInteger p1 n7 n1)    
    (vmregRunInHardware stop:)
    (setq y (+ n1 n2 n3 n4 n5 n6 n7))
    (vmregRunInHardware start:)
	(vmregRefXInteger p1 n1 n7)    
	(vmregRefXInteger p1 n2 n6)    
	(vmregRefXInteger p1 n3 n5)    
	(vmregRefXInteger p1 n4 n4)    
	(vmregRefXInteger p1 n5 n3)    
	(vmregRefXInteger p1 n6 n2)    
	(vmregRefXInteger p1 n7 n1)    
	(vmregRefXInteger p2 n7 n1)    
	(vmregRefXInteger p2 n6 n2)    
	(vmregRefXInteger p2 n5 n3)    
	(vmregRefXInteger p2 n4 n4)    
	(vmregRefXInteger p2 n3 n5)    
	(vmregRefXInteger p2 n2 n6)    
	(vmregRefXInteger p2 n1 n7)    
    (vmregRunInHardware stop:)
    (setq y (+ y n1 n2 n3 n4 n5 n6 n7))
    y)
(testit "(string (testMe {vmregRefXInteger}))"  "18")

(defun testMe(x)
    regs:(IntPointer:p1 IntPointer:p2) 
    regs:((Integer:n1 0) (Integer:n2 1) (Integer:n3 2) (Integer:n4 3) (Integer:n5 4) (Integer:n6 5) (Integer:n7 6)) 
    regs:((Number:x1 4.5) (Number:x2 7.2) (Number:x3 10.0) (Number:x4 2.0) (Number:x5 1.0) (Number:x6 16.0) (Number:x7 5.0)) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: integer: 7))
    (setq v2 (new Vector: integer: 7))
    (vmregObjPointer v1 p1)
    (vmregObjPointer v2 p2)
    (vmregRunInHardware start:)
	(vmregSetXInteger n1 n1 p1)    
	(vmregSetXInteger n2 n1 p1)    
	(vmregSetXInteger n3 n1 p1)    
	(vmregSetXInteger n4 n1 p1)    
	(vmregSetXInteger n5 n1 p1)    
	(vmregSetXInteger n6 n1 p1)    
	(vmregSetXInteger n7 n1 p1)    
	(vmregSetXInteger n1 n2 p1)    
	(vmregSetXInteger n2 n2 p1)    
	(vmregSetXInteger n3 n2 p1)    
	(vmregSetXInteger n4 n2 p1)    
	(vmregSetXInteger n5 n2 p1)    
	(vmregSetXInteger n6 n2 p1)    
	(vmregSetXInteger n7 n2 p1)    
	(vmregSetXInteger n1 n3 p1)    
	(vmregSetXInteger n2 n3 p1)    
	(vmregSetXInteger n3 n3 p1)    
	(vmregSetXInteger n4 n3 p1)    
	(vmregSetXInteger n5 n3 p1)    
	(vmregSetXInteger n6 n3 p1)    
	(vmregSetXInteger n7 n3 p1)    
	(vmregSetXInteger n1 n4 p1)    
	(vmregSetXInteger n2 n4 p1)    
	(vmregSetXInteger n3 n4 p1)    
	(vmregSetXInteger n4 n4 p1)    
	(vmregSetXInteger n5 n4 p1)    
	(vmregSetXInteger n6 n4 p1)    
	(vmregSetXInteger n7 n4 p1)    
	(vmregSetXInteger n1 n5 p1)    
	(vmregSetXInteger n2 n5 p1)    
	(vmregSetXInteger n3 n5 p1)    
	(vmregSetXInteger n4 n5 p1)    
	(vmregSetXInteger n5 n5 p1)    
	(vmregSetXInteger n6 n5 p1)    
	(vmregSetXInteger n7 n5 p1)    
	(vmregSetXInteger n1 n1 p2)    
	(vmregSetXInteger n2 n1 p2)    
	(vmregSetXInteger n3 n1 p2)    
	(vmregSetXInteger n4 n1 p2)    
	(vmregSetXInteger n5 n1 p2)    
	(vmregSetXInteger n6 n1 p2)    
	(vmregSetXInteger n7 n1 p2)    
	(vmregSetXInteger n1 n2 p2)    
	(vmregSetXInteger n2 n2 p2)    
	(vmregSetXInteger n3 n2 p2)    
	(vmregSetXInteger n4 n2 p2)    
	(vmregSetXInteger n5 n2 p2)    
	(vmregSetXInteger n6 n2 p2)    
	(vmregSetXInteger n7 n2 p2)    
	(vmregSetXInteger n1 n3 p2)    
	(vmregSetXInteger n2 n3 p2)    
	(vmregSetXInteger n3 n3 p2)    
	(vmregSetXInteger n4 n3 p2)    
	(vmregSetXInteger n5 n3 p2)    
	(vmregSetXInteger n6 n3 p2)    
	(vmregSetXInteger n7 n3 p2)    
	(vmregSetXInteger n1 n4 p2)    
	(vmregSetXInteger n2 n4 p2)    
	(vmregSetXInteger n3 n4 p2)    
	(vmregSetXInteger n4 n4 p2)    
	(vmregSetXInteger n5 n4 p2)    
	(vmregSetXInteger n6 n4 p2)    
	(vmregSetXInteger n7 n4 p2)    
	(vmregSetXInteger n1 n5 p2)    
	(vmregSetXInteger n2 n5 p2)    
	(vmregSetXInteger n3 n5 p2)    
	(vmregSetXInteger n4 n5 p2)    
	(vmregSetXInteger n5 n5 p2)    
	(vmregSetXInteger n6 n5 p2)    
	(vmregSetXInteger n7 n5 p2)    
    (vmregRunInHardware stop:)
    (setq y (sum v1 v2))
    y)
(testit "(string (testMe {vmregSetXInteger}))"  "60.0")

(defun testMe(x)
    regs:(FloatPointer:p1 FloatPointer:p2 (Integer:n1 0) (Integer:n2 1) (Integer:n3 2) (Integer:n4 3) (Integer:n5 4) (Integer:n6 5) (Integer:n7 6)) 
    regs:((Number:x1 4.5) (Number:x2 7.2) (Number:x3 10.0) (Number:x4 2.0) (Number:x5 1.0) (Number:x6 16.0) (Number:x7 5.0)) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: float: 7 1 2 3 4 5 6 7))
    (setq v2 (new Vector: float: 7 1 2 3 4 5 6 7))
    (vmregObjPointer v1 p1)
    (vmregObjPointer v2 p2)
    (vmregRunInHardware start:)
	(vmregRefXFloat p1 n1 x1)    
	(vmregRefXFloat p1 n2 x2)    
	(vmregRefXFloat p1 n3 x3)    
	(vmregRefXFloat p1 n4 x4)    
	(vmregRefXFloat p1 n5 x5)    
	(vmregRefXFloat p1 n6 x6)    
	(vmregRefXFloat p1 n7 x7)    
    (vmregRunInHardware stop:)
    (setq y (+ x1 x2 x3 x4 x5 x6 x7))
    (vmregRunInHardware start:)
	(vmregRefXFloat p1 n1 x1)    
	(vmregRefXFloat p1 n2 x2)    
	(vmregRefXFloat p1 n3 x3)    
	(vmregRefXFloat p1 n4 x4)    
	(vmregRefXFloat p1 n5 x5)    
	(vmregRefXFloat p1 n6 x6)    
	(vmregRefXFloat p1 n7 x7)    
	(vmregRefXFloat p2 n1 x1)    
	(vmregRefXFloat p2 n2 x2)    
	(vmregRefXFloat p2 n3 x3)    
	(vmregRefXFloat p2 n4 x4)    
	(vmregRefXFloat p2 n5 x5)    
	(vmregRefXFloat p2 n6 x6)    
	(vmregRefXFloat p2 n7 x7)    
    (vmregRunInHardware stop:)
    (setq y (+ y x1 x2 x3 x4 x5 x6 x7))
    y)
(testit "(string (testMe {vmregRefXFloat}))"  "56.0")

(defun testMe(title)
    regs:(FloatPointer:p1 FloatPointer:p2 (Integer:n1 0) (Integer:n2 1) (Integer:n3 2) (Integer:n4 3) (Integer:n5 4) (Integer:n6 5) (Integer:n7 6)) 
    regs:((Number:x1 4.5) (Number:x2 7.2) (Number:x3 10.0) (Number:x4 2.0) (Number:x5 1.0) (Number:x6 16.0) (Number:x7 5.0)) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: float: 7))
    (setq v2 (new Vector: float: 7))
    (vmregObjPointer v1 p1)
    (vmregObjPointer v2 p2)
    (vmregRunInHardware start:)
	(vmregSetXFloat x1 n1 p1)    
	(vmregSetXFloat x2 n2 p1)    
	(vmregSetXFloat x3 n3 p1)    
	(vmregSetXFloat x4 n4 p1)    
	(vmregSetXFloat x5 n5 p1)    
	(vmregSetXFloat x6 n6 p1)    
	(vmregSetXFloat x1 n1 p2)    
	(vmregSetXFloat x2 n2 p2)    
	(vmregSetXFloat x3 n3 p2)    
	(vmregSetXFloat x4 n4 p2)    
	(vmregSetXFloat x5 n5 p2)    
	(vmregSetXFloat x6 n6 p2)    
    (vmregRunInHardware stop:)
    (setq y (sum v1 v2))
    (integer y))
(testit "(string (testMe {vmregSetXFloat}))"  "81")

(defun testMe(x)
    regs:(CharPointer:p1 CharPointer:p2) 
    regs:((Integer:n1 0) (Integer:n2 1) (Integer:n3 2) (Integer:n4 3) (Integer:n5 4) (Integer:n6 5) (Integer:n7 6)) 
    regs:((Number:x1 4.5) (Number:x2 7.2) (Number:x3 10.0) (Number:x4 2.0) (Number:x5 1.0) (Number:x6 16.0) (Number:x7 5.0)) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: byte: 7 0 1 2 3 4 5 6))
    (setq v2 (new Vector: byte: 7 0 1 2 3 4 5 6))
    (vmregObjPointer v1 p1)
    (vmregObjPointer v2 p2)
    (vmregRunInHardware start:)
	(vmregRefXCharacter p1 n1 n7)    
	(vmregRefXCharacter p1 n2 n6)    
	(vmregRefXCharacter p1 n3 n5)    
	(vmregRefXCharacter p1 n4 n4)    
	(vmregRefXCharacter p1 n5 n3)    
	(vmregRefXCharacter p1 n6 n2)    
	(vmregRefXCharacter p1 n7 n1)    
    (vmregRunInHardware stop:)
    (setq y (+ n1 n2 n3 n4 n5 n6 n7))
    (vmregRunInHardware start:)
	(vmregRefXCharacter p1 n1 n7)    
	(vmregRefXCharacter p1 n2 n6)    
	(vmregRefXCharacter p1 n3 n5)    
	(vmregRefXCharacter p1 n4 n4)    
	(vmregRefXCharacter p1 n5 n3)    
	(vmregRefXCharacter p1 n6 n2)    
	(vmregRefXCharacter p1 n7 n1)    
	(vmregRefXCharacter p2 n7 n1)    
	(vmregRefXCharacter p2 n6 n2)    
	(vmregRefXCharacter p2 n5 n3)    
	(vmregRefXCharacter p2 n4 n4)    
	(vmregRefXCharacter p2 n3 n5)    
	(vmregRefXCharacter p2 n2 n6)    
	(vmregRefXCharacter p2 n1 n7)    
    (vmregRunInHardware stop:)
    (setq y (+ y n1 n2 n3 n4 n5 n6 n7))
    y)
(testit "(string (testMe {vmregRefXCharacter}))"  "18")

(defun testMe(x)
    regs:(ShortPointer:p1 ShortPointer:p2) 
    regs:((Integer:n1 0) (Integer:n2 1) (Integer:n3 2) (Integer:n4 3) (Integer:n5 4) (Integer:n6 5) (Integer:n7 6)) 
    regs:((Number:x1 4.5) (Number:x2 7.2) (Number:x3 10.0) (Number:x4 2.0) (Number:x5 1.0) (Number:x6 16.0) (Number:x7 5.0)) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: short: 7 0 1 2 3 4 5 6))
    (setq v2 (new Vector: short: 7 0 1 2 3 4 5 6))
    (vmregObjPointer v1 p1)
    (vmregObjPointer v2 p2)
    (vmregRunInHardware start:)
	(vmregRefXShort p1 n1 n7)    
	(vmregRefXShort p1 n2 n6)    
	(vmregRefXShort p1 n3 n5)    
	(vmregRefXShort p1 n4 n4)    
	(vmregRefXShort p1 n5 n3)    
	(vmregRefXShort p1 n6 n2)    
	(vmregRefXShort p1 n7 n1)    
    (vmregRunInHardware stop:)
    (setq y (+ n1 n2 n3 n4 n5 n6 n7))
    (vmregRunInHardware start:)
	(vmregRefXShort p1 n1 n7)    
	(vmregRefXShort p1 n2 n6)    
	(vmregRefXShort p1 n3 n5)    
	(vmregRefXShort p1 n4 n4)    
	(vmregRefXShort p1 n5 n3)    
	(vmregRefXShort p1 n6 n2)    
	(vmregRefXShort p1 n7 n1)    
	(vmregRefXShort p2 n7 n1)    
	(vmregRefXShort p2 n6 n2)    
	(vmregRefXShort p2 n5 n3)    
	(vmregRefXShort p2 n4 n4)    
	(vmregRefXShort p2 n3 n5)    
	(vmregRefXShort p2 n2 n6)    
	(vmregRefXShort p2 n1 n7)    
    (vmregRunInHardware stop:)
    (setq y (+ y n1 n2 n3 n4 n5 n6 n7))
    y)
(testit "(string (testMe {vmregRefXShort}))"  "18")

(defun testMe(x)
    regs:(ShortPointer:p1 ShortPointer:p2) 
    regs:((Integer:n1 0) (Integer:n2 1) (Integer:n3 2) (Integer:n4 3) (Integer:n5 4) (Integer:n6 5) (Integer:n7 6)) 
    regs:((Number:x1 4.5) (Number:x2 7.2) (Number:x3 10.0) (Number:x4 2.0) (Number:x5 1.0) (Number:x6 16.0) (Number:x7 5.0)) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: short: 7))
    (setq v2 (new Vector: short: 7))
    (vmregObjPointer v1 p1)
    (vmregObjPointer v2 p2)
    (vmregRunInHardware start:)
	(vmregSetXShort n1 n1 p1)    
	(vmregSetXShort n2 n1 p1)    
	(vmregSetXShort n3 n1 p1)    
	(vmregSetXShort n4 n1 p1)    
	(vmregSetXShort n5 n1 p1)    
	(vmregSetXShort n6 n1 p1)    
	(vmregSetXShort n7 n1 p1)    
	(vmregSetXShort n1 n2 p1)    
	(vmregSetXShort n2 n2 p1)    
	(vmregSetXShort n3 n2 p1)    
	(vmregSetXShort n4 n2 p1)    
	(vmregSetXShort n5 n2 p1)    
	(vmregSetXShort n6 n2 p1)    
	(vmregSetXShort n7 n2 p1)    
	(vmregSetXShort n1 n3 p1)    
	(vmregSetXShort n2 n3 p1)    
	(vmregSetXShort n3 n3 p1)    
	(vmregSetXShort n4 n3 p1)    
	(vmregSetXShort n5 n3 p1)    
	(vmregSetXShort n6 n3 p1)    
	(vmregSetXShort n7 n3 p1)    
	(vmregSetXShort n1 n4 p1)    
	(vmregSetXShort n2 n4 p1)    
	(vmregSetXShort n3 n4 p1)    
	(vmregSetXShort n4 n4 p1)    
	(vmregSetXShort n5 n4 p1)    
	(vmregSetXShort n6 n4 p1)    
	(vmregSetXShort n7 n4 p1)    
	(vmregSetXShort n1 n5 p1)    
	(vmregSetXShort n2 n5 p1)    
	(vmregSetXShort n3 n5 p1)    
	(vmregSetXShort n4 n5 p1)    
	(vmregSetXShort n5 n5 p1)    
	(vmregSetXShort n6 n5 p1)    
	(vmregSetXShort n7 n5 p1)    
	(vmregSetXShort n1 n1 p2)    
	(vmregSetXShort n2 n1 p2)    
	(vmregSetXShort n3 n1 p2)    
	(vmregSetXShort n4 n1 p2)    
	(vmregSetXShort n5 n1 p2)    
	(vmregSetXShort n6 n1 p2)    
	(vmregSetXShort n7 n1 p2)    
	(vmregSetXShort n1 n2 p2)    
	(vmregSetXShort n2 n2 p2)    
	(vmregSetXShort n3 n2 p2)    
	(vmregSetXShort n4 n2 p2)    
	(vmregSetXShort n5 n2 p2)    
	(vmregSetXShort n6 n2 p2)    
	(vmregSetXShort n7 n2 p2)    
	(vmregSetXShort n1 n3 p2)    
	(vmregSetXShort n2 n3 p2)    
	(vmregSetXShort n3 n3 p2)    
	(vmregSetXShort n4 n3 p2)    
	(vmregSetXShort n5 n3 p2)    
	(vmregSetXShort n6 n3 p2)    
	(vmregSetXShort n7 n3 p2)    
	(vmregSetXShort n1 n4 p2)    
	(vmregSetXShort n2 n4 p2)    
	(vmregSetXShort n3 n4 p2)    
	(vmregSetXShort n4 n4 p2)    
	(vmregSetXShort n5 n4 p2)    
	(vmregSetXShort n6 n4 p2)    
	(vmregSetXShort n7 n4 p2)    
	(vmregSetXShort n1 n5 p2)    
	(vmregSetXShort n2 n5 p2)    
	(vmregSetXShort n3 n5 p2)    
	(vmregSetXShort n4 n5 p2)    
	(vmregSetXShort n5 n5 p2)    
	(vmregSetXShort n6 n5 p2)    
	(vmregSetXShort n7 n5 p2)    
    (vmregRunInHardware stop:)
    (setq y (sum v1 v2))
    y)
(testit "(string (testMe {vmregSetXShort}))"  "60.0")

(defun testMe(x)
    regs:(CharPointer:p1 CharPointer:p2) 
    regs:((Integer:n1 0) (Integer:n2 1) (Integer:n3 2) (Integer:n4 3) (Integer:n5 4) (Integer:n6 5) (Integer:n7 6)) 
    regs:((Number:x1 4.5) (Number:x2 7.2) (Number:x3 10.0) (Number:x4 2.0) (Number:x5 1.0) (Number:x6 16.0) (Number:x7 5.0)) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: byte: 7))
    (setq v2 (new Vector: byte: 7))
    (vmregObjPointer v1 p1)
    (vmregObjPointer v2 p2)
    (vmregRunInHardware start:)
	(vmregSetXCharacter n1 n1 p1)    
	(vmregSetXCharacter n2 n1 p1)    
	(vmregSetXCharacter n3 n1 p1)    
	(vmregSetXCharacter n4 n1 p1)    
	(vmregSetXCharacter n5 n1 p1)    
	(vmregSetXCharacter n6 n1 p1)    
	(vmregSetXCharacter n7 n1 p1)    
	(vmregSetXCharacter n1 n2 p1)    
	(vmregSetXCharacter n2 n2 p1)    
	(vmregSetXCharacter n3 n2 p1)    
	(vmregSetXCharacter n4 n2 p1)    
	(vmregSetXCharacter n5 n2 p1)    
	(vmregSetXCharacter n6 n2 p1)    
	(vmregSetXCharacter n7 n2 p1)    
	(vmregSetXCharacter n1 n3 p1)    
	(vmregSetXCharacter n2 n3 p1)    
	(vmregSetXCharacter n3 n3 p1)    
	(vmregSetXCharacter n4 n3 p1)    
	(vmregSetXCharacter n5 n3 p1)    
	(vmregSetXCharacter n6 n3 p1)    
	(vmregSetXCharacter n7 n3 p1)    
	(vmregSetXCharacter n1 n4 p1)    
	(vmregSetXCharacter n2 n4 p1)    
	(vmregSetXCharacter n3 n4 p1)    
	(vmregSetXCharacter n4 n4 p1)    
	(vmregSetXCharacter n5 n4 p1)    
	(vmregSetXCharacter n6 n4 p1)    
	(vmregSetXCharacter n7 n4 p1)    
	(vmregSetXCharacter n1 n5 p1)    
	(vmregSetXCharacter n2 n5 p1)    
	(vmregSetXCharacter n3 n5 p1)    
	(vmregSetXCharacter n4 n5 p1)    
	(vmregSetXCharacter n5 n5 p1)    
	(vmregSetXCharacter n6 n5 p1)    
	(vmregSetXCharacter n7 n5 p1)    
	(vmregSetXCharacter n1 n1 p2)    
	(vmregSetXCharacter n2 n1 p2)    
	(vmregSetXCharacter n3 n1 p2)    
	(vmregSetXCharacter n4 n1 p2)    
	(vmregSetXCharacter n5 n1 p2)    
	(vmregSetXCharacter n6 n1 p2)    
	(vmregSetXCharacter n7 n1 p2)    
	(vmregSetXCharacter n1 n2 p2)    
	(vmregSetXCharacter n2 n2 p2)    
	(vmregSetXCharacter n3 n2 p2)    
	(vmregSetXCharacter n4 n2 p2)    
	(vmregSetXCharacter n5 n2 p2)    
	(vmregSetXCharacter n6 n2 p2)    
	(vmregSetXCharacter n7 n2 p2)    
	(vmregSetXCharacter n1 n3 p2)    
	(vmregSetXCharacter n2 n3 p2)    
	(vmregSetXCharacter n3 n3 p2)    
	(vmregSetXCharacter n4 n3 p2)    
	(vmregSetXCharacter n5 n3 p2)    
	(vmregSetXCharacter n6 n3 p2)    
	(vmregSetXCharacter n7 n3 p2)    
	(vmregSetXCharacter n1 n4 p2)    
	(vmregSetXCharacter n2 n4 p2)    
	(vmregSetXCharacter n3 n4 p2)    
	(vmregSetXCharacter n4 n4 p2)    
	(vmregSetXCharacter n5 n4 p2)    
	(vmregSetXCharacter n6 n4 p2)    
	(vmregSetXCharacter n7 n4 p2)    
	(vmregSetXCharacter n1 n5 p2)    
	(vmregSetXCharacter n2 n5 p2)    
	(vmregSetXCharacter n3 n5 p2)    
	(vmregSetXCharacter n4 n5 p2)    
	(vmregSetXCharacter n5 n5 p2)    
	(vmregSetXCharacter n6 n5 p2)    
	(vmregSetXCharacter n7 n5 p2)    
    (vmregRunInHardware stop:)
    (setq y (sum v1 v2))
    y)
(testit "(string (testMe {vmregSetXCharacter}))"  "60.0")

(defun testMe(x)
    regs:(IntPointer:p1 IntPointer:p2) 
    regs:((Integer:n1 0) (Integer:n2 1) (Integer:n3 2) (Integer:n4 3) (Integer:n5 4) (Integer:n6 5) (Integer:n7 6)) 
    regs:((Number:x1 4.5) (Number:x2 7.2) (Number:x3 10.0) (Number:x4 2.0) (Number:x5 1.0) (Number:x6 16.0) (Number:x7 5.0)) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: integer: 7))
    (setq v2 (new Vector: integer: 7))
    (vmregObjPointer v1 p1)
    (vmregObjPointer v2 p2)
    (vmregRunInHardware start:)
	(vmregSetXIntImmediate 1 n1 p1)    
	(vmregSetXIntImmediate 2 n2 p1)    
	(vmregSetXIntImmediate 3 n3 p1)    
	(vmregSetXIntImmediate 4 n4 p1)    
	(vmregSetXIntImmediate 5 n5 p1)    
	(vmregSetXIntImmediate 6 n6 p1)    
	(vmregSetXIntImmediate 7 n7 p1)    
	(vmregSetXIntImmediate 1 n1 p1)    
	(vmregSetXIntImmediate 2 n2 p1)    
	(vmregSetXIntImmediate 3 n3 p1)    
	(vmregSetXIntImmediate 4 n4 p1)    
	(vmregSetXIntImmediate 5 n5 p1)    
	(vmregSetXIntImmediate 6 n6 p1)    
	(vmregSetXIntImmediate 7 n7 p1)    
	(vmregSetXIntImmediate 1 n1 p1)    
	(vmregSetXIntImmediate 2 n2 p1)    
	(vmregSetXIntImmediate 3 n3 p1)    
	(vmregSetXIntImmediate 4 n4 p1)    
	(vmregSetXIntImmediate 5 n5 p1)    
	(vmregSetXIntImmediate 6 n6 p1)    
	(vmregSetXIntImmediate 7 n7 p1)    
	(vmregSetXIntImmediate 1 n1 p1)    
	(vmregSetXIntImmediate 2 n2 p1)    
	(vmregSetXIntImmediate 3 n3 p1)    
	(vmregSetXIntImmediate 4 n4 p1)    
	(vmregSetXIntImmediate 5 n5 p1)    
	(vmregSetXIntImmediate 6 n6 p1)    
	(vmregSetXIntImmediate 7 n7 p1)    
	(vmregSetXIntImmediate 1 n1 p1)    
	(vmregSetXIntImmediate 2 n2 p1)    
	(vmregSetXIntImmediate 3 n3 p1)    
	(vmregSetXIntImmediate 4 n4 p1)    
	(vmregSetXIntImmediate 5 n5 p1)    
	(vmregSetXIntImmediate 6 n6 p1)    
	(vmregSetXIntImmediate 7 n7 p1)    
	(vmregSetXIntImmediate 1 n1 p2)    
	(vmregSetXIntImmediate 2 n2 p2)    
	(vmregSetXIntImmediate 3 n3 p2)    
	(vmregSetXIntImmediate 4 n4 p2)    
	(vmregSetXIntImmediate 5 n5 p2)    
	(vmregSetXIntImmediate 6 n6 p2)    
	(vmregSetXIntImmediate 7 n7 p2)    
    (vmregRunInHardware stop:)
    (setq y (sum v1 v2))
    y)
(testit "(string (testMe {vmregSetXIntImmediate}))"  "56.0")

(defun testMe(x)
    regs:(ShortPointer:p1 ShortPointer:p2) 
    regs:((Integer:n1 0) (Integer:n2 1) (Integer:n3 2) (Integer:n4 3) (Integer:n5 4) (Integer:n6 5) (Integer:n7 6)) 
    regs:((Number:x1 4.5) (Number:x2 7.2) (Number:x3 10.0) (Number:x4 2.0) (Number:x5 1.0) (Number:x6 16.0) (Number:x7 5.0)) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: short: 7))
    (setq v2 (new Vector: short: 7))
    (vmregObjPointer v1 p1)
    (vmregObjPointer v2 p2)
    (vmregRunInHardware start:)
	(vmregSetXShortImmediate 1 n1 p1)    
	(vmregSetXShortImmediate 2 n2 p1)    
	(vmregSetXShortImmediate 3 n3 p1)    
	(vmregSetXShortImmediate 4 n4 p1)    
	(vmregSetXShortImmediate 5 n5 p1)    
	(vmregSetXShortImmediate 6 n6 p1)    
	(vmregSetXShortImmediate 7 n7 p1)    
	(vmregSetXShortImmediate 1 n1 p1)    
	(vmregSetXShortImmediate 2 n2 p1)    
	(vmregSetXShortImmediate 3 n3 p1)    
	(vmregSetXShortImmediate 4 n4 p1)    
	(vmregSetXShortImmediate 5 n5 p1)    
	(vmregSetXShortImmediate 6 n6 p1)    
	(vmregSetXShortImmediate 7 n7 p1)    
	(vmregSetXShortImmediate 1 n1 p1)    
	(vmregSetXShortImmediate 2 n2 p1)    
	(vmregSetXShortImmediate 3 n3 p1)    
	(vmregSetXShortImmediate 4 n4 p1)    
	(vmregSetXShortImmediate 5 n5 p1)    
	(vmregSetXShortImmediate 6 n6 p1)    
	(vmregSetXShortImmediate 7 n7 p1)    
	(vmregSetXShortImmediate 1 n1 p1)    
	(vmregSetXShortImmediate 2 n2 p1)    
	(vmregSetXShortImmediate 3 n3 p1)    
	(vmregSetXShortImmediate 4 n4 p1)    
	(vmregSetXShortImmediate 5 n5 p1)    
	(vmregSetXShortImmediate 6 n6 p1)    
	(vmregSetXShortImmediate 7 n7 p1)    
	(vmregSetXShortImmediate 1 n1 p1)    
	(vmregSetXShortImmediate 2 n2 p1)    
	(vmregSetXShortImmediate 3 n3 p1)    
	(vmregSetXShortImmediate 4 n4 p1)    
	(vmregSetXShortImmediate 5 n5 p1)    
	(vmregSetXShortImmediate 6 n6 p1)    
	(vmregSetXShortImmediate 7 n7 p1)    
	(vmregSetXShortImmediate 1 n1 p2)    
	(vmregSetXShortImmediate 2 n2 p2)    
	(vmregSetXShortImmediate 3 n3 p2)    
	(vmregSetXShortImmediate 4 n4 p2)    
	(vmregSetXShortImmediate 5 n5 p2)    
	(vmregSetXShortImmediate 6 n6 p2)    
	(vmregSetXShortImmediate 7 n7 p2)    
    (vmregRunInHardware stop:)
    (setq y (sum v1 v2))
    y)
(testit "(string (testMe {vmregSetXShortImmediate}))"  "56.0")

(defun testMe(x)
    regs:(CharPointer:p1 CharPointer:p2) 
    regs:((Integer:n1 0) (Integer:n2 1) (Integer:n3 2) (Integer:n4 3) (Integer:n5 4) (Integer:n6 5) (Integer:n7 6)) 
    regs:((Number:x1 4.5) (Number:x2 7.2) (Number:x3 10.0) (Number:x4 2.0) (Number:x5 1.0) (Number:x6 16.0) (Number:x7 5.0)) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: byte: 7))
    (setq v2 (new Vector: byte: 7))
    (vmregObjPointer v1 p1)
    (vmregObjPointer v2 p2)
    (vmregRunInHardware start:)
	(vmregSetXCharImmediate 1 n1 p1)    
	(vmregSetXCharImmediate 2 n2 p1)    
	(vmregSetXCharImmediate 3 n3 p1)    
	(vmregSetXCharImmediate 4 n4 p1)    
	(vmregSetXCharImmediate 5 n5 p1)    
	(vmregSetXCharImmediate 6 n6 p1)    
	(vmregSetXCharImmediate 7 n7 p1)    
	(vmregSetXCharImmediate 1 n1 p1)    
	(vmregSetXCharImmediate 2 n2 p1)    
	(vmregSetXCharImmediate 3 n3 p1)    
	(vmregSetXCharImmediate 4 n4 p1)    
	(vmregSetXCharImmediate 5 n5 p1)    
	(vmregSetXCharImmediate 6 n6 p1)    
	(vmregSetXCharImmediate 7 n7 p1)    
	(vmregSetXCharImmediate 1 n1 p1)    
	(vmregSetXCharImmediate 2 n2 p1)    
	(vmregSetXCharImmediate 3 n3 p1)    
	(vmregSetXCharImmediate 4 n4 p1)    
	(vmregSetXCharImmediate 5 n5 p1)    
	(vmregSetXCharImmediate 6 n6 p1)    
	(vmregSetXCharImmediate 7 n7 p1)    
	(vmregSetXCharImmediate 1 n1 p1)    
	(vmregSetXCharImmediate 2 n2 p1)    
	(vmregSetXCharImmediate 3 n3 p1)    
	(vmregSetXCharImmediate 4 n4 p1)    
	(vmregSetXCharImmediate 5 n5 p1)    
	(vmregSetXCharImmediate 6 n6 p1)    
	(vmregSetXCharImmediate 7 n7 p1)    
	(vmregSetXCharImmediate 1 n1 p1)    
	(vmregSetXCharImmediate 2 n2 p1)    
	(vmregSetXCharImmediate 3 n3 p1)    
	(vmregSetXCharImmediate 4 n4 p1)    
	(vmregSetXCharImmediate 5 n5 p1)    
	(vmregSetXCharImmediate 6 n6 p1)    
	(vmregSetXCharImmediate 7 n7 p1)    
	(vmregSetXCharImmediate 1 n1 p2)    
	(vmregSetXCharImmediate 2 n2 p2)    
	(vmregSetXCharImmediate 3 n3 p2)    
	(vmregSetXCharImmediate 4 n4 p2)    
	(vmregSetXCharImmediate 5 n5 p2)    
	(vmregSetXCharImmediate 6 n6 p2)    
	(vmregSetXCharImmediate 7 n7 p2)    
    (vmregRunInHardware stop:)
    (setq y (sum v1 v2))
    y)
(testit "(string (testMe {vmregSetXCharImmediate}))"  "56.0")

(defun testMe(x)
    regs:(NumPointer:p1 NumPointer:p2) 
    regs:((Integer:n1 0) (Integer:n2 1) (Integer:n3 2) (Integer:n4 3) (Integer:n5 4) (Integer:n6 5) (Integer:n7 6)) 
    regs:((Number:x1 4.5) (Number:x2 7.2) (Number:x3 10.0) (Number:x4 2.0) (Number:x5 1.0) (Number:x6 16.0) (Number:x7 5.0)) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: number: 7 1 2 3 4 5 6 7))
    (setq v2 (new Vector: number: 7 1 2 3 4 5 6 7))
    (vmregObjPointer v1 p1)
    (vmregObjPointer v2 p2)
    (vmregRunInHardware start:)
	(vmregRefNumber p1 x1)    
	(vmregRefNumber p1 x2)    
	(vmregRefNumber p1 x3)    
	(vmregRefNumber p1 x4)    
	(vmregRefNumber p1 x5)    
	(vmregRefNumber p1 x6)    
	(vmregRefNumber p1 x7)    
    (vmregRunInHardware stop:)
    (setq y (+ x1 x2 x3 x4 x5 x6 x7))
    y)
(testit "(string (testMe {vmregRefNumber}))"  "7.0")

(defun testMe(x)
    regs:(FloatPointer:p1 FloatPointer:p2) 
    regs:((Integer:n1 0) (Integer:n2 1) (Integer:n3 2) (Integer:n4 3) (Integer:n5 4) (Integer:n6 5) (Integer:n7 6)) 
    regs:((Number:x1 4.5) (Number:x2 7.2) (Number:x3 10.0) (Number:x4 2.0) (Number:x5 1.0) (Number:x6 16.0) (Number:x7 5.0)) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: float: 7 1 2 3 4 5 6 7))
    (setq v2 (new Vector: float: 7 1 2 3 4 5 6 7))
    (vmregObjPointer v1 p1)
    (vmregObjPointer v2 p2)
    (vmregRunInHardware start:)
	(vmregRefFloat p1 x1)    
	(vmregRefFloat p1 x2)    
	(vmregRefFloat p1 x3)    
	(vmregRefFloat p1 x4)    
	(vmregRefFloat p1 x5)    
	(vmregRefFloat p1 x6)    
	(vmregRefFloat p1 x7)    
    (vmregRunInHardware stop:)
    (setq y (+ x1 x2 x3 x4 x5 x6 x7))
    y)
(testit "(string (testMe {vmregRefFloat}))"  "7.0")

(defun testMe(x)
    regs:(IntPointer:p1 IntPointer:p2) 
    regs:((Integer:n1 0) (Integer:n2 1) (Integer:n3 2) (Integer:n4 3) (Integer:n5 4) (Integer:n6 5) (Integer:n7 6)) 
    regs:((Number:x1 4.5) (Number:x2 7.2) (Number:x3 10.0) (Number:x4 2.0) (Number:x5 1.0) (Number:x6 16.0) (Number:x7 5.0)) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: integer: 7 1 2 3 4 5 6 7))
    (setq v2 (new Vector: integer: 7 1 2 3 4 5 6 7))
    (vmregObjPointer v1 p1)
    (vmregObjPointer v2 p2)
    (vmregRunInHardware start:)
	(vmregRefInteger p1 n1)    
	(vmregRefInteger p1 n2)    
	(vmregRefInteger p1 n3)    
	(vmregRefInteger p1 n4)    
	(vmregRefInteger p1 n5)    
	(vmregRefInteger p1 n6)    
	(vmregRefInteger p1 n7)    
    (vmregRunInHardware stop:)
    (setq y (+ n1 n2 n3 n4 n5 n6 n7))
    y)
(testit "(string (testMe {vmregRefInteger}))"  "7")

(defun testMe(x)
    regs:(ShortPointer:p1 ShortPointer:p2) 
    regs:((Integer:n1 0) (Integer:n2 1) (Integer:n3 2) (Integer:n4 3) (Integer:n5 4) (Integer:n6 5) (Integer:n7 6)) 
    regs:((Number:x1 4.5) (Number:x2 7.2) (Number:x3 10.0) (Number:x4 2.0) (Number:x5 1.0) (Number:x6 16.0) (Number:x7 5.0)) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: short: 7 1 2 3 4 5 6 7))
    (setq v2 (new Vector: short: 7 1 2 3 4 5 6 7))
    (vmregObjPointer v1 p1)
    (vmregObjPointer v2 p2)
    (vmregRunInHardware start:)
	(vmregRefShort p1 n1)    
	(vmregRefShort p1 n2)    
	(vmregRefShort p1 n3)    
	(vmregRefShort p1 n4)    
	(vmregRefShort p1 n5)    
	(vmregRefShort p1 n6)    
	(vmregRefShort p1 n7)    
    (vmregRunInHardware stop:)
    (setq y (+ n1 n2 n3 n4 n5 n6 n7))
    y)
(testit "(string (testMe {vmregRefShort}))"  "7")

(defun testMe(x)
    regs:(CharPointer:p1 CharPointer:p2) 
    regs:((Integer:n1 0) (Integer:n2 1) (Integer:n3 2) (Integer:n4 3) (Integer:n5 4) (Integer:n6 5) (Integer:n7 6)) 
    regs:((Number:x1 4.5) (Number:x2 7.2) (Number:x3 10.0) (Number:x4 2.0) (Number:x5 1.0) (Number:x6 16.0) (Number:x7 5.0)) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: byte: 7 1 2 3 4 5 6 7))
    (setq v2 (new Vector: byte: 7 1 2 3 4 5 6 7))
    (vmregObjPointer v1 p1)
    (vmregObjPointer v2 p2)
    (vmregRunInHardware start:)
	(vmregRefCharacter p1 n1)    
	(vmregRefCharacter p1 n2)    
	(vmregRefCharacter p1 n3)    
	(vmregRefCharacter p1 n4)    
	(vmregRefCharacter p1 n5)    
	(vmregRefCharacter p1 n6)    
	(vmregRefCharacter p1 n7)    
    (vmregRunInHardware stop:)
    (setq y (+ n1 n2 n3 n4 n5 n6 n7))
    y)
(testit "(string (testMe {vmregRefCharacter}))"  "7")

(defun testMe(x)
    regs:(IntPointer:p1 IntPointer:p2 IntPointer:p3 IntPointer:p4 IntPointer:p5 IntPointer:p6 IntPointer:p7) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: integer: 7))
    (vmregObjPointer v1 p1)
    (vmregMoveInteger p1 p2)(vmregIncPointer IntPointer: 1 p2)
    (vmregMoveInteger p1 p3)(vmregIncPointer IntPointer: 2 p3)
    (vmregMoveInteger p1 p4)(vmregIncPointer IntPointer: 3 p4)
    (vmregMoveInteger p1 p5)(vmregIncPointer IntPointer: 4 p5)
    (vmregMoveInteger p1 p6)(vmregIncPointer IntPointer: 5 p6)
    (vmregMoveInteger p1 p7)(vmregIncPointer IntPointer: 6 p7)
    (vmregRunInHardware start:)
	(vmregSetIntImmediate 1 p1)    
	(vmregSetIntImmediate 2 p2)    
	(vmregSetIntImmediate 3 p3)    
	(vmregSetIntImmediate 4 p4)    
	(vmregSetIntImmediate 5 p5)    
	(vmregSetIntImmediate 6 p6)    
	(vmregSetIntImmediate 7 p7)    
    (vmregRunInHardware stop:)
    (setq y (sum v1))
    y)
(testit "(string (testMe {vmregSetIntImmediate}))"  "28.0")

(defun testMe(x)
    regs:(ShortPointer:p1 ShortPointer:p2 ShortPointer:p3 ShortPointer:p4 ShortPointer:p5 ShortPointer:p6 ShortPointer:p7) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: short: 7))
    (vmregObjPointer v1 p1)
    (vmregMoveInteger p1 p2)(vmregIncPointer ShortPointer: 1 p2)
    (vmregMoveInteger p1 p3)(vmregIncPointer ShortPointer: 2 p3)
    (vmregMoveInteger p1 p4)(vmregIncPointer ShortPointer: 3 p4)
    (vmregMoveInteger p1 p5)(vmregIncPointer ShortPointer: 4 p5)
    (vmregMoveInteger p1 p6)(vmregIncPointer ShortPointer: 5 p6)
    (vmregMoveInteger p1 p7)(vmregIncPointer ShortPointer: 6 p7)
    (vmregRunInHardware start:)
	(vmregSetShortImmediate 1 p1)    
	(vmregSetShortImmediate 2 p2)    
	(vmregSetShortImmediate 3 p3)    
	(vmregSetShortImmediate 4 p4)    
	(vmregSetShortImmediate 5 p5)    
	(vmregSetShortImmediate 6 p6)    
	(vmregSetShortImmediate 7 p7)    
    (vmregRunInHardware stop:)
    (setq y (sum v1))
    y)
(testit "(string (testMe {vmregSetShortImmediate}))"  "28.0")

(defun testMe(x)
    regs:(CharPointer:p1 CharPointer:p2 CharPointer:p3 CharPointer:p4 CharPointer:p5 CharPointer:p6 CharPointer:p7) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: byte: 7))
    (vmregObjPointer v1 p1)
    (vmregMoveInteger p1 p2)(vmregIncPointer CharPointer: 1 p2)
    (vmregMoveInteger p1 p3)(vmregIncPointer CharPointer: 2 p3)
    (vmregMoveInteger p1 p4)(vmregIncPointer CharPointer: 3 p4)
    (vmregMoveInteger p1 p5)(vmregIncPointer CharPointer: 4 p5)
    (vmregMoveInteger p1 p6)(vmregIncPointer CharPointer: 5 p6)
    (vmregMoveInteger p1 p7)(vmregIncPointer CharPointer: 6 p7)
    (vmregRunInHardware start:)
	(vmregSetCharImmediate 1 p1)    
	(vmregSetCharImmediate 2 p2)    
	(vmregSetCharImmediate 3 p3)    
	(vmregSetCharImmediate 4 p4)    
	(vmregSetCharImmediate 5 p5)    
	(vmregSetCharImmediate 6 p6)    
	(vmregSetCharImmediate 7 p7)    
    (vmregRunInHardware stop:)
    (setq y (sum v1))
    y)
(testit "(string (testMe {vmregSetCharImmediate}))"  "28.0")

(defun testMe(x)
    regs:(NumPointer:p1 NumPointer:p2 NumPointer:p3 NumPointer:p4 NumPointer:p5 NumPointer:p6 NumPointer:p7) 
    regs:((Number:x1 4.5) (Number:x2 7.2) (Number:x3 10.0) (Number:x4 2.0) (Number:x5 1.0) (Number:x6 16.0) (Number:x7 5.0)) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: number: 7 1 2 3 4 5 6 7))
    (vmregObjPointer v1 p1)
    (vmregMoveInteger p1 p2)(vmregIncPointer NumPointer: 1 p2)
    (vmregMoveInteger p1 p3)(vmregIncPointer NumPointer: 2 p3)
    (vmregMoveInteger p1 p4)(vmregIncPointer NumPointer: 3 p4)
    (vmregMoveInteger p1 p5)(vmregIncPointer NumPointer: 4 p5)
    (vmregMoveInteger p1 p6)(vmregIncPointer NumPointer: 5 p6)
    (vmregMoveInteger p1 p7)(vmregIncPointer NumPointer: 6 p7)
    (vmregRunInHardware start:)
	(vmregSetNumber x1 p1)    
	(vmregSetNumber x2 p2)    
	(vmregSetNumber x3 p3)    
	(vmregSetNumber x4 p4)    
	(vmregSetNumber x5 p5)    
	(vmregSetNumber x6 p6)    
	(vmregSetNumber x7 p7)    
	(vmregSetNumber x1 p1)    
    (vmregRunInHardware stop:)
    (setq y (sum v1))
    y)
(testit "(string (testMe {vmregSetNumber}))"  "45.7")

(defun testMe(x)
    regs:(FloatPointer:p1 FloatPointer:p2 FloatPointer:p3 FloatPointer:p4 FloatPointer:p5 FloatPointer:p6 FloatPointer:p7) 
    regs:((Number:x1 4.5) (Number:x2 7.2) (Number:x3 10.0) (Number:x4 2.0) (Number:x5 1.0) (Number:x6 16.0) (Number:x7 5.0)) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: float: 7 1 2 3 4 5 6 7))
    (vmregObjPointer v1 p1)
    (vmregMoveInteger p1 p2)(vmregIncPointer FloatPointer: 1 p2)
    (vmregMoveInteger p1 p3)(vmregIncPointer FloatPointer: 2 p3)
    (vmregMoveInteger p1 p4)(vmregIncPointer FloatPointer: 3 p4)
    (vmregMoveInteger p1 p5)(vmregIncPointer FloatPointer: 4 p5)
    (vmregMoveInteger p1 p6)(vmregIncPointer FloatPointer: 5 p6)
    (vmregMoveInteger p1 p7)(vmregIncPointer FloatPointer: 6 p7)
    (vmregRunInHardware start:)
	(vmregSetFloat x1 p1)    
	(vmregSetFloat x2 p2)    
	(vmregSetFloat x3 p3)    
	(vmregSetFloat x4 p4)    
	(vmregSetFloat x5 p5)    
	(vmregSetFloat x6 p6)    
	(vmregSetFloat x7 p7)    
	(vmregSetFloat x1 p1)    
    (vmregRunInHardware stop:)
    (setq y (sum v1))
    y)
(testit "(string (testMe {vmregSetFloat}))"  "45.69999980927")

(defun testMe(x)
    regs:(IntPointer:p1 IntPointer:p2 IntPointer:p3 IntPointer:p4 IntPointer:p5 IntPointer:p6 IntPointer:p7) 
    regs:((Integer:n1 4) (Integer:n2 7) (Integer:n3 10) (Integer:n4 2) (Integer:n5 1) (Integer:n6 16) (Integer:n7 5)) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: integer: 7 1 2 3 4 5 6 7))
    (vmregObjPointer v1 p1)
    (vmregMoveInteger p1 p2)(vmregIncPointer IntPointer: 1 p2)
    (vmregMoveInteger p1 p3)(vmregIncPointer IntPointer: 2 p3)
    (vmregMoveInteger p1 p4)(vmregIncPointer IntPointer: 3 p4)
    (vmregMoveInteger p1 p5)(vmregIncPointer IntPointer: 4 p5)
    (vmregMoveInteger p1 p6)(vmregIncPointer IntPointer: 5 p6)
    (vmregMoveInteger p1 p7)(vmregIncPointer IntPointer: 6 p7)
    (vmregRunInHardware start:)
	(vmregSetInteger n1 p1)    
	(vmregSetInteger n2 p2)    
	(vmregSetInteger n3 p3)    
	(vmregSetInteger n4 p4)    
	(vmregSetInteger n5 p5)    
	(vmregSetInteger n6 p6)    
	(vmregSetInteger n7 p7)    
	(vmregSetInteger n1 p1)    
    (vmregRunInHardware stop:)
    (setq y (sum v1))
    y)
(testit "(string (testMe {vmregSetInteger}))"  "45.0")

(defun testMe(x)
    regs:(ShortPointer:p1 ShortPointer:p2 ShortPointer:p3 ShortPointer:p4 ShortPointer:p5 ShortPointer:p6 ShortPointer:p7) 
    regs:((Integer:n1 4) (Integer:n2 7) (Integer:n3 10) (Integer:n4 2) (Integer:n5 1) (Integer:n6 16) (Integer:n7 5)) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: short: 7 1 2 3 4 5 6 7))
    (vmregObjPointer v1 p1)
    (vmregMoveInteger p1 p2)(vmregIncPointer ShortPointer: 1 p2)
    (vmregMoveInteger p1 p3)(vmregIncPointer ShortPointer: 2 p3)
    (vmregMoveInteger p1 p4)(vmregIncPointer ShortPointer: 3 p4)
    (vmregMoveInteger p1 p5)(vmregIncPointer ShortPointer: 4 p5)
    (vmregMoveInteger p1 p6)(vmregIncPointer ShortPointer: 5 p6)
    (vmregMoveInteger p1 p7)(vmregIncPointer ShortPointer: 6 p7)
    (vmregRunInHardware start:)
	(vmregSetShort n1 p1)    
	(vmregSetShort n2 p2)    
	(vmregSetShort n3 p3)    
	(vmregSetShort n4 p4)    
	(vmregSetShort n5 p5)    
	(vmregSetShort n6 p6)    
	(vmregSetShort n7 p7)    
	(vmregSetShort n1 p1)    
    (vmregRunInHardware stop:)
    (setq y (sum v1))
    y)
(testit "(string (testMe {vmregSetShort}))"  "45.0")

(defun testMe(x)
    regs:(CharPointer:p1 CharPointer:p2 CharPointer:p3 CharPointer:p4 CharPointer:p5 CharPointer:p6 CharPointer:p7) 
    regs:((Integer:n1 4) (Integer:n2 7) (Integer:n3 10) (Integer:n4 2) (Integer:n5 1) (Integer:n6 16) (Integer:n7 5)) 
    vars:(v1 v2 y)
    (setq v1 (new Vector: byte: 7 1 2 3 4 5 6 7))
    (vmregObjPointer v1 p1)
    (vmregMoveInteger p1 p2)(vmregIncPointer CharPointer: 1 p2)
    (vmregMoveInteger p1 p3)(vmregIncPointer CharPointer: 2 p3)
    (vmregMoveInteger p1 p4)(vmregIncPointer CharPointer: 3 p4)
    (vmregMoveInteger p1 p5)(vmregIncPointer CharPointer: 4 p5)
    (vmregMoveInteger p1 p6)(vmregIncPointer CharPointer: 5 p6)
    (vmregMoveInteger p1 p7)(vmregIncPointer CharPointer: 6 p7)
    (vmregRunInHardware start:)
	(vmregSetCharacter n1 p1)    
	(vmregSetCharacter n2 p2)    
	(vmregSetCharacter n3 p3)    
	(vmregSetCharacter n4 p4)    
	(vmregSetCharacter n5 p5)    
	(vmregSetCharacter n6 p6)    
	(vmregSetCharacter n7 p7)    
	(vmregSetCharacter n1 p1)    
	(vmregSetCharacter n1 p1)    
	(vmregSetCharacter n1 p1)    
	(vmregSetCharacter n1 p1)    
	(vmregSetCharacter n1 p1)    
	(vmregSetCharacter n1 p1)    
	(vmregSetCharacter n1 p1)    
    (vmregRunInHardware stop:)
    (setq y (sum v1))
    y)
(testit "(string (testMe {vmregSetCharacter}))"  "45.0")

(defun testMe(x)
    regs:((IntPointer:p1 100) (CharPointer:p2 0)) 
    regs:((Integer:n1 1) (Integer:n2 2) (Integer:n3 3) (Integer:n4 4) (Integer:n5 5) (Integer:n6 6) (Integer:n7 7)) 
    (vmregRunInHardware start:)
	(vmregAddPointer CharPointer:  n1 p1)    
	(vmregAddPointer FloatPointer: n2 p1)    
	(vmregAddPointer IntPointer:   n3 p1)    
	(vmregAddPointer NumPointer:   n4 p1)    
	(vmregAddPointer ShortPointer: n5 p1)    
	(vmregAddPointer IntPointer:   n6 p1)    
	(vmregAddPointer IntPointer:   n7 p1)    
	(vmregAddPointer CharPointer:  n1 p1)    
	(vmregAddPointer FloatPointer: n2 p1)    
	(vmregAddPointer IntPointer:   n3 p1)    
	(vmregAddPointer NumPointer:   n4 p1)    
	(vmregAddPointer ShortPointer: n5 p1)    
	(vmregAddPointer IntPointer:   n6 p1)    
	(vmregAddPointer IntPointer:   n7 p1)    
	(vmregAddPointer CharPointer:  n1 p1)    
	(vmregAddPointer FloatPointer: n2 p1)    
	(vmregAddPointer IntPointer:   n3 p1)    
	(vmregAddPointer NumPointer:   n4 p1)    
	(vmregAddPointer ShortPointer: n5 p1)    
	(vmregAddPointer IntPointer:   n6 p1)    
	(vmregAddPointer CharPointer:  n1 p1)    
	(vmregAddPointer FloatPointer: n2 p1)    
	(vmregAddPointer IntPointer:   n3 p1)    
	(vmregAddPointer NumPointer:   n4 p1)    
	(vmregAddPointer ShortPointer: n5 p1)    
	(vmregAddPointer IntPointer:   n6 p1)    
	(vmregAddPointer IntPointer:   n7 p1)    
	(vmregAddPointer CharPointer:  n1 p2)    
	(vmregAddPointer IntPointer:   n7 p2)    
    (vmregRunInHardware stop:)
    (setq y (+ p1 p2))
    y)
(testit "(string (testMe {vmregAddPointer}))" (if (= _ais.bits 64) "817" "561"))

(defun testMe(x)
    regs:((IntPointer:p1 100) (CharPointer:p2 0)) 
    regs:((Integer:n1 1) (Integer:n2 2) (Integer:n3 3) (Integer:n4 4) (Integer:n5 5) (Integer:n6 6) (Integer:n7 7)) 
    (vmregRunInHardware start:)
	(vmregIncPointer CharPointer:  1 p1)    
	(vmregIncPointer FloatPointer: 2 p1)    
	(vmregIncPointer IntPointer:   3 p1)    
	(vmregIncPointer NumPointer:   4 p1)    
	(vmregIncPointer ShortPointer: 5 p1)    
	(vmregIncPointer IntPointer:   6 p1)    
	(vmregIncPointer IntPointer:   7 p1)    
    (vmregRunInHardware stop:)
    (setq y p1)
    y)
(testit "(string (testMe {vmregIncPointer}))" (if (= _ais.bits 64) "279" "215"))

(defun testMe(x)
    regs:((Integer:n1 1) (Integer:n2 2) (Integer:n3 3) (Integer:n4 4) (Integer:n5 5) (Integer:n6 6) (Integer:n7 7)) 
    regs:((Integer:m1 10) (Integer:m2 20) (Integer:m3 30) (Integer:m4 40) (Integer:m5 50) (Integer:m6 60) (Integer:m7 70)) 
    (vmregRunInHardware start:)
	(vmregMoveInteger n1 m1)    
	(vmregMoveInteger n1 m1)    
	(vmregMoveInteger n2 m2)    
	(vmregMoveInteger n3 m3)    
	(vmregMoveInteger n4 m4)    
	(vmregMoveInteger n5 m5)    
	(vmregMoveInteger n6 m6)    
	(vmregMoveInteger n7 m7)    
    (vmregRunInHardware stop:)
    (setq y (+ m1 m2 m3 m4 m5 m6 m7))
    y)
(testit "(string (testMe {vmregMoveInteger}))"  "28")

(defun testMe(x)
    regs:((Number:n1 1.0) (Number:n2 2.0) (Number:n3 3.0) (Number:n4 4.0) (Number:n5 5.0) (Number:n6 6.0) (Number:n7 7.0)) 
    regs:((Number:m1 10.0) (Number:m2 20.0) (Number:m3 30.0) (Number:m4 40.0) (Number:m5 50.0) (Number:m6 60.0) (Number:m7 70.0)) 
    (vmregRunInHardware start:)
	(vmregMoveNumber n1 m1)    
	(vmregMoveNumber n1 m1)    
	(vmregMoveNumber n2 m2)    
	(vmregMoveNumber n3 m3)    
	(vmregMoveNumber n4 m4)    
	(vmregMoveNumber n5 m5)    
	(vmregMoveNumber n6 m6)    
	(vmregMoveNumber n7 m7)    
    (vmregRunInHardware stop:)
    (setq y (+ m1 m2 m3 m4 m5 m6 m7))
    y)
(testit "(string (testMe {vmregMoveNumber}))"  "28.0")

(defun testMe(Number:x)
    regs:(Number:y Number:z)  
    (vmregRunInHardware start:)
    (setq y x)
    (vmregAbsNumber y z)
    (vmregCosNumber z y)
    (vmregSqrtNumber y z)
    (vmregSinNumber z y)
    (vmregAddNumber y z)
    (vmregTanNumber z y)
    (vmregMulNumber y z)
    (vmregSubNumber z y)
    (vmregDivNumber y z)
    (vmregSinNumber z y)
    (setq x y)
    (vmregRunInHardware stop:)
    x)
(testit "(string (testMe -1.23))"  "-0.3882437709949")

(defun testMe(Integer:x)
    regs:((NumPointer:p1) (NumPointer:p2) m M n N Number:y Number:z)  
    vars:(v1 v2)  
    (setq M 1000)
    (setq v1 (new Vector: number: M))
    (setq v2 (new Vector: number: M))
    (setq y 10.0)
    (setq p1 v1) 
    (setq p2 v2) 
    (vmregRunInHardware start:)
    (loop for m from 0 until M do 
      (setq z p1[m])
      (+= z y)
      (*= z z)
      (/= z y)
      (setq p2[m] z)
      ) ; end m loop 
    (vmregRunInHardware stop:)
    (setq x (* v2[3] v2[10]))
    x)
(testit "(testMe 100)"  100.0)

(defun testMe(name) 
    vars:(x) 
    regs:(IntPointer:p i n) 
    (setq p (setq x #(int| 1 2 3 4))) 
    (setq n (++ p)[(+= i 2)])
    )
(testit "(testMe {setq pointer arithmetic})"  4)

(defun testMe(name) 
    vars:(x) 
    regs:(IntPointer:p i n) 
    (setq p (setq x (new Vector: Integer: 4 1 2 3 4))) 
    (setq n p[2])
    (setq p[1] n)
    (setq n p[1])
    )
(testit "(testMe {setq pointer constant indexing})"  3)

(defun testMe(name) 
    vars:(x) 
    regs:(IntPointer:p i n) 
    (setq p (setq x (new Vector: Integer: 4 1 2 3 4))) 
    (setq n p[0])
    )
(testit "(testMe {setq pointer zero indexing})"  1)

(defun testMe(name) 
    vars:(x y z (w 22))
    regs:(n1 n2 n3 n4 n5 n6 n7 n8) 
    (setq x w) 
    (vmregRunInHardware start:)
    (setq n1 1) 
    (setq n2 1000) 
    (setq n3 1) 
    (setq n4 1) 
    (setq n5 1) 
    (setq n6 1) 
    (setq n7 1) 
    (setq n8 1)
    (loop for n1 from 0 until n2 do (setq y w)) 
    (vmregRunInHardware stop:) 
    (setq z w) 
    (+ x y z))
(testit "(testMe {setq run in hardware 001})"  66)

(defun testMe(name) 
    vars:(x y z (w 22))
    regs:(n N) 
    (vmregRunInHardware start:)
    (setq N 1000) 
    (loop for n from 0 until N do (setq y w)) 
    (vmregRunInHardware stop:) 
    (setq x w) 
    (setq z w) 
    (+ x y z))
(testit "(testMe {setq run in hardware 002})"  66)

(defun testMe(name)
    regs:(m M t T n
          CharPointer:mPointer CharPointer:tPointer 
          tempTarget tempMatch)
    vars:((result false) matchString targetString)
    (setq matchString (makeString "the"))
    (setq targetString (makeString "Hello there"))
    ;; Initialize the match and target pointers and lengths.
    ;; Note: We use the faster assembler length instructions,
    ;;       but we must eliminate any null characters.
    (vmregObjLength matchString M)
    (vmregObjLength targetString T)
    (setq mPointer matchString)
    (setq tPointer targetString)
    (vmregRunInHardware start:)
    (if (= (setq tempMatch mPointer[M]) 0) (-- M))
    (if (= (setq tempMatch tPointer[T]) 0) (-- T))
    (-= T M) 				
    ;; loop for all characters in the target String
    (loop for t from 0 until T do
       (loop for m from 0 until M do   
          (setq tempTarget tPointer[(setq n (+ t m))])
          (setq tempMatch mPointer[m])        
          (if (<> tempTarget tempMatch) (goto Next:)) 
          ) ;; end of loop for matchString
      (setq result t)
      (goto Last:)
      Next::   
      ) ;; end of loop for target String

   Last:: 
   (vmregRunInHardware stop:)
   result)
(testit "(testMe {findString run in hardware 001})"  6)
	
(defun testMe(name)
    regs:(m M t T n
          CharPointer:mPointer CharPointer:tPointer 
          tempTarget tempMatch)
    vars:((result false) matchString targetString)
    (setq matchString (makeString "the"))
    (setq targetString (makeString "Hello there"))
    ;; Initialize the match and target pointers and lengths.
    ;; Note: We use the faster assembler length instructions,
    ;;       but we must eliminate any null characters.
    (vmregRunInHardware startNoLoad:)
    (vmregObjLength matchString M)
    (vmregObjLength targetString T)
    (setq mPointer matchString)
    (setq tPointer targetString)
    (if (= (setq tempMatch mPointer[M]) 0) (-- M))
    (if (= (setq tempMatch tPointer[T]) 0) (-- T))
    (-= T M) 				
    ;; loop for all characters in the target String
    (loop for t from 0 until T do
       (loop for m from 0 until M do   
          (setq tempTarget tPointer[(setq n (+ t m))])
          (setq tempMatch mPointer[m])        
          (if (<> tempTarget tempMatch) (goto Next:)) 
          ) ;; end of loop for matchString
      (setq result t)
      (goto Last:)
      Next::   
      ) ;; end of loop for target String

   Last:: 
   (vmregRunInHardware stopNoSave:)
   result)
(testit "(testMe {findString run in hardware 002})"  6)

(defun testMe(name) 
   regs:(x JumpPointer:y) 
   (vmregRunInHardware start:)
   (setq y MyLabel:) 
   (vmregJump y) 
   (setq x 20) 
   (return x)
   MyLabel:: 
   (setq x 10)
   Last:: 
   (vmregRunInHardware stop:)
   x)
(testit "(testMe {register jump run in hardware 001})" 10)

(defun testMe(name) 
   regs:(x y)
   (vmregRunInHardware start:) 
   (setq x 10) 
   (setq y 20) 
   (vmregSubPointer FloatPointer: x y)
   (vmregRunInHardware stop:) 
   y)
(testit "(testMe {subtract pointers run in hardware 001})" -20)

(defun testMe(name) 
   regs:(Number:x Number:y) 
   (vmregRunInHardware start:) 
   (setq x 3.0) 
   (setq y 10.0) 
   (vmregDivrNumber x y)
   (vmregRunInHardware stop:) 
   y)
(testit "(string (testMe {divide remainder run in hardware 001}))" "1.0")

(defun testMe(name) 
   regs:(y) 
   vars:(x) 
   (setq y 2) 
   (vmregRunInHardware start:) 
   (vmregSaveTail y x)
   (vmregLoadTail x y)
   (vmregRunInHardware stop:) 
   y)
(testit "(testMe {load tail run in hardware 001})" 2)

(defun testMe(name) 
   regs:(y) 
   vars:(x) 
   (vmregRunInHardware start:) 
   (vmregSaveTailImmediate 2 x)
   (vmregLoadTail x y)
   (vmregRunInHardware stop:) 
   y)
(testit "(testMe {save tail run in hardware 001})" 2)

(defun testMe(name) 
   regs:(y) 
   vars:((x 2)) 
   (vmregRunInHardware start:) 
   (setq y 2) 
   (vmregLoadType x y)
   (vmregRunInHardware stop:) 
   y)
(testit "(testMe {load type run in hardware 001})" 11)

(defun testMe(name) 
   regs:(y) 
   vars:((Integer:x 2)) 
   (vmregRunInHardware start:) 
   (setq y 2) 
   (vmregLoadDeclType x y)
   (vmregRunInHardware stop:) 
   y)
(testit "(testMe {load decl type run in hardware 001})" 11)

(defun testMe(name) 
   regs:(y) 
   vars:((Integer:x 2)) 
   (vmregRunInHardware start:) 
   (vmregSaveDeclTypeImmediate 10 x)
   (setq y 2) 
   (vmregLoadDeclType x y)
   (vmregRunInHardware stop:) 
   y)
(testit "(testMe {save decl type immediate run in hardware 001})" 10)

(defun testMe(name) 
   regs:(y z) 
   vars:((Integer:x 2)) 
   (vmregRunInHardware start:) 
   (setq z 10) 
   (vmregSaveDeclType z x)
   (setq y 2) 
   (vmregLoadDeclType x y)
   (vmregRunInHardware stop:) 
   y)
(testit "(testMe {save decl type run in hardware 001})" 10)

(defun testMe(name) 
   regs:(n) 
   vars:((x {Hello There}) 
   (y {Hello there}))
   (vmregRunInHardware start:) 
   (vmregStringCompare x y n) 
   (vmregRunInHardware stop:) 
   (if (< n 0) true false))
(testit "(testMe {string compare run in hardware 001})" true)

(defun testMe(name) 
   regs:(n) 
   vars:((x {Hello There}) 
   (y {Hello there}))
   (vmregRunInHardware start:) 
   (vmregStringiCompare x y n) 
   (vmregRunInHardware stop:) 
   (if (= n 0) true false))
(testit "(testMe {string icompare run in hardware 001})" true)

(defun testMe(name) 
   vars:(Vector:v z) 
   (setq v (new Vector: 3))
   (vmsetvector 2 22 v) 
   (vmrefvector 2 v z)
   z)
(testit "(testMe {vmsetvector-vmrefvector})" 22) 


;; ********************************************
;; Testing Mixed Mode Optimizer substitutions::
;; ********************************************

(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50))
   (vmopt stop:) 
   (setq x (iadd x 10))
   (setq z (iadd 10 z))
   (setq w (iadd w 10))
   (setq v (iadd y 10))
   (+= x z)
   (+= x w)
   (+= x v)
   x)
(setq result (testMe "basline"))
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   (setq x (+ x 10))
   (setq z (+ 10 z))
   (setq w (+ w 10))
   (setq v (+ y 10))
   (+= x z)
   (+= x w)
   (+= x v)
   x)
(testit "(testMe {mixed memory register iadd})" result) 
	
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   (vmopt stop:) 
   (setq x (isub x 10))
   (setq z (isub 10 z))
   (setq w (isub w 10))
   (setq v (isub y 10))
   (+= x z)
   (+= x w)
   (+= x v)
   x)
(setq result (testMe "basline"))
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   (setq x (- x 10))
   (setq z (- 10 z))
   (setq w (- w 10))
   (setq v (- y 10))
   (+= x z)
   (+= x w)
   (+= x v)
   x)
(testit "(testMe {mixed memory register isub})" result) 
	
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   (vmopt stop:) 
   (setq x (imul x 10))
   (setq z (imul 10 z))
   (setq w (imul w 10))
   (setq v (imul y 10))
   (+= x z)
   (+= x w)
   (+= x v)
   x)
(setq result (testMe "basline"))
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   (setq x (* x 10))
   (setq z (* 10 z))
   (setq w (* w 10))
   (setq v (* y 10))
   (+= x z)
   (+= x w)
   (+= x v)
   x)
(testit "(testMe {mixed memory register imul})" result) 
	
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   (vmopt stop:) 
   (setq x (idiv x 10))
   (setq z (idiv 10 z))
   (setq w (idiv w 10))
   (setq v (idiv y 10))
   (+= x z)
   (+= x w)
   (+= x v)
   x)
(setq result (testMe "basline"))
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   (setq x (/ x 10))
   (setq z (/ 10 z))
   (setq w (/ w 10))
   (setq v (/ y 10))
   (+= x z)
   (+= x w)
   (+= x v)
   x)
(testit "(testMe {mixed memory register idiv})" result) 
	
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   (vmopt stop:) 
   (setq x (addi x xr))
   (setq z (addi zr w))
   (setq w (addi zr w))
   (setq w (addi zr wr))
   (setq v (addi y yr))
   (+= x z)
   (+= x w)
   (+= x v)
   x)
(setq result (testMe "basline"))
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   (setq x (+ x xr))
   (setq z (+ zr w))
   (setq w (+ zr w))
   (setq w (+ zr wr))
   (setq v (+ y yr))
   (+= x z)
   (+= x w)
   (+= x v)
   x)
(testit "(testMe {mixed type register addi})" result) 
	
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   (vmopt stop:) 
   (setq x (subi x xr))
   (setq z (subi zr w))
   (setq w (subi zr w))
   (setq w (subi zr wr))
   (setq v (subi y yr))
   (+= x z)
   (+= x w)
   (+= x v)
   x)
(setq result (testMe "basline"))
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   (setq x (- x xr))
   (setq z (- zr w))
   (setq w (- zr w))
   (setq w (- zr wr))
   (setq v (- y yr))
   (+= x z)
   (+= x w)
   (+= x v)
   x)
(testit "(testMe {mixed type register subi})" result) 
	
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   (vmopt stop:) 
   (setq x (divi x xr))
   (setq z (divi zr w))
   (setq w (divi zr w))
   (setq w (divi zr wr))
   (setq v (divi y yr))
   (+= x z)
   (+= x w)
   (+= x v)
   x)
(setq result (testMe "basline"))
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   (setq x (/ x xr))
   (setq z (/ zr w))
   (setq w (/ zr w))
   (setq w (/ zr wr))
   (setq v (/ y yr))
   (+= x z)
   (+= x w)
   (+= x v)
   x)
(testit "(testMe {mixed type register divi})" result) 
	
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   (vmopt stop:) 
   (setq x (muli x xr))
   (setq z (muli zr w))
   (setq w (muli zr w))
   (setq w (muli zr wr))
   (setq v (muli y yr))
   (+= x z)
   (+= x w)
   (+= x v)
   x)
(setq result (testMe "basline"))
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   (setq x (* x xr))
   (setq z (* zr w))
   (setq w (* zr w))
   (setq w (* zr wr))
   (setq v (* y yr))
   (+= x z)
   (+= x w)
   (+= x v)
   x)
(testit "(testMe {mixed type register muli})" result) 
	
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   (vmopt stop:) 
   (setq xr (nadd xr 10.2))
   (setq zr (nadd 10.2 zr))
   (setq wr (nadd wr 10.2))
   (setq vr (nadd yr 10.2))
   (+= xr zr)
   (+= xr wr)
   (+= xr vr)
   xr)
(setq result (testMe "basline"))
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   (setq xr (+ xr 10.2))
   (setq zr (+ 10.2 zr))
   (setq wr (+ wr 10.2))
   (setq vr (+ yr 10.2))
   (+= xr zr)
   (+= xr wr)
   (+= xr vr)
   xr)
(testit "(testMe {mixed memory register nadd})" result) 
	
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   (vmopt stop:) 
   (setq xr (nsub xr 10.2))
   (setq zr (nsub 10.2 zr))
   (setq wr (nsub wr 10.2))
   (setq vr (nsub yr 10.2))
   (+= xr zr)
   (+= xr wr)
   (+= xr vr)
   xr)
(setq result (testMe "basline"))
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   (setq xr (- xr 10.2))
   (setq zr (- 10.2 zr))
   (setq wr (- wr 10.2))
   (setq vr (- yr 10.2))
   (+= xr zr)
   (+= xr wr)
   (+= xr vr)
   xr)
(testit "(testMe {mixed memory register nsub})" result) 
	
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   (vmopt stop:) 
   (setq xr (nmul xr 10.2))
   (setq zr (nmul 10.2 zr))
   (setq wr (nmul wr 10.2))
   (setq vr (nmul yr 10.2))
   (+= xr zr)
   (+= xr wr)
   (+= xr vr)
   xr)
(setq result (testMe "basline"))
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   (setq xr (* xr 10.2))
   (setq zr (* 10.2 zr))
   (setq wr (* wr 10.2))
   (setq vr (* yr 10.2))
   (+= xr zr)
   (+= xr wr)
   (+= xr vr)
   xr)
(testit "(testMe {mixed memory register nmul})" result) 
		
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   (vmopt stop:) 
   (setq xr (ndiv xr 10.2))
   (setq zr (ndiv 10.2 zr))
   (setq wr (ndiv wr 10.2))
   (setq vr (ndiv yr 10.2))
   (+= xr zr)
   (+= xr wr)
   (+= xr vr)
   xr)
(setq result (testMe "basline"))
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   (setq xr (/ xr 10.2))
   (setq zr (/ 10.2 zr))
   (setq wr (/ wr 10.2))
   (setq vr (/ yr 10.2))
   (+= xr zr)
   (+= xr wr)
   (+= xr vr)
   xr)
(testit "(testMe {mixed memory register ndiv})" result) 
	
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   (vmopt stop:) 
   (vmaddn xr x xr)
   (vmaddn w zr zr)
   (vmaddn w zr wr)
   (vmaddn vr zr wr)
   (vmaddn yr y vr)
   (+= xr zr)
   (+= xr wr)
   (+= xr vr)
   (+= xr yr)
   xr)
(setq result (testMe "basline"))
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   (setq xr (+ x xr))
   (setq zr (+ zr w))
   (setq wr (+ zr w))
   (setq wr (+ zr vr))
   (setq vr (+ y yr))
   (+= xr zr)
   (+= xr wr)
   (+= xr vr)
   (+= xr yr)
   xr)
(testit "(testMe {mixed type register addn})" result) 
	
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   (vmopt stop:) 
   (vmsubn xr x xr)
   (vmsubn w zr zr)
   (vmsubn w zr wr)
   (vmsubn vr zr wr)
   (vmsubn yr y vr)
   (+= xr zr)
   (+= xr wr)
   (+= xr vr)
   (+= xr yr)
   xr)
(setq result (testMe "basline"))
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   (setq xr (- x xr))
   (setq zr (- zr w))
   (setq wr (- zr w))
   (setq wr (- zr vr))
   (setq vr (- y yr))
   (+= xr zr)
   (+= xr wr)
   (+= xr vr)
   (+= xr yr)
   xr)
(testit "(testMe {mixed type register subn})" result) 
		
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   (vmopt stop:) 
   (vmdivn xr x xr)
   (vmdivn w zr zr)
   (vmdivn w zr wr)
   (vmdivn vr zr wr)
   (vmdivn yr y vr)
   (+= xr zr)
   (+= xr wr)
   (+= xr vr)
   (+= xr yr)
   xr)
(setq result (testMe "basline"))
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   (setq xr (/ x xr))
   (setq zr (/ zr w))
   (setq wr (/ zr w))
   (setq wr (/ zr vr))
   (setq vr (/ y yr))
   (+= xr zr)
   (+= xr wr)
   (+= xr vr)
   (+= xr yr)
   xr)
(testit "(testMe {mixed type register divn})" result) 
	
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   (vmopt stop:) 
   (vmmuln xr x xr)
   (vmmuln w zr zr)
   (vmmuln w zr wr)
   (vmmuln vr zr wr)
   (vmmuln yr y vr)
   (+= xr zr)
   (+= xr wr)
   (+= xr vr)
   (+= xr yr)
   xr)
(setq result (testMe "basline"))
(defun testMe(name) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   (setq xr (* x xr))
   (setq zr (* zr w))
   (setq wr (* zr w))
   (setq wr (* zr vr))
   (setq vr (* y yr))
   (+= xr zr)
   (+= xr wr)
   (+= xr vr)
   (+= xr yr)
   xr)
(testit "(testMe {mixed type register muln})" result) 
	
(defun testMe(name) 
   vars:((Integer:mx 5) (Integer:my 20) (Integer:mz 30) (Integer:mw 40) (Integer:mv 50)) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   vars:((Number:mxr 5.2) (Number:myr 20.1) (Number:mzr 30.9) (Number:mwr 40.3) (Number:mvr 50.4)) 
   (vmopt stop:) 
   (if (< x mx) then (+= v 1))
   (if (< mx x) then (+= v 10))
   (if (< yr myr) then (+= v 100))
   (if (< myr yr) then (+= v 1000))
   v)
(setq result (testMe "basline"))
(defun testMe(name) 
   vars:((Integer:mx 5) (Integer:my 20) (Integer:mz 30) (Integer:mw 40) (Integer:mv 50)) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   vars:((Number:mxr 5.2) (Number:myr 20.1) (Number:mzr 30.9) (Number:mwr 40.3) (Number:mvr 50.4)) 
   (if (< x mx) then (+= v 1))
   (if (< mx x) then (+= v 10))
   (if (< yr myr) then (+= v 100))
   (if (< myr yr) then (+= v 1000))
   v)
(testit "(testMe {mixed type register vmregLTInteger})" result) 
	
(defun testMe(name) 
   vars:((Integer:mx 5) (Integer:my 20) (Integer:mz 30) (Integer:mw 40) (Integer:mv 50)) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   vars:((Number:mxr 5.2) (Number:myr 20.1) (Number:mzr 30.9) (Number:mwr 40.3) (Number:mvr 50.4)) 
   (vmopt stop:) 
   (if (<= x mx) then (+= v 1))
   (if (<= mx x) then (+= v 10))
   (if (<= yr myr) then (+= v 100))
   (if (<= myr yr) then (+= v 1000))
   v)
(setq result (testMe "basline"))
(defun testMe(name) 
   vars:((Integer:mx 5) (Integer:my 20) (Integer:mz 30) (Integer:mw 40) (Integer:mv 50)) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   vars:((Number:mxr 5.2) (Number:myr 20.1) (Number:mzr 30.9) (Number:mwr 40.3) (Number:mvr 50.4)) 
   (if (<= x mx) then (+= v 1))
   (if (<= mx x) then (+= v 10))
   (if (<= yr myr) then (+= v 100))
   (if (<= myr yr) then (+= v 1000))
   v)
(testit "(testMe {mixed type register vmregLEInteger})" result) 
	
(defun testMe(name) 
   vars:((Integer:mx 5) (Integer:my 20) (Integer:mz 30) (Integer:mw 40) (Integer:mv 50)) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   vars:((Number:mxr 5.2) (Number:myr 20.1) (Number:mzr 30.9) (Number:mwr 40.3) (Number:mvr 50.4)) 
   (vmopt stop:) 
   (if (= x mx) then (+= v 1))
   (if (= mx x) then (+= v 10))
   (if (= yr myr) then (+= v 100))
   (if (= myr yr) then (+= v 1000))
   v)
(setq result (testMe "basline"))
(defun testMe(name) 
   vars:((Integer:mx 5) (Integer:my 20) (Integer:mz 30) (Integer:mw 40) (Integer:mv 50)) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   vars:((Number:mxr 5.2) (Number:myr 20.1) (Number:mzr 30.9) (Number:mwr 40.3) (Number:mvr 50.4)) 
   (if (= x mx) then (+= v 1))
   (if (= mx x) then (+= v 10))
   (if (= yr myr) then (+= v 100))
   (if (= myr yr) then (+= v 1000))
   v)
(testit "(testMe {mixed type register vmregEQInteger})" result) 
	
(defun testMe(name) 
   vars:((Integer:mx 5) (Integer:my 20) (Integer:mz 30) (Integer:mw 40) (Integer:mv 50)) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   vars:((Number:mxr 5.2) (Number:myr 20.1) (Number:mzr 30.9) (Number:mwr 40.3) (Number:mvr 50.4)) 
   (vmopt stop:) 
   (if (<> x mx) then (+= v 1))
   (if (<> mx x) then (+= v 10))
   (if (<> yr myr) then (+= v 100))
   (if (<> myr yr) then (+= v 1000))
   v)
(setq result (testMe "basline"))
(defun testMe(name) 
   vars:((Integer:mx 5) (Integer:my 20) (Integer:mz 30) (Integer:mw 40) (Integer:mv 50)) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   vars:((Number:mxr 5.2) (Number:myr 20.1) (Number:mzr 30.9) (Number:mwr 40.3) (Number:mvr 50.4)) 
   (if (<> x mx) then (+= v 1))
   (if (<> mx x) then (+= v 10))
   (if (<> yr myr) then (+= v 100))
   (if (<> myr yr) then (+= v 1000))
   v)
(testit "(testMe {mixed type register vmregNEInteger})" result) 
	
(defun testMe(name) 
   vars:((Integer:mx 5) (Integer:my 20) (Integer:mz 30) (Integer:mw 40) (Integer:mv 50)) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   vars:((Number:mxr 5.2) (Number:myr 20.1) (Number:mzr 30.9) (Number:mwr 40.3) (Number:mvr 50.4)) 
   (vmopt stop:) 
   (if (>= x mx) then (+= v 1))
   (if (>= mx x) then (+= v 10))
   (if (>= yr myr) then (+= v 100))
   (if (>= myr yr) then (+= v 1000))
   v)
(setq result (testMe "basline"))
(defun testMe(name) 
   vars:((Integer:mx 5) (Integer:my 20) (Integer:mz 30) (Integer:mw 40) (Integer:mv 50)) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   vars:((Number:mxr 5.2) (Number:myr 20.1) (Number:mzr 30.9) (Number:mwr 40.3) (Number:mvr 50.4)) 
   (if (>= x mx) then (+= v 1))
   (if (>= mx x) then (+= v 10))
   (if (>= yr myr) then (+= v 100))
   (if (>= myr yr) then (+= v 1000))
   v)
(testit "(testMe {mixed type register vmregEQInteger})" result) 
	
(defun testMe(name) 
   vars:((Integer:mx 5) (Integer:my 20) (Integer:mz 30) (Integer:mw 40) (Integer:mv 50)) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   vars:((Number:mxr 5.2) (Number:myr 20.1) (Number:mzr 30.9) (Number:mwr 40.3) (Number:mvr 50.4)) 
   (vmopt stop:) 
   (if (> x mx) then (+= v 1))
   (if (> mx x) then (+= v 10))
   (if (> yr myr) then (+= v 100))
   (if (> myr yr) then (+= v 1000))
   v)
(setq result (testMe "basline"))
(defun testMe(name) 
   vars:((Integer:mx 5) (Integer:my 20) (Integer:mz 30) (Integer:mw 40) (Integer:mv 50)) 
   regs:((Integer:x 5) (Integer:y 20) (Integer:z 30) (Integer:w 40) (Integer:v 50)) 
   regs:((Number:xr 5.2) (Number:yr 20.1) (Number:zr 30.9) (Number:wr 40.3) (Number:vr 50.4)) 
   vars:((Number:mxr 5.2) (Number:myr 20.1) (Number:mzr 30.9) (Number:mwr 40.3) (Number:mvr 50.4)) 
   (if (> x mx) then (+= v 1))
   (if (> mx x) then (+= v 10))
   (if (> yr myr) then (+= v 100))
   (if (> myr yr) then (+= v 1000))
   v)
(testit "(testMe {mixed type register vmregNEInteger})" result) 

(defun foo(x y z) vars:(i j k) (vmpush x y z) (vmpop i j k) (append "S" i " " j " " k))
(testit "(foo  3 4 5)" "S5 4 3")
	
(defun foo(x y z) regs:(i j k) (vmpush x y z) (vmpop i j k) (append "S" i " " j " " k))
(testit "(foo  3 4 5)" "S5 4 3")

(testEnd "Test_VmTest.sl")