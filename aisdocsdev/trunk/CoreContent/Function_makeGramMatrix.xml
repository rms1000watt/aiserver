<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE Function SYSTEM "../DTD/Function.dtd">
<Function>
	<KnowledgeBase>
        <Title>makeGramMatrix</Title>
		<FunctionName>makeGramMatrix</FunctionName>
		<FunctionType>Builtin (Vector Machine Learning)</FunctionType>
    	<ArgumentTypes>NumMatrix Vector </ArgumentTypes>
        <DataType> NumMatrix</DataType>
		<RelatedFunctions> makeGaussianMatrix matrixGaussianEliminate matrixGaussianSubstitute   </RelatedFunctions>
        <RelatedVMInstructions>   none  </RelatedVMInstructions>
		<HumanKeywords> Matrix NumMatrix Boolean Gaussian 
                        least squares dual regression</HumanKeywords>
	</KnowledgeBase>
          <Description><![CDATA[
             <p> The <b>makeGramMatrix </b> function returns the N by N matrix containing the 
             dot products of the row vectors in the input <b>{NumMatrix}</b>, known as the 
             Gram matrix. The <b>makeGramMatrix</b> function will only receive a number matrix 
             and always returns a new number Matrix containing the result.  </p>
          ]]></Description>
	<Brief>
        <Overview><![CDATA[
		<p> The <b>makeGramMatrix </b> function returns the N by N matrix containing the 
             dot products of the row vectors in the input <b>{NumMatrix}</b>, known as the 
             Gram matrix. The <b>makeGramMatrix</b> function will only receive a number matrix 
             and always returns a new number Matrix containing the result.  </p>
        <p>The input argument <b>{NumMatrix}</b> must be an N by M number matrix representing the 
           original independent variable observations (the dependent variable is omitted) in the 
           form of:    </p>   
        <p><b><blockquote>x x x x... y</blockquote></b></p>
        <p><b><blockquote>x x x x... y</blockquote></b></p>
        <p><b><blockquote>....</blockquote></b></p>
        <p><b><blockquote>x x x x... y</blockquote></b></p>
        <p>The output argument will be an N by N number matrix containing the dot products of the 
           row vectors of the original observation matrix X, where: 
           <b>G[r,c] = vectorDotProduct(rowX[r],rowX[c]).</b></p>
        <p>If the optional dependent variable number vector is included, The output argument will 
           be an N by N+1 number matrix containing the dot products of the row vectors of the 
           original observation matrix X, where: 
           <b> G[r,c] = vectorDotProduct(rowX[r],rowX[c])</b>, plus the N+1th column will contain 
           the original dependent values.</p>
        ]]></Overview>
        <Usage><![CDATA[
        <p>The <b>makeGramMatrix  </b> functionis a non-destructive function useful when you want 
          to create a Gram matrix in preparation for dual form regression. See Cristianini, 
          "Support Vector Machines", page 169.
        </p>
        ]]></Usage>
    </Brief>
	<Syntax>
	    <Expression><![CDATA[<p>   (makeGramMatrix  NumMatrix) </p>]]></Expression>
		<Argument>
		  <Name>NumMatrix</Name>
		  <Note><![CDATA[
		  <p> Matrix containing the original independent observations</p>
          ]]></Note>
		  <AISTypes>NumMatrix</AISTypes>
		</Argument>
		<Return><![CDATA[
	    <p>A new number Matrix object containing the dot products of the row vectors of the 
           original observation matrix.  
        </p>
	    ]]></Return>  
	</Syntax>
	<Syntax>
	    <Expression><![CDATA[<p> (makeGramMatrix  NumMatrix  NumVector) </p>]]></Expression>
		<Argument> 
		  <Name>NumMatrix</Name>
		  <Note><![CDATA[
		  <p> Matrix containing the original independent observations</p>
          ]]></Note>
		  <AISTypes>NumMatrix</AISTypes>
		</Argument>
	    <Argument> 
		  <Name>NumVector</Name>
		  <Note><![CDATA[
		  <p> Vector containing the original dependent observations</p>
          ]]></Note>
		  <AISTypes>Vector</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>A new number Matrix object containing the dot products of the row vectors of the 
           original observation matrix plus the original dependent observations in the final 
           column or each row.  
        </p>
	    ]]></Return>
	</Syntax>
</Function>
