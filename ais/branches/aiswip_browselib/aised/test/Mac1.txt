%{# include "cnode.h"  extern int yylex(void);  extern int yyEOF;# define YYSTYPE	oop# define YYDEBUG	0# if (YYDEBUG)#   define note()	printf("%s\n", yyrule[yyn])# else#   define note()# endif%}%start TranslationUnit%token NAME BINARY KEYWORD KEYWORDS CHARACTER NUMBER STRING EXTERN%token TRUE FALSE NIL ASSIGN%%TranslationUnit: Sequence					{ translationUnit($1); };Method: UnaryPattern Sequence				{ note();  $$= methodNode($1, $2); }| BinaryPattern Sequence			{ note();  $$= methodNode($1, $2); }| KeywordPattern Sequence			{ note();  $$= methodNode($1, $2); };UnaryPattern: NAME						{ note();  $$= list_with2(list_with($1), list()); };BinaryPattern: BINARY NAME					{ note();  $$= list_with2(list_with($1), list_with($2)); };KeywordPattern: KEYWORD NAME					{ note();  $$= list_with2(list_with($1), list_with($2)); }| KeywordPattern KEYWORD NAME			{ note();  $$= $1;  list_add(list_at($$, 0), $2);  list_add(list_at($$, 1), $3); }Sequence: /* empty */					{ note();  $$= sequenceNode(list(), list()); }| Statements					{ note();  $$= sequenceNode(list(), $1    ); }| '|' '|'					{ note();  $$= sequenceNode(list(), list()); }| '|' '|' Statements				{ note();  $$= sequenceNode(list(), $3    ); }| '|' Temps '|'					{ note();  $$= sequenceNode($2,     list()); }| '|' Temps '|' Statements			{ note();  $$= sequenceNode($2,     $4    ); };Temps: NAME						{ note();  $$= list_with($1); }| Temps NAME					{ note();  $$= list_add($1, $2); };Statements: '^' Expression				{ note();  $$= list_with(returnNode($2)); }| '^' Expression Dots				{ note();  $$= list_with(returnNode($2)); }| StatementList					{ note();  $$= $1; }| StatementList Dots				{ note();  $$= $1; }| StatementList Dots '^' Expression		{ note();  $$= list_add($1, returnNode($4)); }| StatementList Dots '^' Expression Dots	{ note();  $$= list_add($1, returnNode($4)); };StatementList: Expression					{ note();  $$= list_with($1); }| StatementList Dots Expression			{ note();  $$= list_add($1, $3); };Dots: '.'						{ note(); }| Dots '.'					{ note(); };Expression: Primary					{ note();  $$= $1; }| NAME ASSIGN Expression			{ note();  $$= assignmentNode($1, $3); }| Send						{ note();  $$= $1; }| Send Cascades					{ note();  $$= $1;  sendNode_addMessages($1, $2); };Cascades: ';' Message					{ note();  $$= list_with($2); }| Cascades ';' Message				{ note();  $$= list_add($1, $3); };Send: UnarySend					{ note();  $$= $1; }| BinarySend					{ note();  $$= $1; }| KeywordSend					{ note();  $$= $1; };UnarySend: Primary UnaryMessage				{ note();  $$= sendNode($1, list_with($2)); }| UnarySend UnaryMessage			{ note();  $$= sendNode($1, list_with($2)); };BinarySend: Primary BinaryMessage				{ note();  $$= sendNode($1, list_with($2)); }| UnarySend BinaryMessage			{ note();  $$= sendNode($1, list_with($2)); }| BinarySend BinaryMessage			{ note();  $$= sendNode($1, list_with($2)); };KeywordSend: Primary KeywordMessage			{ note();  $$= sendNode($1, list_with($2)); }| UnarySend KeywordMessage			{ note();  $$= sendNode($1, list_with($2)); }| BinarySend KeywordMessage			{ note();  $$= sendNode($1, list_with($2)); };Message: UnaryMessage					{ note();  $$= $1; }| BinaryMessage					{ note();  $$= $1; }| KeywordMessage				{ note();  $$= $1; };UnaryMessage: NAME						{ note();  $$= messageNode(list_with($1), list()); };BinaryMessage: BINARY BinaryArgument				{ note();  $$= messageNode(list_with($1), list_with($2)); };BinaryArgument: Primary					{ note();  $$= $1; }| UnarySend					{ note();  $$= $1; };KeywordMessage: KEYWORD KeywordArgument			{ note();  $$= messageNode(list_with($1), list_with($2)); }| KeywordMessage KEYWORD KeywordArgument	{ note();  $$= $1;  messageNode_addKeyword($1, $2, $3); };KeywordArgument: Primary					{ note();  $$= $1; }| UnarySend					{ note();  $$= $1; }| BinarySend					{ note();  $$= $1; };Block: '[' Sequence ']'				{ note();  $$= blockNode(list(), $2); }| '[' Parameters '|' Sequence ']'		{ note();  $$= blockNode($2,     $4); };Parameters: ':' NAME					{ note();  $$= list_with($2); }| Parameters ':' NAME				{ note();  $$= list_add($1, $3); };Primary: NAME						{ note();  $$= variableNode($1); }| Literal					{ note();  $$= $1; }| Block						{ note();  $$= $1; }| '(' Expression ')'				{ note();  $$= $2; }| '{' Method '}'				{ note();  $$= $2; };Literal: TRUE						{ note();  $$= constantNode($1); }| FALSE						{ note();  $$= constantNode($1); }| NIL						{ note();  $$= constantNode($1); }| NUMBER					{ note();  $$= constantNode($1); }| CHARACTER					{ note();  $$= constantNode($1); }| STRING					{ note();  $$= constantNode($1); }| EXTERN					{ note();  $$= constantNode($1); }| Symbol					{ note();  $$= $1; }| Array						{ note();  $$= $1; };Symbol: '#' NAME					{ note();  $$= literalNode($2); }| '#' STRING					{ note();  $$= literalNode($2); }| '#' BINARY					{ note();  $$= literalNode($2); }| '#' KEYWORD					{ note();  $$= literalNode($2); }| '#' KEYWORDS					{ note();  $$= literalNode($2); };Array: '#' '[' ArrayBytes ']'			{ note();  $$= literalNode(byteArray_fromList($3)); }| '#' '(' ArrayLiterals ')'			{ note();  $$= literalNode(array_fromList($3)); };ArrayBytes: /* empty */					{ note();  $$= list(); }| ArrayBytes NUMBER				{ note();  $$= list_add($1, $2); };ArrayLiterals: /* empty */					{ note();  $$= list(); }| ArrayLiterals ArrayLiteral			{ note();  $$= list_add($1, $2); };ArrayLiteral: Literal					{ note(); $$= $1; }| NAME						{ note(); $$= $1; }| BINARY					{ note(); $$= $1; }| KEYWORD					{ note(); $$= $1; }| KEYWORDS					{ note(); $$= $1; }| '(' ArrayLiterals ')'				{ note(); $$= array_fromList($2); }| '[' ArrayBytes ']'				{ note(); $$= byteArray_fromList($2); };%%#include <stdio.h>extern int yyLine;void yyerror(const char *reason){  extern char *yytext;  fprintf(stderr, "%d: %s near token '%s'\n", yyLine, reason, yytext);  exit(1);}