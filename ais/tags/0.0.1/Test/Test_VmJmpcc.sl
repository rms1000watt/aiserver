;;/**********************************************************************************
;;    Copyright (C) 2008 Investment Science Corp.
;;
;;    This program is free software: you can redistribute it and/or modify
;;    it under the terms of the GNU General Public License as published by
;;    the Free Software Foundation, either version 3 of the License, or
;;    any later version.
;;
;;    This program is distributed in the hope that it will be useful,
;;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;    GNU General Public License for more details.
;;
;;    You should have received a copy of the GNU General Public License
;;    along with this program.  If not, see <http://www.gnu.org/licenses/>.
;;
;;***********************************************************************************/
;;
;;  
;;  Title:    vmtest Autotest
;;
;;  Author:   Michael F. Korns, Tim May
;;
;;  Project:  AIS Regression Suite
;;
;;  Notes:    A subset of the vmcompiler is acceptance tested in this test script.
;;            Transcendental functions are not tested at this time.
;;
;;  Files:    RegTest.sl
;;

;#memory=500
;#memoryObjectHeaders=100
(runScript "RegTest.sl")
(testStart "Test_VmJmpcc.sl")

;; Strings of interest::
;; (vmc "(define x 10)(while (> x 0) ((writeln x) (define x (- x 1))))")
(setq scriptName "DRM jmpcc Generic Instruction Test")
(writeln   scriptName " started")
(setq scriptCount 0)


;; *******************************************************************
;; name:     Numeric Compares
;; *******************************************************************
(defun testMe(x)
    vars:((n1 1) (n2 2)) 
    vars:((x1 1.0) (x2 2.0)) 
    vars:((d1 #Jan,2,0) (d2 #Jan,3,0))
    vars:((m1 $1.0) (m2 $2.0))
    vars:((p1 #c1) (p2 #c2))
    (setq c1 (character 1))
    (setq c2 (character 2))
	(vmjmplt n2 n1 Bad:)    
	(vmjmple n2 n1 Bad:)    
	(vmjmpeq n2 n1 Bad:)    
	(vmjmpne n2 n2 Bad:)    
	(vmjmpgt n1 n1 Bad:)    
	(vmjmpge n1 n2 Bad:)    
	(vmjmplt n2 x1 Bad:)    
	(vmjmple n2 x1 Bad:)    
	(vmjmpeq n2 x1 Bad:)    
	(vmjmpne n2 x2 Bad:)    
	(vmjmpgt n1 x1 Bad:)    
	(vmjmpge n1 x2 Bad:)    
	(vmjmplt x2 n1 Bad:)    
	(vmjmple x2 n1 Bad:)    
	(vmjmpeq x2 n1 Bad:)    
	(vmjmpne x2 n2 Bad:)    
	(vmjmpgt x1 n1 Bad:)    
	(vmjmpge x1 n2 Bad:)    
	(vmjmplt n2 d1 Bad:)    
	(vmjmple n2 d1 Bad:)    
	(vmjmpeq n2 d1 Bad:)    
	(vmjmpne n2 d2 Bad:)    
	(vmjmpgt n1 d1 Bad:)    
	(vmjmpge n1 d2 Bad:)    
	(vmjmplt d2 n1 Bad:)    
	(vmjmple d2 n1 Bad:)    
	(vmjmpeq d2 n1 Bad:)    
	(vmjmpne d2 n2 Bad:)    
	(vmjmpgt d1 n1 Bad:)    
	(vmjmpge d1 n2 Bad:)    
	(vmjmplt x2 d1 Bad:)    
	(vmjmple x2 d1 Bad:)    
	(vmjmpeq x2 d1 Bad:)    
	(vmjmpne x2 d2 Bad:)    
	(vmjmpgt x1 d1 Bad:)    
	(vmjmpge x1 d2 Bad:)    
	(vmjmplt d2 x1 Bad:)    
	(vmjmple d2 x1 Bad:)    
	(vmjmpeq d2 x1 Bad:)    
	(vmjmpne d2 x2 Bad:)    
	(vmjmpgt d1 x1 Bad:)    
	(vmjmpge d1 x2 Bad:)    
	(vmjmplt x2 m1 Bad:)    
	(vmjmple x2 m1 Bad:)    
	(vmjmpeq x2 m1 Bad:)    
	(vmjmpne x2 m2 Bad:)    
	(vmjmpgt x1 m1 Bad:)    
	(vmjmpge x1 m2 Bad:)    
	(vmjmplt m2 x1 Bad:)    
	(vmjmple m2 x1 Bad:)    
	(vmjmpeq m2 x1 Bad:)    
	(vmjmpne m2 x2 Bad:)    
	(vmjmpgt m1 x1 Bad:)    
	(vmjmpge m1 x2 Bad:)    
	(vmjmplt m2 m1 Bad:)    
	(vmjmple m2 m1 Bad:)    
	(vmjmpeq m2 m1 Bad:)    
	(vmjmpne m2 m2 Bad:)    
	(vmjmpgt m1 m1 Bad:)    
	(vmjmpge m1 m2 Bad:)    
	(vmjmplt m2 m1 Bad:)    
	(vmjmple m2 m1 Bad:)    
	(vmjmpeq m2 m1 Bad:)    
	(vmjmpne m2 m2 Bad:)    
	(vmjmpgt m1 m1 Bad:)    
	(vmjmpge m1 m2 Bad:)    
	(vmjmplt x2 x1 Bad:)    
	(vmjmple x2 x1 Bad:)    
	(vmjmpeq x2 x1 Bad:)    
	(vmjmpne x2 x2 Bad:)    
	(vmjmpgt x1 x1 Bad:)    
	(vmjmpge x1 x2 Bad:)    
	(vmjmplt x2 x1 Bad:)    
	(vmjmple x2 x1 Bad:)    
	(vmjmpeq x2 x1 Bad:)    
	(vmjmpne x2 x2 Bad:)    
	(vmjmpgt x1 x1 Bad:)    
	(vmjmpge x1 x2 Bad:)    
	(vmjmplt p2 x1 Bad:)    
	(vmjmple p2 x1 Bad:)    
	(vmjmpeq p2 x1 Bad:)    
	(vmjmpne p2 x2 Bad:)    
	(vmjmpgt p1 x1 Bad:)    
	(vmjmpge p1 x2 Bad:)    
	(vmjmplt x2 p1 Bad:)    
	(vmjmple x2 p1 Bad:)    
	(vmjmpeq x2 p1 Bad:)    
	(vmjmpne x2 p2 Bad:)    
	(vmjmpgt x1 p1 Bad:)    
	(vmjmpge x1 p2 Bad:)    
	(vmjmplt p2 p1 Bad:)    
	(vmjmple p2 p1 Bad:)    
	(vmjmpeq p2 p1 Bad:)    
	(vmjmpne p2 p2 Bad:)    
	(vmjmpgt p1 p1 Bad:)    
	(vmjmpge p1 p2 Bad:)    
	(vmjmple true false Bad:)    
	(vmjmplt true false Bad:)    
	(vmjmple true false Bad:)    
	(vmjmpeq false true Bad:)    
	(vmjmpne true true Bad:)    
	(vmjmpgt false false Bad:)    
	(vmjmpge false true Bad:)    
	(return true)
	Bad::    
    false)
(testit "(testMe {NumericJmpCC})"  true)

(defun testMe(x)
    vars:(i (n1 1) (n2 2)) 
    vars:((x1 1.0) (x2 2.0)) 
    vars:((d1 #Jan,2,0) (d2 #Jan,3,0))
    vars:((m1 $1.0) (m2 $2.0))
    vars:((p1 #c1) (p2 #c2))
    (setq c1 (character 1))
    (setq c2 (character 2))
	(setq i (compare n2 n1))(vmjmpne i 1 Bad:)    
	(setq i (compare n1 n2))(vmjmpne i -1 Bad:)    
	(setq i (compare n1 n1))(vmjmpne i 0 Bad:)    
	(setq i (compare x2 n1))(vmjmpne i 1 Bad:)    
	(setq i (compare x1 n2))(vmjmpne i -1 Bad:)    
	(setq i (compare x1 n1))(vmjmpne i 0 Bad:)    
	(setq i (compare n2 x1))(vmjmpne i 1 Bad:)    
	(setq i (compare n1 x2))(vmjmpne i -1 Bad:)    
	(setq i (compare n1 x1))(vmjmpne i 0 Bad:)    
	(setq i (compare x2 x1))(vmjmpne i 1 Bad:)    
	(setq i (compare x1 x2))(vmjmpne i -1 Bad:)    
	(setq i (compare x1 x1))(vmjmpne i 0 Bad:)    
	(setq i (compare x2 d1))(vmjmpne i 1 Bad:)    
	(setq i (compare x1 d2))(vmjmpne i -1 Bad:)    
	(setq i (compare x1 d1))(vmjmpne i 0 Bad:)    
	(setq i (compare d2 x1))(vmjmpne i 1 Bad:)    
	(setq i (compare d1 x2))(vmjmpne i -1 Bad:)    
	(setq i (compare d1 x1))(vmjmpne i 0 Bad:)    
	(setq i (compare d2 d1))(vmjmpne i 1 Bad:)    
	(setq i (compare d1 d2))(vmjmpne i -1 Bad:)    
	(setq i (compare d1 d1))(vmjmpne i 0 Bad:)    
	(setq i (compare d2 n1))(vmjmpne i 1 Bad:)    
	(setq i (compare d1 n2))(vmjmpne i -1 Bad:)    
	(setq i (compare d1 n1))(vmjmpne i 0 Bad:)    
	(setq i (compare n2 d1))(vmjmpne i 1 Bad:)    
	(setq i (compare n1 d2))(vmjmpne i -1 Bad:)    
	(setq i (compare n1 d1))(vmjmpne i 0 Bad:)    
	(setq i (compare n2 c1))(vmjmpne i 1 Bad:)    
	(setq i (compare n1 c2))(vmjmpne i -1 Bad:)    
	(setq i (compare n1 c1))(vmjmpne i 0 Bad:)    
	(setq i (compare c2 n1))(vmjmpne i 1 Bad:)    
	(setq i (compare c1 n2))(vmjmpne i -1 Bad:)    
	(setq i (compare c1 n1))(vmjmpne i 0 Bad:)    
	(setq i (compare c2 d1))(vmjmpne i 1 Bad:)    
	(setq i (compare c1 d2))(vmjmpne i -1 Bad:)    
	(setq i (compare c1 d1))(vmjmpne i 0 Bad:)    
	(setq i (compare d2 c1))(vmjmpne i 1 Bad:)    
	(setq i (compare d1 c2))(vmjmpne i -1 Bad:)    
	(setq i (compare d1 c1))(vmjmpne i 0 Bad:)    
	(setq i (compare p2 p1))(vmjmpne i 1 Bad:)    
	(setq i (compare p1 p2))(vmjmpne i -1 Bad:)    
	(setq i (compare p1 p1))(vmjmpne i 0 Bad:)    
	(setq i (compare p2 d1))(vmjmpne i 1 Bad:)    
	(setq i (compare p1 d2))(vmjmpne i -1 Bad:)    
	(setq i (compare p1 d1))(vmjmpne i 0 Bad:)    
	(setq i (compare n2 p1))(vmjmpne i 1 Bad:)    
	(setq i (compare n1 p2))(vmjmpne i -1 Bad:)    
	(setq i (compare n1 p1))(vmjmpne i 0 Bad:)    
	(setq i (compare n2 true))(vmjmpne i 1 Bad:)    
	(setq i (compare true false))(vmjmpne i 1 Bad:)    
	(setq i (compare false true))(vmjmpne i -1 Bad:)    
	(setq i (compare true true))(vmjmpne i 0 Bad:)    
	(return true)
	Bad::    
    false)
(testit "(testMe {NumericCompares})"  true)

;; *******************************************************************
;; name:     String Compares
;; *******************************************************************
(defun testMe(x)
    vars:(s1 s2) 
    vars:(t1 t2) 
    vars:(v1 v2)
    (setq s1  (makeString "Test1"))
    (setq s2  (makeString "Test2"))
    (setq s22 (makeString "Test22"))
    (setq t1  "Test1")
    (setq t2  "Test2")
    (setq t22 "Test22")
    (setq v1  (new Vector: Byte: 5 #\T #\e #\s #\t #\1))
    (setq v2  (new Vector: Byte: 5 #\T #\e #\s #\t #\2))
    (setq v22 (new Vector: Byte: 6 #\T #\e #\s #\t #\2 #\2))
	(vmjmplt s2 s1 Bad:)    
	(vmjmple s2 s1 Bad:)    
	(vmjmpeq s2 s1 Bad:)    
	(vmjmpne s2 s2 Bad:)    
	(vmjmpgt s1 s1 Bad:)    
	(vmjmpge s1 s2 Bad:)    
	(vmjmpge s2 s22 Bad:)    
	(vmjmple s2 true Bad:)    
	(vmjmplt t2 t1 Bad:)    
	(vmjmple t2 t1 Bad:)    
	(vmjmpeq t2 t1 Bad:)    
	(vmjmpne t2 t2 Bad:)    
	(vmjmpgt t1 t1 Bad:)    
	(vmjmpge t1 t2 Bad:)    
	(vmjmpge t2 t22 Bad:)    
	(vmjmple t2 true Bad:)    
	(vmjmplt v2 v1 Bad:)    
	(vmjmple v2 v1 Bad:)    
	(vmjmpeq v2 v1 Bad:)    
	(vmjmpne v2 v2 Bad:)    
	(vmjmpgt v1 v1 Bad:)    
	(vmjmpge v1 v2 Bad:)    
	(vmjmpge v2 v22 Bad:)    
	(vmjmple t2 true Bad:)    
	(vmjmplt s2 t1 Bad:)    
	(vmjmple s2 t1 Bad:)    
	(vmjmpeq s2 t1 Bad:)    
	(vmjmpne s2 t2 Bad:)    
	(vmjmpgt s1 t1 Bad:)    
	(vmjmpge s1 t2 Bad:)    
	(vmjmpge s2 t22 Bad:)    
	(vmjmplt t2 s1 Bad:)    
	(vmjmple t2 s1 Bad:)    
	(vmjmpeq t2 s1 Bad:)    
	(vmjmpne t2 s2 Bad:)    
	(vmjmpgt t1 s1 Bad:)    
	(vmjmpge t1 s2 Bad:)    
	(vmjmpge t2 s22 Bad:)    
	(vmjmplt s2 v1 Bad:)    
	(vmjmple s2 v1 Bad:)    
	(vmjmpeq s2 v1 Bad:)    
	(vmjmpne s2 v2 Bad:)    
	(vmjmpgt s1 v1 Bad:)    
	(vmjmpge s1 v2 Bad:)    
	(vmjmpge s2 v22 Bad:)    
	(vmjmplt v2 s1 Bad:)    
	(vmjmple v2 s1 Bad:)    
	(vmjmpeq v2 s1 Bad:)    
	(vmjmpne v2 s2 Bad:)    
	(vmjmpgt v1 s1 Bad:)    
	(vmjmpge v1 s2 Bad:)    
	(vmjmpge v2 s22 Bad:)    
	(vmjmplt t2 v1 Bad:)    
	(vmjmple t2 v1 Bad:)    
	(vmjmpeq t2 v1 Bad:)    
	(vmjmpne t2 v2 Bad:)    
	(vmjmpgt t1 v1 Bad:)    
	(vmjmpge t1 v2 Bad:)    
	(vmjmpge t2 v22 Bad:)    
	(vmjmplt v2 t1 Bad:)    
	(vmjmple v2 t1 Bad:)    
	(vmjmpeq v2 t1 Bad:)    
	(vmjmpne v2 t2 Bad:)    
	(vmjmpgt v1 t1 Bad:)    
	(vmjmpge v1 t2 Bad:)    
	(vmjmpge v2 t22 Bad:)    
	(return true)
	Bad::    
    false)
(testit "(testMe {StringJmpCC})"  true)

(defun testMe(x)
    vars:(i) 
    vars:(s1 s2) 
    vars:(t1 t2) 
    vars:(v1 v2)
    (setq s1  (makeString "Test1"))
    (setq s2  (makeString "Test2"))
    (setq s22 (makeString "Test22"))
    (setq t1  "Test1")
    (setq t2  "Test2")
    (setq t22 "Test22")
    (setq v1  (new Vector: Byte: 5 #\T #\e #\s #\t #\1))
    (setq v2  (new Vector: Byte: 5 #\T #\e #\s #\t #\2))
    (setq v22 (new Vector: Byte: 6 #\T #\e #\s #\t #\2 #\2))
	(setq i (compare s2 s1))(vmjmpne i 1 Bad:)    
	(setq i (compare s1 s2))(vmjmpne i -1 Bad:)    
	(setq i (compare s1 s1))(vmjmpne i 0 Bad:)    
	(setq i (compare s2 s22))(vmjmpne i -1 Bad:)    
	(setq i (compare s2 true))(vmjmpne i 1 Bad:)    
	(setq i (compare t2 t1))(vmjmpne i 1 Bad:)    
	(setq i (compare t1 t2))(vmjmpne i -1 Bad:)    
	(setq i (compare t1 t1))(vmjmpne i 0 Bad:)    
	(setq i (compare t2 t22))(vmjmpne i -1 Bad:)    
	(setq i (compare t2 true))(vmjmpne i 1 Bad:)    
	(setq i (compare v2 v1))(vmjmpne i 1 Bad:)    
	(setq i (compare v1 v2))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 v1))(vmjmpne i 0 Bad:)    
	(setq i (compare v2 v22))(vmjmpne i -1 Bad:)    
	(setq i (compare v2 true))(vmjmpne i 1 Bad:)    
	(setq i (compare s2 t1))(vmjmpne i 1 Bad:)    
	(setq i (compare s1 t2))(vmjmpne i -1 Bad:)    
	(setq i (compare s1 t1))(vmjmpne i 0 Bad:)    
	(setq i (compare s2 t22))(vmjmpne i -1 Bad:)    
	(setq i (compare t2 s1))(vmjmpne i 1 Bad:)    
	(setq i (compare t1 s2))(vmjmpne i -1 Bad:)    
	(setq i (compare t1 s1))(vmjmpne i 0 Bad:)    
	(setq i (compare t2 s22))(vmjmpne i -1 Bad:)    
	(setq i (compare s2 v1))(vmjmpne i 1 Bad:)    
	(setq i (compare s1 v2))(vmjmpne i -1 Bad:)    
	(setq i (compare s1 v1))(vmjmpne i 0 Bad:)    
	(setq i (compare s2 v22))(vmjmpne i -1 Bad:)    
	(setq i (compare v2 s1))(vmjmpne i 1 Bad:)    
	(setq i (compare v1 s2))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 s1))(vmjmpne i 0 Bad:)    
	(setq i (compare v2 s22))(vmjmpne i -1 Bad:)    
	(setq i (compare t2 v1))(vmjmpne i 1 Bad:)    
	(setq i (compare t1 v2))(vmjmpne i -1 Bad:)    
	(setq i (compare t1 v1))(vmjmpne i 0 Bad:)    
	(setq i (compare t2 v22))(vmjmpne i -1 Bad:)    
	(setq i (compare v2 t1))(vmjmpne i 1 Bad:)    
	(setq i (compare v1 t2))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 t1))(vmjmpne i 0 Bad:)    
	(setq i (compare v2 t22))(vmjmpne i -1 Bad:)    
	(return true)
	Bad::    
    false)
(testit "(testMe {StringCompares})"  true)

;; *******************************************************************
;; name:     Lambda Compares
;; *******************************************************************
(defun testMe(x)
    vars:(i)  
    (defun a1() vars:((x "Test1")) x) 
    (defun a2() vars:((x "Test2")) x) 
	(vmjmplt a2 a1 Bad:)    
	(vmjmple a2 a1 Bad:)    
	(vmjmpeq a2 a1 Bad:)    
	(vmjmpne a2 a2 Bad:)    
	(vmjmpgt a1 a1 Bad:)    
	(vmjmpge a1 a2 Bad:)    
	(vmjmpge true a2 Bad:)    
	(setq i (compare a2 a1))(vmjmpne i 1 Bad:)    
	(setq i (compare a1 a2))(vmjmpne i -1 Bad:)    
	(setq i (compare a1 a1))(vmjmpne i 0 Bad:)    
	(setq i (compare a1 true))(vmjmpne i 1 Bad:)    
	(return true)
	Bad::    
    false)
(testit "(testMe {LambdaCompares})"  true)

;; *******************************************************************
;; name:     BitVector Compares
;; *******************************************************************
(defun testMe(x)
    vars:(i)  
    vars:((v1 #(bit| 1 0 1 0 0)))
    vars:((v2 #(bit| 1 0 1 0 1)))
    vars:((v22 #(bit| 1 0 1 0 1 1))) 
	(vmjmplt v2 v1 Bad:)    
	(vmjmple v2 v1 Bad:)    
	(vmjmpeq v2 v1 Bad:)    
	(vmjmpne v2 v2 Bad:)    
	(vmjmpgt v1 v1 Bad:)    
	(vmjmpge v1 v2 Bad:)    
	(vmjmpge v2 v22 Bad:)    
	(setq i (compare v2 v1))(vmjmpne i 1 Bad:)    
	(setq i (compare v1 v2))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 v1))(vmjmpne i 0 Bad:)    
	(setq i (compare v2 v22))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 true))(vmjmpne i 1 Bad:)    
	(return true)
	Bad::    
    false)
(testit "(testMe {BitVectorCompares})"  true)

;; *******************************************************************
;; name:     CpxVector Compares
;; *******************************************************************
(defun testMe(x)
    vars:(i)  
    vars:((v1 #(cpx| 1 2 3 4)))
    vars:((v2 #(cpx| 1 2 3 5)))
    vars:((v22 #(cpx| 1 2 3 5 6 7))) 
	(vmjmplt v2 v1 Bad:)    
	(vmjmple v2 v1 Bad:)    
	(vmjmpeq v2 v1 Bad:)    
	(vmjmpne v2 v2 Bad:)    
	(vmjmpgt v1 v1 Bad:)    
	(vmjmpge v1 v2 Bad:)    
	(vmjmpge v2 v22 Bad:)    
	(setq i (compare v2 v1))(vmjmpne i 1 Bad:)    
	(setq i (compare v1 v2))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 v1))(vmjmpne i 0 Bad:)    
	(setq i (compare v2 v22))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 true))(vmjmpne i 1 Bad:)    
	(return true)
	Bad::    
    false)
(testit "(testMe {CpxVectorCompares})"  true)

;; *******************************************************************
;; name:     Dictionary Compares
;; *******************************************************************
(defun testMe(x)
    vars:(i)  
    vars:((v1 #{dic| a 2 b 4}))
    vars:((v2 #{dic| a 2 b 5}))
    vars:((v22 #{dic| a 2 b 5 c 7})) 
	(vmjmplt v2 v1 Bad:)    
	(vmjmple v2 v1 Bad:)    
	(vmjmpeq v2 v1 Bad:)    
	(vmjmpne v2 v2 Bad:)    
	(vmjmpgt v1 v1 Bad:)    
	(vmjmpge v1 v2 Bad:)    
	(vmjmpge v2 v22 Bad:)    
	(setq i (compare v2 v1))(vmjmpne i 1 Bad:)    
	(setq i (compare v1 v2))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 v1))(vmjmpne i 0 Bad:)    
	(setq i (compare v2 v22))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 true))(vmjmpne i 1 Bad:)    
	(return true)
	Bad::    
    false)
(testit "(testMe {DictionaryCompares})"  true)

;; *******************************************************************
;; name:     Directory Compares
;; *******************************************************************
(defun testMe(x)
    vars:(i)  
    vars:((v1 #{dir| 1 2 3 4}))
    vars:((v2 #{dir| 1 2 3 5}))
    vars:((v22 #{dir| 1 2 3 5 6 7})) 
	(vmjmplt v2 v1 Bad:)    
	(vmjmple v2 v1 Bad:)    
	(vmjmpeq v2 v1 Bad:)    
	(vmjmpne v2 v2 Bad:)    
	(vmjmpgt v1 v1 Bad:)    
	(vmjmpge v1 v2 Bad:)    
	(vmjmpge v2 v22 Bad:)    
	(setq i (compare v2 v1))(vmjmpne i 1 Bad:)    
	(setq i (compare v1 v2))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 v1))(vmjmpne i 0 Bad:)    
	(setq i (compare v2 v22))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 true))(vmjmpne i 1 Bad:)    
	(return true)
	Bad::    
    false)
(testit "(testMe {DirectoryCompares})"  true)

;; *******************************************************************
;; name:     FltVector Compares
;; *******************************************************************
(defun testMe(x)
    vars:(i)  
    vars:((v1 #(float| 1 2 3 4)))
    vars:((v2 #(float| 1 2 3 5)))
    vars:((v22 #(float| 1 2 3 5 6 7))) 
	(vmjmplt v2 v1 Bad:)    
	(vmjmple v2 v1 Bad:)    
	(vmjmpeq v2 v1 Bad:)    
	(vmjmpne v2 v2 Bad:)    
	(vmjmpgt v1 v1 Bad:)    
	(vmjmpge v1 v2 Bad:)    
	(vmjmpge v2 v22 Bad:)    
	(setq i (compare v2 v1))(vmjmpne i 1 Bad:)    
	(setq i (compare v1 v2))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 v1))(vmjmpne i 0 Bad:)    
	(setq i (compare v2 v22))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 true))(vmjmpne i 1 Bad:)    
	(return true)
	Bad::    
    false)
(testit "(testMe {FltVectorCompares})"  true)

;; *******************************************************************
;; name:     IntVector Compares
;; *******************************************************************
(defun testMe(x)
    vars:(i)  
    vars:((v1 #(int| 1 2 3 4)))
    vars:((v2 #(int| 1 2 3 5)))
    vars:((v22 #(int| 1 2 3 5 6 7))) 
	(vmjmplt v2 v1 Bad:)    
	(vmjmple v2 v1 Bad:)    
	(vmjmpeq v2 v1 Bad:)    
	(vmjmpne v2 v2 Bad:)    
	(vmjmpgt v1 v1 Bad:)    
	(vmjmpge v1 v2 Bad:)    
	(vmjmpge v2 v22 Bad:)    
	(setq i (compare v2 v1))(vmjmpne i 1 Bad:)    
	(setq i (compare v1 v2))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 v1))(vmjmpne i 0 Bad:)    
	(setq i (compare v2 v22))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 true))(vmjmpne i 1 Bad:)    
	(return true)
	Bad::    
    false)
(testit "(testMe {IntVectorCompares})"  true)

;; *******************************************************************
;; name:     Matrix Compares
;; *******************************************************************
(defun testMe(x)
    vars:(i)  
    vars:((v1 #(mat| 1 2 3 4)))
    vars:((v2 #(mat| 1 2 3 5)))
    vars:((v22 #(mat| 1 2 3 5 6 7))) 
	(vmjmplt v2 v1 Bad:)    
	(vmjmple v2 v1 Bad:)    
	(vmjmpeq v2 v1 Bad:)    
	(vmjmpne v2 v2 Bad:)    
	(vmjmpgt v1 v1 Bad:)    
	(vmjmpge v1 v2 Bad:)    
	(vmjmpge v2 v22 Bad:)    
	(setq i (compare v2 v1))(vmjmpne i 1 Bad:)    
	(setq i (compare v1 v2))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 v1))(vmjmpne i 0 Bad:)    
	(setq i (compare v2 v22))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 true))(vmjmpne i 1 Bad:)    
	(return true)
	Bad::    
    false)
(testit "(testMe {MatrixCompares})"  true)

;; *******************************************************************
;; name:     NumMatrix Compares
;; *******************************************************************
(defun testMe(x)
    vars:(i)  
    vars:((v1 #(nummat| 1 2 3 4)))
    vars:((v2 #(nummat| 1 2 3 5)))
    vars:((v22 #(nummat| 1 2 3 5 6 7))) 
	(vmjmplt v2 v1 Bad:)    
	(vmjmple v2 v1 Bad:)    
	(vmjmpeq v2 v1 Bad:)    
	(vmjmpne v2 v2 Bad:)    
	(vmjmpgt v1 v1 Bad:)    
	(vmjmpge v1 v2 Bad:)    
	(vmjmpge v2 v22 Bad:)    
	(setq i (compare v2 v1))(vmjmpne i 1 Bad:)    
	(setq i (compare v1 v2))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 v1))(vmjmpne i 0 Bad:)    
	(setq i (compare v2 v22))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 true))(vmjmpne i 1 Bad:)    
	(return true)
	Bad::    
    false)
(testit "(testMe {NumMatrixCompares})"  true)

;; *******************************************************************
;; name:     NumVector Compares
;; *******************************************************************
(defun testMe(x)
    vars:(i)  
    vars:((v1 #(num| 1 2 3 4)))
    vars:((v2 #(num| 1 2 3 5)))
    vars:((v22 #(num| 1 2 3 5 6 7))) 
	(vmjmplt v2 v1 Bad:)    
	(vmjmple v2 v1 Bad:)    
	(vmjmpeq v2 v1 Bad:)    
	(vmjmpne v2 v2 Bad:)    
	(vmjmpgt v1 v1 Bad:)    
	(vmjmpge v1 v2 Bad:)    
	(vmjmpge v2 v22 Bad:)    
	(setq i (compare v2 v1))(vmjmpne i 1 Bad:)    
	(setq i (compare v1 v2))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 v1))(vmjmpne i 0 Bad:)    
	(setq i (compare v2 v22))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 true))(vmjmpne i 1 Bad:)    
	(return true)
	Bad::    
    false)
(testit "(testMe {NumVectorCompares})"  true)

;; *******************************************************************
;; name:     ObjVector Compares
;; *******************************************************************
(defun testMe(x)
    vars:(i)  
    vars:((v1 #(obj| a b c d)))
    vars:((v2 #(obj| a b c e)))
    vars:((v22 #(obj| a b c e f g))) 
	(vmjmplt v2 v1 Bad:)    
	(vmjmple v2 v1 Bad:)    
	(vmjmpeq v2 v1 Bad:)    
	(vmjmpne v2 v2 Bad:)    
	(vmjmpgt v1 v1 Bad:)    
	(vmjmpge v1 v2 Bad:)    
	(vmjmpge v2 v22 Bad:)    
	(setq i (compare v2 v1))(vmjmpne i 1 Bad:)    
	(setq i (compare v1 v2))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 v1))(vmjmpne i 0 Bad:)    
	(setq i (compare v2 v22))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 true))(vmjmpne i 1 Bad:)    
	(return true)
	Bad::    
    false)
(testit "(testMe {ObjVectorCompares})"  true)

;; *******************************************************************
;; name:     ShortVector Compares
;; *******************************************************************
(defun testMe(x)
    vars:(i)  
    vars:((v1 #(short| 1 2 3 4)))
    vars:((v2 #(short| 1 2 3 5)))
    vars:((v22 #(short| 1 2 3 5 6 7))) 
	(vmjmplt v2 v1 Bad:)    
	(vmjmple v2 v1 Bad:)    
	(vmjmpeq v2 v1 Bad:)    
	(vmjmpne v2 v2 Bad:)    
	(vmjmpgt v1 v1 Bad:)    
	(vmjmpge v1 v2 Bad:)    
	(vmjmpge v2 v22 Bad:)    
	(setq i (compare v2 v1))(vmjmpne i 1 Bad:)    
	(setq i (compare v1 v2))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 v1))(vmjmpne i 0 Bad:)    
	(setq i (compare v2 v22))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 true))(vmjmpne i 1 Bad:)    
	(return true)
	Bad::    
    false)
(testit "(testMe {ShortVectorCompares})"  true)

;; *******************************************************************
;; name:     Structure Compares
;; *******************************************************************
(defun testMe(x)
    vars:(i)  
    vars:((v1 #{a 2 b 4}))
    vars:((v2 #{a 2 b 5}))
    vars:((v22 #{a 2 b 5 c 7})) 
	(vmjmplt v2 v1 Bad:)    
	(vmjmple v2 v1 Bad:)    
	(vmjmpeq v2 v1 Bad:)    
	(vmjmpne v2 v2 Bad:)    
	(vmjmpgt v1 v1 Bad:)    
	(vmjmpge v1 v2 Bad:)    
	(vmjmpge v2 v22 Bad:)    
	(setq i (compare v2 v1))(vmjmpne i 1 Bad:)    
	(setq i (compare v1 v2))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 v1))(vmjmpne i 0 Bad:)    
	(setq i (compare v2 v22))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 true))(vmjmpne i 1 Bad:)    
	(return true)
	Bad::    
    false)
(testit "(testMe {StructureCompares})"  true)

;; *******************************************************************
;; name:     Vector Compares
;; *******************************************************************
(defun testMe(x)
    vars:(i)  
    vars:((v1 #(a 2 b 4)))
    vars:((v2 #(a 2 b 5)))
    vars:((v22 #(a 2 b 5 c 7))) 
	(vmjmplt v2 v1 Bad:)    
	(vmjmple v2 v1 Bad:)    
	(vmjmpeq v2 v1 Bad:)    
	(vmjmpne v2 v2 Bad:)    
	(vmjmpgt v1 v1 Bad:)    
	(vmjmpge v1 v2 Bad:)    
	(vmjmpge v2 v22 Bad:)    
	(setq i (compare v2 v1))(vmjmpne i 1 Bad:)    
	(setq i (compare v1 v2))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 v1))(vmjmpne i 0 Bad:)    
	(setq i (compare v2 v22))(vmjmpne i -1 Bad:)    
	(setq i (compare v1 true))(vmjmpne i 1 Bad:)    
	(return true)
	Bad::    
    false)
(testit "(testMe {VectorCompares})"  true)

(testEnd "Test_VmJmpcc.sl")

