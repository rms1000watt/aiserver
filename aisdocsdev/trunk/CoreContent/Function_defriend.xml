<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE Function SYSTEM "../DTD/Function.dtd">
<Function>
	<KnowledgeBase>
        <Title>defriend</Title>
		<FunctionName>defriend</FunctionName>
		<FunctionType>Macro</FunctionType>
        <ArgumentTypes> Lambda  Symbol</ArgumentTypes>
        <DataType> Lambda</DataType>
	    <RelatedFunctions>deforphan defmethod defmacro defun defriend</RelatedFunctions>
        <RelatedVMInstructions>   </RelatedVMInstructions>
		<HumanKeywords>parent child </HumanKeywords>
	</KnowledgeBase>
         <Description><![CDATA[
             <p> The <b>defriend</b> Macro creates a new Lambda object and assigns it to the 
             specified persistent variable name {child} of the parent Lambda {parent}. </p>
          ]]></Description>
	<Brief>
	   <Overview><![CDATA[
	    <p> The <b>defriend</b> Macro creates a new Lambda object and assigns it to the specified 
           persistent variable name <b>{child}</b> of the parent Lambda <b>{parent}</b>. The 
           <b>defriend</b> Macro always returns the newly created Lambda object. Following the 
           <b>defriend</b> Macro, the new Lambda will be invoked whenever the child member of the 
           parent Lambda is referenced.</p>
        ]]></Overview>
       <Usage><![CDATA[
        <p>Use this macro when the parent Lambda and all its children are too large for one 
          source file, or when you wish each friend Lambda to be defined in a separate source 
          file from the parent.</p>
        ]]></Usage>
    </Brief>
	<Syntax>
	    <Expression><![CDATA[<p><b>    (defriend parent:child(arg...)  faces:(var...)  pvars:(var...)  
                cvars:(vars...) regs:(vars...) vars:(var...) exp...)</b></p>
             <p><b>   (defriend parent child(arg...)  faces:(var...)  pvars:(var...)  
                cvars:(vars...) regs:(vars...) vars:(var...)  exp...)</b></p>
              <p><b>   (defriend parent.mem child(arg...)  faces:(var...)  pvars:(var...) 
               cvars:(vars...) regs:(vars...) vars:(var...)   exp...)</b></p>
        ]]></Expression>
		<Argument>
		  <Name>parent:</Name>
		  <Note><![CDATA[
		  <p> The Parent Lambda that the child will be associated with. </p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Argument>
		  <Name>child:</Name>
		  <Note><![CDATA[
		  <p> The name of the new Lambda object (the Child Lambda). </p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Argument>
		  <Name>(arg...)</Name>
		  <Note><![CDATA[
		  <p> Optional Argument. Argument list for the Lambda. </p>
          ]]></Note>
		  <AISTypes>---</AISTypes>
		</Argument>
		<Argument>
		  <Name>faces:(var...)</Name>
		  <Note><![CDATA[
		  <p> Optional Argument. If present, must be followed by a interfaces feature list. </p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Argument>
		  <Name>vars:(var...)</Name>
		  <Note><![CDATA[
		  <p> Optional Argument. If present, must be followed by a local variable list.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Argument>
		  <Name>pvars:(var...)</Name>
		  <Note><![CDATA[
		  <p> Optional Argument. If present, must be followed by a persistent variable list.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Argument>
		  <Name>cvars:(var...)</Name>
		  <Note><![CDATA[
		  <p> Optional Argument. If present, must be followed by a persistent class variable list.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Argument>
		  <Name>regs:(var...)</Name>
		  <Note><![CDATA[
		  <p> Optional Argument. If present, must be followed by a register variable list 

              (up to fifty register variables are allowed).</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Argument>
		  <Name>exp...</Name>
		  <Note><![CDATA[
		  <p> The Lisp statements that forms the Lambdas</p>
          ]]></Note>
		  <AISTypes>---</AISTypes>
		</Argument>
		<Return><![CDATA[
	    <p>An Lambda that will be assigned the name {child}.</p>
	    ]]></Return>
	</Syntax>
</Function>
