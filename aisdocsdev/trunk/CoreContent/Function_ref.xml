<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE Function SYSTEM "../DTD/Function.dtd">
<Function>
	<KnowledgeBase>
        <Title>ref</Title>
		<FunctionName>ref</FunctionName>
		<FunctionType>Builtin</FunctionType>
		<ArgumentTypes> String Symbol Structure Brick Matrix List Void Number Date Function ObjectRepository 
                        ShortVector Dictionary  Directory Vector Text Integer Boolean Character Complex Lambda NumMatrix</ArgumentTypes>        
		<DataType>String Symbol Structure Dictionary Directory Date Function Lambda NumMatrix Boolean Vector  List Brick Matrix Void Number Character Complex FltVector ShortVector IntVector NumVector ObjVector  BitVector PcodeVector  ObjectRepository </DataType>
		<RelatedFunctions>setq right left mid find fieldsOf refAttributes refValues</RelatedFunctions>
        <RelatedVMInstructions> vmregStringCompare vmregStringiCompare vmregObjPointer</RelatedVMInstructions>
		<HumanKeywords>ref reference set position</HumanKeywords>
	</KnowledgeBase>
	 <Description><![CDATA[ 
             <p> The <b>ref</b> function retrieves the character of a 
                 specified position from a Text or String. </p>
             <p> The <b>ref</b> function retrieves the global value of
                 a Symbol. </p>
             <p> The <b>ref</b> function retrieves a value or a key from a Structure.  </p>
             <p> The <b>ref</b> function retrieves a value or a key from a Dictionary.  </p>
             <p> The <b>ref</b> function retrieves a value or a key from a Directory.  </p>
             <p> The <b>ref</b> function retrieves the I-th element  from the Vector or any Vector Subtypes.   </p>
             <p> The <b>ref</b> function retrieves a field value or vital data element from a Brick. </p>
             <p> The <b>ref</b> function retrieves  the I-th element  from the Matrix. </p>
             <p> The <b>ref</b> function retrieves  the I-th element  from the NumMatrix. </p>
             <p> The <b>ref</b> function retrieves  the I-th element  from the List. </p>
             <p> The <b>ref</b> function is used with an Lambda object to reference a method, or persistent variable 
             that is owned by the Lambda. </p>
             <p> The <b>ref</b> function allows retrieval of an object from the Object Repository. </p>
             <p> The <b>ref</b> function retrieves the value of a variable.  </p>
         ]]></Description>
	<Brief>                
	   <Overview-String><![CDATA[
		<p>The <b>ref</b> function retrieves a the I-th character  from a 
		   Text or String.
        </p>
        ]]></Overview-String>
        <Overview-Symbol><![CDATA[
		<p>The <b>ref</b> function retrieves the global value 
           of a Symbol.
        </p>
        ]]></Overview-Symbol>
       <Overview-Structure><![CDATA[
		<p>The <b>ref</b> function retrieves a value or a key from a Structure. 
        </p>
        ]]></Overview-Structure>
       <Overview-Dictionary><![CDATA[
		<p>The <b>ref</b> function retrieves a value or a key from a Dictionary. 
        </p>
        ]]></Overview-Dictionary>
        <Overview-Directory><![CDATA[
		<p>The <b>ref</b> function retrieves a value or a key from a Directory. 
        </p>
        ]]></Overview-Directory>
        <Overview><![CDATA[
		<p>The <b>ref</b> function retrieves the I-th element  from the Vector.
        </p>
        ]]></Overview>
        <Overview-Brick><![CDATA[
		<p>The <b>ref</b> command retrieves a field value or vital data element from a Brick. 
        </p>
        ]]></Overview-Brick>
        <Overview-Matrix><![CDATA[
		<p>The <b>ref</b> function retrieves  the I-th element  from the Matrix 
        </p>
        ]]></Overview-Matrix>
        <Overview-NumMatrix><![CDATA[
		<p>The <b>ref</b> function retrieves  the I-th element  from the NumMatrix 
        </p>
        ]]></Overview-NumMatrix>
        <Overview-List><![CDATA[
		<p>The <b>ref</b> function retrieves  the I-th element  from the List 
        </p>
        ]]></Overview-List>
        <Overview-Function><![CDATA[
		<p>The <b>ref</b> function retrieves the value of a symbol.  
          When the argument of the <b>ref</b> function is a Function object id, 
          the returned value is the function name.  If the argument of the <b>ref</b> 
          function is Function name, the returned value is the object id of the function.
        </p>
        ]]></Overview-Function>
        <Overview-Lambda><![CDATA[
             <p> The <b>ref</b> function is used with an Lambda object to reference a method, or persistent variable 
             that is owned by the Lambda. </p>
         ]]></Overview-Lambda>
        <Overview-ObjectRepository><![CDATA[ 
          <p> The <b>ref</b> allows retrieval of an object from the Object Repository <b>{aGor}</b>. 
           The <b>ref</b> function supports retrieval by arbitrary keys, by index, and by special symbolic keys. 
           The special symbolic keys are <b>keys: member:, odbid:, name:, and position:</b>. The special keys enable the 
           <b>ref</b> function to retrieve special information about the Object Repository such as the <i>filename</i>, associated
           with the Object Repository, the <i>position</i> in the Repository Index of a specific key or the <i>odbid</i> or <i>frameid</i>
           which are the identifiers needed by the low level database functions. </p>
         <p>As objects are added to the Object Repository, the keys are added to the Repository Index. The Repository Index is a Directory 
          Object and the keys are saved in sorted order. The entries in the Repository Index are Directory bindings comprised 
          of a key and a pointer value which points to the location of the Object in Object Repository (In some cases, the value may be saved 
          as an immediate value in the Repository Index, see the <b>saveImmediate</b> function). The Object Repository
          automatically handles retrieval of the appropriate value off the disk. 
           <p></p> 
        	<img src="Image_Repository_KeyIndex_001.gif">
           <p></p>
         ]]></Overview-ObjectRepository>
        <Overview><![CDATA[
		<p>The <b>ref</b> function retrieves  the value of a variable. 
        </p>
        ]]></Overview>
        <Usage-String><![CDATA[
        <p>The <b>ref</b> function is used to access a  single character 
           from a String or Text.  Assuming there are <b>n</b> characters 
           in the String or Text, the character indices run from  <b>0</b> 
           thru <b>n-1</b>
          </p>
        ]]></Usage-String>
       <Usage-Symbol><![CDATA[
        <p>The <b>ref</b> function is used to access the value of a character 
            within a Symbol.  If no value has been assigned, the <b>ref</b> 
            function will return #void.
          </p>
        ]]></Usage-Symbol>
      <Usage-Structure><![CDATA[
        <p>The <b>ref</b> command is used to retrieve a value from a Structure when the 
          key is known or if the position in the Structure is known.  The <b>ref</b> command 
          will return either the key or the value at that position (see third syntax form).
          </p>
        ]]></Usage-Structure>
        <Usage-Dictionary><![CDATA[
        <p>The <b>ref</b> command is used to retrieve a value from a Dictionary when the 
          key is known or if the position in the Dictionary is known.  If two indices are used, 
          the <b>ref</b> command will return either the key or the value at that location.
        </p>
        ]]></Usage-Dictionary>
        <Usage-Directory><![CDATA[
        <p>The <b>ref</b> command is used to retrieve a value from a Directory when the 
          key is known or if the position in the Directory is known.  If two indices are used, 
          the <b>ref</b> command will return either the key or the value at that location.
        </p>
        ]]></Usage-Directory>
        <Usage><![CDATA[
        <p>The <b>ref</b> function is used to access a single vector element.  Assuming there 
           are n elements in a Vector, the elements of the vector are accessed as elements
           <b>0</b> thru <b>n-1</b>.
        </p>
        ]]></Usage>
       <Usage-Brick><![CDATA[
        <p>The <b>ref</b> command is used to retrieve a field value or vital data element from a 
            Brick when the field name is known or if the field position in the Brick is known. 
        </p>
       ]]></Usage-Brick>
      <Usage-Matrix><![CDATA[
       <p>The <b>ref</b> function is used to access a single Matrix element.  Assuming there 
          are n elements in a Matrix, the elements of the Matrix are accessed as elements 0 
          thru n-1 , or they may be referenced by dimension list if the Matrix is of rank greater 
          than one.
        </p>
       ]]></Usage-Matrix>
      <Usage-NumMatrix><![CDATA[
       <p>The <b>ref</b> function is used to access a single NumMatrix element.  Assuming there 
          are n elements in a NumMatrix, the elements of the NumMatrix are accessed as elements 0 
          thru n-1 , or they may be referenced by dimension list if the NumMatrix is of rank greater 
          than one.
        </p>
       ]]></Usage-NumMatrix>
      <Usage-List><![CDATA[
       <p>The <b>ref</b> function is used to access a single List element.  Assuming there 
          are n elements in a List, the elements of the List are accessed as elements 0 
          thru n-1. Also the special attributes of <b>Value:</b> and <b>Pair:</b> are supported. 
          The Value index always returns the Pair itself.  The Pair index always return true.
        </p>
       ]]></Usage-List>
      <Usage-Function><![CDATA[
       <p>The <b>ref</b> function is used to access the value of a Function name or Function 
          object id. Only one of the arguments can be used.
        </p>
       ]]></Usage-Function>
      <Usage-Date><![CDATA[
       <p>The <b>ref</b> function is used to access the value of a Date.  The default display 
         format used by <b>ref</b>  is the Julian representation of the number.
        </p>
       ]]></Usage-Date>
     <Usage-Lambda><![CDATA[
       <p>The <b>ref</b> statement is used to return the value of a persistent variable 
           belonging to an Lambda or the Object Id of a child Lambda. 
       </p>
       ]]></Usage-Lambda>
    <Usage-ObjectRepository><![CDATA[
       <p>The <b>ref</b> function is used to retrieve any of the following: </p>
       <ul>
       <li>Any object, previously stored in the specified ObjectRepository by 
         key. If no object has been stored under the specified key, then <b>#void</b> is returned.</li>
       <li>Any key or object, previously stored in the specified 
       ObjectRepository at the position specified by <b>{index1}</b> and the element specified by <b>{index2}</b>. 
        The first index argument <b>{index1}</b> must be in the range 0 to the number of objects in the Object Repository
         - 1. The second index <b>{index2}</b> must be 0 (returns the key) or 1 (returns the object). If
       <b>{index1}</b> or <b>{index2}</b> is invalid, the constant <b>#void</b> is returned.  </li>
       <li>The numeric position of a given key argument <b>{key}</b>, in a given Object Repository argument 
         <b>{aGor}</b>. If the key is not in the specified Object Repository <b>{aGor}</b>, 
         then the Boolean value <b>false</b> is returned. </li>
       <li>The <b>odbID</b> of an Object Repository <b>{aGor}</b> currently opened archive database file. The <b>odbid</b>
          is either <b>#void</b>, when a database is not active, or a <b>Byte Vector</b> if the database is activated via 
          a <b>beginTransaction</b>. The Byte Vector contents may not make sense to a human being, but the Byte Vector is 
           used with all low-level internal database functions. </li>
        <li>The filename of an Object Repository <b>{aGor}</b> using the special symbol key arguments <b>member:</b> and <b>name:</b> </li>
         </ul>
        <p>Also, the Object Repository supports low level operations such as Direct Frame Retrieval and Direct Frame Storage. 
         The <b>ref</b> function can be used to retrieve a previously saved object by way of the object's <b>frameid</b>
         thus bypassing the repository index. The specified <b>frameid</b> must have been obtained from a previous repository 
         save (see the <b>Direct Frame Storage</b> feature of the <b>setq</b> function).</p>
       <p><b>Warning:</b> If no object has been stored under the specified <b>frameid</b> value, or if the specified <b>frameid</b>
         is invalid, then an error is returned. </p>
       ]]></Usage-ObjectRepository>
      <Usage><![CDATA[
       <p>The <b>ref</b> function is used to access the value of a variable.
        </p>
       ]]></Usage>
    </Brief>
	<Syntax-String>
	    <Expression><![CDATA[<p><b>(ref   string  index)</b></p>
                    <p><b> (ref   string  index)</b></p>
                    <p><b><FONT COLOR="#0000ff">Strong Typed: </FONT>
                       <blockquote>(refString   string  index) </blockquote> </b></p>
                    <p><b><blockquote> (refText   text  index)</blockquote>  </b></p>]]></Expression>
		<Argument> 
		  <Name>string</Name>
		  <Note><![CDATA[
		  <p> A String object or Text </p>
          ]]></Note>
		  <AISTypes>String or Text</AISTypes>
		</Argument>  
    	<Argument> 
		  <Name>index</Name>
		  <Note><![CDATA[
		  <p> An integer index </p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>  
		<Return><![CDATA[ 
	    <p>An integer index  </p>
	    ]]></Return>
	</Syntax-String>
    <Syntax-Symbol>
	    <Expression><![CDATA[<p><b>(ref   symbol  index)</b></p>
                    <p><b><FONT COLOR="#0000ff">Strong Typed: </FONT>
                       <blockquote>(refString   symbol  index) </blockquote> </b></p>]]></Expression>
		<Argument> 
		  <Name>symbol</Name>
		  <Note><![CDATA[
		  <p> A Symbol</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
    	<Argument> 
		  <Name>index</Name>
		  <Note><![CDATA[
		  <p> The index of the character within  the Symbol to reference </p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>  
		<Return><![CDATA[ 
	    <p>The value of the character within the Symbol </p>
	    ]]></Return>    	      
	</Syntax-Symbol>
    <Syntax-Structure>
	    <Expression><![CDATA[<p><b> (ref aStruct key) </b></p>                 			     
					<p><b><FONT COLOR="#0000ff">Strong Typed: </FONT>
                       <blockquote>(refStrValue aStruct index) </blockquote> </b></p>
                    <p><b><blockquote> (refStrKey aStruct index)</blockquote>  </b></p>]]></Expression>
		<Argument> 
		  <Name>aStruct</Name>
		  <Note><![CDATA[
		  <p> The Structure to be referenced.</p>
          ]]></Note>
		  <AISTypes>Structure</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>key</Name>
		  <Note><![CDATA[
		  <p>The key whose bound value is to be returned. If no such key is present in the 
             current binding set, a value of #void will be returned. The current key value 
             bindings are assumed NOT to exist in binary unique ascending sorted order.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns a value bound with the key.</p>
	    ]]></Return>    
    </Syntax-Structure>
    <Syntax-Structure>
        <Expression><![CDATA[ <p><b>  (ref aStruct index1)  </b></p>]]></Expression>
	   <Argument> 
		  <Name>aStruct</Name>
		  <Note><![CDATA[
		  <p> The Structure to be referenced.</p>
          ]]></Note>
		  <AISTypes>Structure</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index1</Name>
		  <Note><![CDATA[
		  <p>If present and numeric, the value at the specified integer index position will 
             be returned. </p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>     
		<Return><![CDATA[ 
	    <p>Returns a value associated with the specified integer index position.</p>
	    ]]></Return>    	    
    </Syntax-Structure>
    <Syntax-Structure>
        <Expression><![CDATA[<p><b>(ref aStruct index1 index2) </b></p>]]></Expression>
       <Argument> 
		  <Name>aStruct</Name>
		  <Note><![CDATA[
		  <p> The Structure to be referenced.</p>
          ]]></Note>
		  <AISTypes>Structure</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index1</Name>
		  <Note><![CDATA[
		  <p>If present and numeric, index1 specifies an integer index position which is to be 
             referenced. </p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
       <Argument> 
		  <Name>index2</Name>
		  <Note><![CDATA[
		  <p>If present and 0, the key at the specified integer index position will be returned. 
             If present and 1, the value at the specified integer index position will be returned. </p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>    
		<Return><![CDATA[ 
	    <p>Returns a value associated with the specified integer index position.</p>
	    ]]></Return>    
    </Syntax-Structure>
    <Syntax-Structure>
        <Expression><![CDATA[<p><b>(ref aStruct sorted: key) </b></p>]]></Expression>
    	<Argument> 
		  <Name>aStruct</Name>
		  <Note><![CDATA[
		  <p> The Structure to be referenced.</p>
          ]]></Note>
		  <AISTypes>Structure</AISTypes>
		</Argument>  
	    <Argument> 
		  <Name>sorted:</Name>
		  <Note><![CDATA[
		  <p> If present and is the symbol sorted, the current key value bindings are assumed to 
              exist in binary unique ascending sorted order.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>key</Name>
		  <Note><![CDATA[
		  <p>The key whose bound value is to be returned. If no such key is present in the 
             current binding set, a value of #void will be returned.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns a value bound with the key.</p>
	    ]]></Return>    
    </Syntax-Structure>
    <Syntax-Structure>
       <Expression><![CDATA[<p><b>(ref aStruct unsorted: key ) </b></p>]]></Expression>
    	<Argument> 
		  <Name>aStruct</Name>
		  <Note><![CDATA[
		  <p> The Structure to be referenced.</p>
          ]]></Note>
		  <AISTypes>Structure</AISTypes>
		</Argument>  
	    <Argument> 
		  <Name>unsorted:</Name>
		  <Note><![CDATA[
		  <p> If present and is the symbol unsorted, the current key value bindings are assumed 
              NOT to exist in binary unique ascending sorted order.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>key</Name>
		  <Note><![CDATA[
		  <p>The key whose bound value is to be returned. If no such key is present in the 
             current binding set, a value of #void will be returned.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns a value bound with the key.</p>
	    ]]></Return>    
	</Syntax-Structure>
    <Syntax-Dictionary>
	    <Expression><![CDATA[<p><b> (ref dict key) </b></p>                 			     
					<p><b><FONT COLOR="#0000ff">Strong Typed: </FONT>
                       <blockquote>(refStrValue dict index) </blockquote> </b></p>
                    <p><b><blockquote> (refStrKey dict index)</blockquote>  </b></p>]]></Expression>
		<Argument> 
		  <Name>dict</Name>
		  <Note><![CDATA[
		  <p> The Dictionary to be referenced.</p>
          ]]></Note>
		  <AISTypes>Dictionary</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>key</Name>
		  <Note><![CDATA[
		  <p>The key whose bound value is to be returned. If no such key is present in the 
             current binding set, a value of #void will be returned. The current key value 
             bindings are assumed NOT to exist in binary unique ascending sorted order.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns a value bound with the key.</p>
	    ]]></Return>    
    </Syntax-Dictionary>
    <Syntax-Dictionary>
        <Expression><![CDATA[ <p><b>  (ref dict index1)  </b></p>]]></Expression>
	   <Argument> 
		  <Name>dict</Name>
		  <Note><![CDATA[
		  <p> The Dictionary to be referenced.</p>
          ]]></Note>
		  <AISTypes>Dictionary</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index1</Name>
		  <Note><![CDATA[
		  <p>If present and numeric, the value at the specified integer index position will 
             be returned. </p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>     
		<Return><![CDATA[ 
	    <p>Returns a value associated with the specified integer index position.</p>
	    ]]></Return>    	    
    </Syntax-Dictionary>
    <Syntax-Dictionary>
        <Expression><![CDATA[<p><b>(ref dict index1 index2) </b></p>]]></Expression>
       <Argument> 
		  <Name>dict</Name>
		  <Note><![CDATA[
		  <p> The Dictionary to be referenced.</p>
          ]]></Note>
		  <AISTypes>Dictionary</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index1</Name>
		  <Note><![CDATA[
		  <p>If present and numeric, index1 specifies an integer index position which is to be 
             referenced. </p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
       <Argument> 
		  <Name>index2</Name>
		  <Note><![CDATA[
		  <p>If present and 0, the key at the specified integer index position will be returned. 
             If present and 1, the value at the specified integer index position will be returned. </p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>    
		<Return><![CDATA[ 
	    <p>Returns a value associated with the specified integer index position.</p>
	    ]]></Return>    
    </Syntax-Dictionary>
    <Syntax-Dictionary>
        <Expression><![CDATA[<p><b>(ref dict sorted: key) </b></p>]]></Expression>
    	<Argument> 
		  <Name>dict</Name>
		  <Note><![CDATA[
		  <p> The Dictionary to be referenced.</p>
          ]]></Note>
		  <AISTypes>Dictionary</AISTypes>
		</Argument>  
	    <Argument> 
		  <Name>sorted:</Name>
		  <Note><![CDATA[
		  <p> If present and is the symbol sorted, the current key value bindings are assumed to 
              exist in binary unique ascending sorted order.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>key</Name>
		  <Note><![CDATA[
		  <p>The key whose bound value is to be returned. If no such key is present in the 
             current binding set, a value of #void will be returned.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns a value bound with the key.</p>
	    ]]></Return>    
    </Syntax-Dictionary>
    <Syntax-Dictionary>
       <Expression><![CDATA[<p><b>(ref dict unsorted: key ) </b></p>]]></Expression>
    	<Argument> 
		  <Name>dict</Name>
		  <Note><![CDATA[
		  <p> The Dictionary to be referenced.</p>
          ]]></Note>
		  <AISTypes>Dictionary</AISTypes>
		</Argument>  
	    <Argument> 
		  <Name>unsorted:</Name>
		  <Note><![CDATA[
		  <p> If present and is the symbol unsorted, the current key value bindings are assumed 
              NOT to exist in binary unique ascending sorted order.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>key</Name>
		  <Note><![CDATA[
		  <p>The key whose bound value is to be returned. If no such key is present in the 
             current binding set, a value of #void will be returned.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns a value bound with the key.</p>
	    ]]></Return>    
	</Syntax-Dictionary>
   <Syntax-Directory>
	    <Expression><![CDATA[<p><b> (ref dir key) </b></p>                 			     
					<p><b><FONT COLOR="#0000ff">Strong Typed: </FONT>
                       <blockquote>(refDirValue aDir index) </blockquote> </b></p>
                    <p><b><blockquote> (refDirKey aDir index)</blockquote>  </b></p>]]></Expression>
		<Argument> 
		  <Name>dir</Name>
		  <Note><![CDATA[
		  <p> The Directory to be referenced.</p>
          ]]></Note>
		  <AISTypes>Directory</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>key</Name>
		  <Note><![CDATA[
		  <p>The key whose bound value is to be returned. If no such key is present in the 
             current binding set, a value of #void will be returned. The current key value 
             bindings are assumed NOT to exist in binary unique ascending sorted order.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns a value bound with the key.</p>
	    ]]></Return>    
   </Syntax-Directory>
   <Syntax-Directory>
        <Expression><![CDATA[ <p><b>  (ref dir index1)  </b></p>]]></Expression>
	   <Argument> 
		  <Name>dir</Name>
		  <Note><![CDATA[
		  <p> The Directory to be referenced.</p>
          ]]></Note>
		  <AISTypes>Directory</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index1</Name>
		  <Note><![CDATA[
		  <p>If present and numeric, the value at the specified integer index position will 
             be returned. </p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>     
		<Return><![CDATA[ 
	    <p>Returns a value associated with the specified integer index position.</p>
	    ]]></Return>    	    
   </Syntax-Directory>
   <Syntax-Directory>
        <Expression><![CDATA[<p><b>(ref dir index1 index2) </b></p>]]></Expression>
       <Argument> 
		  <Name>dir</Name>
		  <Note><![CDATA[
		  <p> The Directory to be referenced.</p>
          ]]></Note>
		  <AISTypes>Directory</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index1</Name>
		  <Note><![CDATA[
		  <p>If present and numeric, index1 specifies an integer index position which is to be 
             referenced. </p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
       <Argument> 
		  <Name>index2</Name>
		  <Note><![CDATA[
		  <p>If present and 0, the key at the specified integer index position will be returned. 
             If present and 1, the value at the specified integer index position will be returned. </p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>    
		<Return><![CDATA[ 
	    <p>Returns a value associated with the specified integer index position.</p>
	    ]]></Return>    
   </Syntax-Directory>
   <Syntax-Directory>
        <Expression><![CDATA[<p><b>(ref dir sorted: key) </b></p>]]></Expression>
    	<Argument> 
		  <Name>dir</Name>
		  <Note><![CDATA[
		  <p> The Directory to be referenced.</p>
          ]]></Note>
		  <AISTypes>Directory</AISTypes>
		</Argument>  
	    <Argument> 
		  <Name>sorted:</Name>
		  <Note><![CDATA[
		  <p> If present and is the symbol sorted, the current key value bindings are assumed to 
              exist in binary unique ascending sorted order.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>key</Name>
		  <Note><![CDATA[
		  <p>The key whose bound value is to be returned. If no such key is present in the 
             current binding set, a value of #void will be returned.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns a value bound with the key.</p>
	    ]]></Return>    
   </Syntax-Directory>
   <Syntax-Directory>
       <Expression><![CDATA[<p><b>(ref dir unsorted: key ) </b></p>]]></Expression>
    	<Argument> 
		  <Name>dir</Name>
		  <Note><![CDATA[
		  <p> The Directory to be referenced.</p>
          ]]></Note>
		  <AISTypes>Directory</AISTypes>
		</Argument>  
	    <Argument> 
		  <Name>unsorted:</Name>
		  <Note><![CDATA[
		  <p> If present and is the symbol unsorted, the current key value bindings are assumed 
              NOT to exist in binary unique ascending sorted order.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>key</Name>
		  <Note><![CDATA[
		  <p>The key whose bound value is to be returned. If no such key is present in the 
             current binding set, a value of #void will be returned.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns a value bound with the key.</p>
	    ]]></Return>    
	</Syntax-Directory>
   <Syntax-Vector>
	    <Expression><![CDATA[<p><b> (ref vector index) </b></p>                 			     
					<p><b><FONT COLOR="#0000ff">Strong Typed: </FONT>
                          <blockquote>(ref  Vector index) </blockquote> </b></p>
        ]]></Expression>
		<Argument> 
		  <Name>vector</Name>
		  <Note><![CDATA[
		  <p> A predefined vector object. </p>
          ]]></Note>
		  <AISTypes>Vector  </AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index</Name>
		  <Note><![CDATA[
		  <p>An Integer index.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>A single vector element.</p>
	    ]]></Return>            
	</Syntax-Vector>
   <Syntax-FltVector>
	    <Expression><![CDATA[   <p><b><FONT COLOR="#0000ff">Strong Typed: </FONT>
                          <blockquote>(ref FltVector index) </blockquote> </b></p>
        ]]></Expression>
		<Argument> 
		  <Name>FltVector</Name>
		  <Note><![CDATA[
		  <p> A predefined Float Vector.</p>
          ]]></Note>
		  <AISTypes>FltVector  </AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index</Name>
		  <Note><![CDATA[
		  <p>An Integer index.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>A single vector element.</p>
	    ]]></Return>            
	</Syntax-FltVector>
   <Syntax-IntVector>
	    <Expression><![CDATA[   <p><b><FONT COLOR="#0000ff">Strong Typed: </FONT>
                          <blockquote>(ref IntVector index)  </blockquote> </b></p>
        ]]></Expression>
		<Argument> 
		  <Name>IntVector</Name>
		  <Note><![CDATA[
		  <p> A predefined Integer Vector.</p>
          ]]></Note>
		  <AISTypes>IntVector  </AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index</Name>
		  <Note><![CDATA[
		  <p>An Integer index.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>A single vector element.</p>
	    ]]></Return>            
	</Syntax-IntVector>
  <Syntax-ShortVector>
	    <Expression><![CDATA[   <p><b><FONT COLOR="#0000ff">Strong Typed: </FONT>
                          <blockquote>(ref ShortVector index)  </blockquote> </b></p>
        ]]></Expression>
		<Argument> 
		  <Name>ShortVector</Name>
		  <Note><![CDATA[
		  <p> A predefined Short Vector.</p>
          ]]></Note>
		  <AISTypes>ShortVector  </AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index</Name>
		  <Note><![CDATA[
		  <p>An Integer index.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>A single vector element.</p>
	    ]]></Return>            
	</Syntax-ShortVector>
   <Syntax-NumVector>
	    <Expression><![CDATA[   <p><b><FONT COLOR="#0000ff">Strong Typed: </FONT>
                          <blockquote>(ref NumVector index)    </blockquote> </b></p>
        ]]></Expression>
		<Argument> 
		  <Name>NumVector</Name>
		  <Note><![CDATA[
		  <p> A predefined Number Vector.</p>
          ]]></Note>
		  <AISTypes>NumVector  </AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index</Name>
		  <Note><![CDATA[
		  <p>An Integer index.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>A single vector element.</p>
	    ]]></Return>            
	</Syntax-NumVector>
   <Syntax-ObjVector>
	    <Expression><![CDATA[   <p><b><FONT COLOR="#0000ff">Strong Typed: </FONT>
                          <blockquote>(ref ObjVector index)     </blockquote> </b></p>
        ]]></Expression>
		<Argument> 
		  <Name>ObjVector</Name>
		  <Note><![CDATA[
		  <p> A predefined Object Vector.</p>
          ]]></Note>
		  <AISTypes>ObjVector  </AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index</Name>
		  <Note><![CDATA[
		  <p>An Integer index.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>A single vector element.</p>
	    ]]></Return>            
	</Syntax-ObjVector>
   <Syntax-BitVector>
	    <Expression><![CDATA[   <p><b><FONT COLOR="#0000ff">Strong Typed: </FONT>
                          <blockquote>(ref BitVector index)     </blockquote> </b></p>
        ]]></Expression>
		<Argument> 
		  <Name>BitVector</Name>
		  <Note><![CDATA[
		  <p> A predefined Bit Vector.</p>
          ]]></Note>
		  <AISTypes>BitVector  </AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index</Name>
		  <Note><![CDATA[
		  <p>An Integer index.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>A single vector element.</p>
	    ]]></Return>            
	</Syntax-BitVector>
   <Syntax-Vector>
	    <Expression><![CDATA[   <p><b><FONT COLOR="#0000ff">Strong Typed: </FONT>
                          <blockquote>(ref  PcodeVector index)       </blockquote> </b></p>
        ]]></Expression>
		<Argument> 
		  <Name>PcodeVector</Name>
		  <Note><![CDATA[
		  <p> A predefined Pcode Vector.</p>
          ]]></Note>
		  <AISTypes>PcodeVector  </AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index</Name>
		  <Note><![CDATA[
		  <p>An Integer index.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>A single vector element.</p>
	    ]]></Return>            
	</Syntax-Vector>
   <Syntax-Vector>
	    <Expression><![CDATA[   <p><b><FONT COLOR="#0000ff">Strong Typed: </FONT>
                          <blockquote>(ref ByteVector index)         </blockquote> </b></p>
        ]]></Expression>
		<Argument> 
		  <Name>ByteVector</Name>
		  <Note><![CDATA[
		  <p> A predefined Byte Vector.</p>
          ]]></Note>
		  <AISTypes>ByteVector  </AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index</Name>
		  <Note><![CDATA[
		  <p>An Integer index.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>A single vector element.</p>
	    ]]></Return>            
	</Syntax-Vector>
   <Syntax-Brick>
	    <Expression><![CDATA[<p><b> (ref aBrick ...) </b></p>  ]]></Expression>
		<Argument> 
		  <Name>aBrick</Name>
		  <Note><![CDATA[
		  <p> The Brick to be referenced. </p>
          ]]></Note>
		  <AISTypes>Brick </AISTypes>
		</Argument>  
		<Argument> 
		  <Name>...</Name>
		  <Note><![CDATA[none]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns the Brick's field list Structure.</p>
	    ]]></Return>
   </Syntax-Brick>
   <Syntax-Brick>
         <Expression><![CDATA[<p><b> (ref aBrick "FieldList") </b></p>  ]]></Expression>
		<Argument> 
		  <Name>aBrick</Name>
		  <Note><![CDATA[
		  <p> The Brick to be referenced. </p>
          ]]></Note>
		  <AISTypes>Brick </AISTypes>
		</Argument>  
		<Argument> 
		  <Name>FieldList</Name>
		  <Note><![CDATA[The String Field List]]></Note>
		  <AISTypes>String</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns the Brick's field list Structure.</p>
	    ]]></Return>
   </Syntax-Brick>
   <Syntax-Brick>
        <Expression><![CDATA[<p><b> (ref aBrick "FieldCount") </b></p>  ]]></Expression>
		<Argument> 
		  <Name>aBrick</Name>
		  <Note><![CDATA[
		  <p> The Brick to be referenced. </p>
          ]]></Note>
		  <AISTypes>Brick </AISTypes>
		</Argument>  
		<Argument> 
		  <Name>FieldCount</Name>
		  <Note><![CDATA[The String Field Count]]></Note>
		  <AISTypes>String</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns the number of fields in each row.</p>
	    ]]></Return>
   </Syntax-Brick>
   <Syntax-Brick>
         <Expression><![CDATA[<p><b> (ref aBrick "RowCount") </b></p>  ]]></Expression>
		<Argument> 
		  <Name>aBrick</Name>
		  <Note><![CDATA[
		  <p> The Brick to be referenced. </p>
          ]]></Note>
		  <AISTypes>Brick </AISTypes>
		</Argument>  
		<Argument> 
		  <Name>RowCount</Name>
		  <Note><![CDATA[The String Row Count]]></Note>
		  <AISTypes>String</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns the number of rows in each Brick object.</p>
	    ]]></Return>
   </Syntax-Brick>
   <Syntax-Brick>
        <Expression><![CDATA[<p><b> (ref aBrick "ByteCount") </b></p>  ]]></Expression>
		<Argument> 
		  <Name>aBrick</Name>
		  <Note><![CDATA[
		  <p> The Brick to be referenced. </p>
          ]]></Note>
		  <AISTypes>Brick </AISTypes>
		</Argument>  
		<Argument> 
		  <Name>ByteCount</Name>
		  <Note><![CDATA[The String Byte Count]]></Note>
		  <AISTypes>String</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns the number of bytes in each Brick object.</p>
	    ]]></Return>
   </Syntax-Brick>
   <Syntax-Brick>
        <Expression><![CDATA[<p><b> (ref aBrick fieldIndex) </b></p>  ]]></Expression>
		<Argument> 
		  <Name>aBrick</Name>
		  <Note><![CDATA[
		  <p> The Brick to be referenced. </p>
          ]]></Note>
		  <AISTypes>Brick </AISTypes>
		</Argument>  
		<Argument> 
		  <Name>fieldIndex</Name>
		  <Note><![CDATA[The field index of a field in the Brick (must be either a field name or an 
                integer index of the field).]]></Note>
		  <AISTypes>Symbol Integer</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns the contents of the specified field in the Brick (always the first repeat).</p>
	    ]]></Return>
   </Syntax-Brick>
   <Syntax-Brick>
        <Expression><![CDATA[<p><b> (ref aBrick fieldIndex number {rowIndex}) </b></p>  ]]></Expression>
		<Argument> 
		  <Name>aBrick</Name>
		  <Note><![CDATA[
		  <p> The Brick to be referenced. </p>
          ]]></Note>
		  <AISTypes>Brick </AISTypes>
		</Argument>  
		<Argument> 
		  <Name>fieldIndex</Name>
		  <Note><![CDATA[The field index of a field in the Brick (must be either a field name or an 
                integer index of the field).]]></Note>
		  <AISTypes>Symbol Integer</AISTypes>
		</Argument>
	    <Argument> 
		  <Name>number</Name>
		  <Note><![CDATA[The field repeat index of the specified field in the Brick 
               (the first repeat is always index zero).]]></Note>
		  <AISTypes> Integer</AISTypes>
		</Argument>
        <Argument> 
		  <Name>rowIndex</Name>
		  <Note><![CDATA[(Optional) The row index of the specified Brick in the Brick 
               (the first row is always index zero).]]></Note>
		  <AISTypes> Integer</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns the contents of the specified field in the Brick 
           (always using the specified repeat index).</p>
	    ]]></Return>
   </Syntax-Brick>
   <Syntax-Brick>
        <Expression><![CDATA[<p><b> (ref aBrick fieldIndex type: {rowIndex}) </b></p>  ]]></Expression>
		<Argument> 
		  <Name>aBrick</Name>
		  <Note><![CDATA[
		  <p> The Brick to be referenced. </p>
          ]]></Note>
		  <AISTypes>Brick </AISTypes>
		</Argument>  
		<Argument> 
		  <Name>fieldIndex</Name>
		  <Note><![CDATA[The field index of a field in the Brick (must be either a field name or an 
                integer index of the field).]]></Note>
		  <AISTypes>Symbol Integer</AISTypes>
		</Argument>
	    <Argument> 
		  <Name>type:</Name>
		  <Note><![CDATA[The symbol type:]]></Note>
		  <AISTypes> Symbol</AISTypes>
		</Argument>
        <Argument> 
		  <Name>rowIndex</Name>
		  <Note><![CDATA[(Optional) The row index of the specified row in the Brick 
               (the first row is always index zero).]]></Note>
		  <AISTypes> Integer</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns the symbolic name of the data type of the 
           specified field in the Brick.</p>
	    ]]></Return>
   </Syntax-Brick>
   <Syntax-Brick>
         <Expression><![CDATA[<p><b> (ref aBrick fieldIndex repeats: {rowIndex}) </b></p>  ]]></Expression>
		<Argument> 
		  <Name>aBrick</Name>
		  <Note><![CDATA[
		  <p> The Brick to be referenced. </p>
          ]]></Note>
		  <AISTypes>Brick </AISTypes>
		</Argument>  
		<Argument> 
		  <Name>fieldIndex</Name>
		  <Note><![CDATA[The field index of a field in the Brick (must be either a field name or an 
                integer index of the field).]]></Note>
		  <AISTypes>Symbol Integer</AISTypes>
		</Argument>
	    <Argument> 
		  <Name>repeats:</Name>
		  <Note><![CDATA[The symbol repeats:]]></Note>
		  <AISTypes> Symbol</AISTypes>
		</Argument>
        <Argument> 
		  <Name>rowIndex</Name>
		  <Note><![CDATA[(Optional) The row index of the specified row in the Brick 
               (the first row is always index zero).]]></Note>
		  <AISTypes> Integer</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns the number of repeats of the data type of the specified field 
          in the Brick.</p>
	    ]]></Return>
   </Syntax-Brick>
   <Syntax-Brick>
        <Expression><![CDATA[<p><b> (ref aBrick fieldIndex offset: {rowIndex}) </b></p>  ]]></Expression>
		<Argument> 
		  <Name>aBrick</Name>
		  <Note><![CDATA[
		  <p> The Brick to be referenced. </p>
          ]]></Note>
		  <AISTypes>Brick </AISTypes>
		</Argument>  
		<Argument> 
		  <Name>fieldIndex</Name>
		  <Note><![CDATA[The field index of a field in the Brick (must be either a field name or an 
                integer index of the field).]]></Note>
		  <AISTypes>Symbol Integer</AISTypes>
		</Argument>
	    <Argument> 
		  <Name>offset:</Name>
		  <Note><![CDATA[The symbol offset:]]></Note>
		  <AISTypes> Symbol</AISTypes>
		</Argument>
        <Argument> 
		  <Name>rowIndex</Name>
		  <Note><![CDATA[(Optional) The row index of the specified row in the Brick 
               (the first row is always index zero).]]></Note>
		  <AISTypes> Integer</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns the offset of the specified field from the beginning of the Brick.</p>
	    ]]></Return>
   </Syntax-Brick>
   <Syntax-Brick>
        <Expression><![CDATA[<p><b> (ref aBrick fieldIndex pointer: {rowIndex}) </b></p>  ]]></Expression>
		<Argument> 
		  <Name>aBrick</Name>
		  <Note><![CDATA[
		  <p> The Brick to be referenced. </p>
          ]]></Note>
		  <AISTypes>Brick </AISTypes>
		</Argument>  
		<Argument> 
		  <Name>fieldIndex</Name>
		  <Note><![CDATA[The field index of a field in the Brick (must be either a field name or an 
                integer index of the field).]]></Note>
		  <AISTypes>Symbol Integer</AISTypes>
		</Argument>
	    <Argument> 
		  <Name>pointer:</Name>
		  <Note><![CDATA[The symbol pointer:]]></Note>
		  <AISTypes> Symbol</AISTypes>
		</Argument>
        <Argument> 
		  <Name>rowIndex</Name>
		  <Note><![CDATA[(Optional) The row index of the specified row in the Brick 
               (the first row is always index zero).]]></Note>
		  <AISTypes> Integer</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>Returns a pointer to the specified field in the Brick.</p>
	    ]]></Return>           
	</Syntax-Brick>
   <Syntax-Matrix>
	    <Expression><![CDATA[<p><b>(ref  matrix  index)</b></p> ]]></Expression>
		<Argument> 
		  <Name>matrix</Name>
		  <Note><![CDATA[
		  <p> A predefined Matrix object.</p>
          ]]></Note>
		  <AISTypes>Matrix</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index</Name>
		  <Note><![CDATA[
		  <p>An integer index or a series of indices</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>A single Matrix element.</p>
	    ]]></Return>     
	</Syntax-Matrix>
   <Syntax-NumMatrix>
	    <Expression><![CDATA[<p><b>(ref  nummatrix  index)</b></p> ]]></Expression>
		<Argument> 
		  <Name>nummatrix</Name>
		  <Note><![CDATA[
		  <p> A predefined NumMatrix object.</p>
          ]]></Note>
		  <AISTypes>NumMatrix</AISTypes>
		</Argument>  
		<Argument> 
		  <Name>index</Name>
		  <Note><![CDATA[
		  <p>An integer index or a series of indices</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>
		<Return><![CDATA[ 
	    <p>A single NumMatrix element.</p>
	    ]]></Return>     
	</Syntax-NumMatrix>
    <Syntax-List>
	    <Expression><![CDATA[<p><b>(ref list index)</b></p>]]></Expression>
		<Argument> 
		  <Name>list</Name>
		  <Note><![CDATA[
		  <p> A list (collection of pairs).</p>
          ]]></Note>
		  <AISTypes>List</AISTypes>
		</Argument>  
    	<Argument> 
		  <Name>index</Name>
		  <Note><![CDATA[
		  <p> An integer index, or a symbol index. </p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>  
		<Return><![CDATA[ 
	    <p>The  list element at list[indexi].</p>
	    ]]></Return>    	      
	</Syntax-List>
    <Syntax-Function>
	    <Expression><![CDATA[<p><b>(ref   FuncId)</b></p>
                    <p><b>(ref   FuncName)</b></p>]]></Expression>
		<Argument> 
		  <Name>FuncId</Name>
		  <Note><![CDATA[
		  <p> The object id of  the Function</p>
          ]]></Note>
		  <AISTypes>---</AISTypes>
		</Argument>  
    	<Argument> 
		  <Name>FuncName</Name>
		  <Note><![CDATA[
		  <p>The symbolic name  of  the Function.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
		<Return><![CDATA[ 
	    <p>If the argument of the ref function is a {funcId}, 
           the returned value is the function name.  If the argument of the ref function is 
           {funcName}, the returned value is the object id of the function.</p>
	    ]]></Return>    	      
	</Syntax-Function>
    <Syntax-Lambda>
	    <Expression><![CDATA[<p><b>(ref  anLambda.LambdaVariable)</b></p>]]></Expression>
		<Argument> 
		  <Name>anLambda</Name>
		  <Note><![CDATA[
		  <p> The name of an Lambda</p>
          ]]></Note>
		  <AISTypes>Lambda</AISTypes>
		</Argument>  
    	<Argument> 
		  <Name>LambdaVariable</Name>
		  <Note><![CDATA[
		  <p>Lambda  Persistent Variable name or Child Lambda Name</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
		<Return><![CDATA[ 
	    <p>If the argument was a persistent variable, the value of the persistent variable is 
           returned.  If the argument was a name of a Child Lambda, the object id of the Child 
           Lambda is returned.</p>
	    ]]></Return>    	      
	</Syntax-Lambda>
    <Syntax-ObjectRepository>
	    <Expression><![CDATA[<p><b>(ref aGor key) </b></p>]]></Expression>
		<Argument> 
		  <Name>aGor</Name>
		  <Note><![CDATA[
		  <p> The ObjectRepository which will be referenced.</p>
          ]]></Note>
		  <AISTypes>ObjectRepository</AISTypes>
		</Argument>  
    	<Argument> 
		  <Name>key</Name>
		  <Note><![CDATA[
		  <p>The key associated with the object.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
		<Return><![CDATA[ 
	    <p>Returns the object in the Object Repository associated with the key.</p>
	    ]]></Return>  
    </Syntax-ObjectRepository>
    <Syntax-ObjectRepository>
	    <Expression><![CDATA[<p><b>(ref aGor index1 index2) </b></p>]]></Expression>
		<Argument> 
		  <Name>aGor</Name>
		  <Note><![CDATA[
		  <p> The ObjectRepository which will be referenced.</p>
          ]]></Note>
		  <AISTypes>ObjectRepository</AISTypes>
		</Argument>  
    	<Argument> 
		  <Name>index1</Name>
		  <Note><![CDATA[
		  <p>The index (the position) where the object is stored.</p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>  
    	<Argument> 
		  <Name>index2</Name>
		  <Note><![CDATA[
		  <p>The value must be 0 or 1 only. All other values are illegal. </p>
          ]]></Note>
		  <AISTypes>Integer</AISTypes>
		</Argument>  
		<Return><![CDATA[ 
	    <p>If the value of the {index2} argument is equal to 0, then the key at position {index1} will be returned.
         If the value of the {index2} argument is equal to 1, the object will be returned. If {index1} or {index2} is 
         invalid, then #void is returned</p>
	    ]]></Return>    	
    </Syntax-ObjectRepository>
    <Syntax-ObjectRepository>
	    <Expression><![CDATA[<p><b>(ref aGor position: key)  </b></p>]]></Expression>
		<Argument> 
		  <Name>position:</Name>
		  <Note><![CDATA[
		  <p> The symbolic constant to request the position (index) of the specified key argument.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
    	<Argument> 
		  <Name>key</Name>
		  <Note><![CDATA[
		  <p>A valid key in the Object Repository argument {aGor}.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
		<Return><![CDATA[ 
	    <p>If the key exists in the Object Repository, the ref function returns the numeric position of the specified index value. 
            If the index is illegal or out of bounds, the Boolean value: false will be returned.</p>
	    ]]></Return>   
    </Syntax-ObjectRepository>
    <Syntax-ObjectRepository>
	    <Expression><![CDATA[<p><b>(ref aGor member: odbid:)  </b></p>]]></Expression>
		<Argument> 
		  <Name> member:</Name>
		  <Note><![CDATA[
		  <p> A keyword argument. If present, it must immediately followed by the keyword odbid:</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
    	<Argument> 
		  <Name>odbid:</Name>
		  <Note><![CDATA[
		  <p>A keyword argument. </p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
		<Return><![CDATA[ 
	    <p>If the keyword pair member: and obdid: are the arguments to the ref function, then the ref returns the odbid 
         of the Object Repository (which is a Byte Vector) if the Object Repository is active. If the Object Repository 
         is not active, then the ref function wil return #void.</p>
	    ]]></Return>    	       	
    </Syntax-ObjectRepository>
    <Syntax-ObjectRepository>
	    <Expression><![CDATA[<p><b>(ref aGor member: name:)  </b></p>]]></Expression>
		<Argument> 
		  <Name> member:</Name>
		  <Note><![CDATA[
		  <p> A keyword argument. If present, it must immediately followed by the keyword name:</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
    	<Argument> 
		  <Name>name:</Name>
		  <Note><![CDATA[
		  <p>A keyword argument. </p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
		<Return><![CDATA[ 
	    <p>If the keyword pair member: and name: are the arguments to the ref function, then the ref returns the 
          filename string of the Object Repository (including the file's pathname). </p>
	    ]]></Return>    	     
    </Syntax-ObjectRepository>
    <Syntax-ObjectRepository>
	    <Expression><![CDATA[<p><b>(ref aGor frame: frameid)  </b></p>]]></Expression>
		<Argument> 
		  <Name> frame:</Name>
		  <Note><![CDATA[
		  <p>A keyword argument. If present, it must immediately followed by a frameid value.</p>
          ]]></Note>
		  <AISTypes>Symbol</AISTypes>
		</Argument>  
    	<Argument> 
		  <Name>frameid</Name>
		  <Note><![CDATA[
		  <p>A valid repository frame id obtained from a previous save.  </p>
          ]]></Note>
		  <AISTypes>Text</AISTypes>
		</Argument>  
		<Return><![CDATA[ 
	    <p>The object as previously saved in the specified frameid. </p>
	    ]]></Return>    	     	      
	</Syntax-ObjectRepository>
    <Syntax>
	    <Expression><![CDATA[<p><b>(ref obj)</b></p>]]></Expression>
		<Argument> 
		  <Name>obj</Name>
		  <Note><![CDATA[
		  <p> Must be a native data type object.</p>
          ]]></Note>
		  <AISTypes>Void Boolean Character Number Date Complex</AISTypes>
		</Argument>  
		<Return><![CDATA[ 
	    <p>The value of the object.</p>
	    ]]></Return>    	      
	</Syntax>
</Function>
